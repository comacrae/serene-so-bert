<discord>
<team_domain>Racket</team_domain>
<channel_name>general</channel_name>
<start_date>2020-08-02T06:41:50.103000</start_date>
<end_date>2020-10-30T15:45:15.367000</end_date>
<message>
  <ts>2020-08-02T06:41:50.103000</ts>
  <user>Liahm</user>
  <text>morning</text>
</message>
<message>
  <ts>2020-08-02T06:43:47.903000</ts>
  <user>Liahm</user>
  <text>i\'m considering Racket along with some other staticallycompiled languages (e.g. Nim) for writing (multiplatform (desktop) app. Racket\'s builtin GUI is great plus but wonder if the widget set is goodenough for writing general desktop apps or it is more suited just for DrRacket?</text>
</message>
<message>
  <ts>2020-08-02T06:47:28.211000</ts>
  <user>Kiam</user>
  <text>it's generally good. there are complex desktop apps written with it.</text>
</message>
<message>
  <ts>2020-08-02T06:48:33.826000</ts>
  <user>Kiam</user>
  <text>ActivityLog is the most well known of them https://github.com/alexhhh/ActivityLog2</text>
</message>
<message>
  <ts>2020-08-02T06:49:24.670000</ts>
  <user>Kiam</user>
  <text>the author also has a blog where he often explains how to do various things with the racket GUI framework https://alexhhh.github.io/</text>
</message>
<message>
  <ts>2020-08-02T08:46:43.967000</ts>
  <user>Liahm</user>
  <text>@notjackI know about that app and commented/asked something on his blog but never got any reply...</text>
</message>
<message>
  <ts>2020-08-02T08:47:44.846000</ts>
  <user>Liahm</user>
  <text>any other app besides AL2 which can be inspected?</text>
</message>
<message>
  <ts>2020-08-02T08:47:56.446000</ts>
  <user>Kiam</user>
  <text>he tends to hang out in the Racket Slack you might have an easier time getting in touch with him there</text>
</message>
<message>
  <ts>2020-08-02T08:47:57.835000</ts>
  <user>Liahm</user>
  <text>i know only about that one and DrR</text>
</message>
<message>
  <ts>2020-08-02T08:48:11.674000</ts>
  <user>Liahm</user>
  <text>ok</text>
</message>
<message>
  <ts>2020-08-02T08:48:34.570000</ts>
  <user>Kiam</user>
  <text>I don't know of others offhand. The mailing list would be a good place to ask for others.</text>
</message>
<message>
  <ts>2020-08-02T08:48:44.737000</ts>
  <user>Liahm</user>
  <text>Slack channel is more active?</text>
</message>
<message>
  <ts>2020-08-02T08:49:07.143000</ts>
  <user>Kiam</user>
  <text>Yes but mainly it just has a different crowd</text>
</message>
<message>
  <ts>2020-08-02T08:49:29.509000</ts>
  <user>Kiam</user>
  <text>more of the Racket core dev team is there for example</text>
</message>
<message>
  <ts>2020-08-02T18:37:09.984000</ts>
  <user>Chara</user>
  <text>The more specific you can be about your app the more likely u will get a useful response. Eg you could figure out what GUI library you‚Äôre going to use if not racket‚Äôs so you have a point of comparison. The field of ‚Äúhow do I write a cross platform GUI app‚Äù is huge. And do you even need one? Too many parameters. @gour</text>
</message>
<message>
  <ts>2020-08-02T18:57:09.214000</ts>
  <user>Liahm</user>
  <text>@Moinate i want something like this: http://saravali.de/screenshots.html</text>
</message>
<message>
  <ts>2020-08-02T18:58:15.637000</ts>
  <user>Liahm</user>
  <text>have a need for sqlite3 bindings then ffi to bind/use 3rd party Clib the rest should be libs written in host langauge based on that 3rd party C lib and frontend for gui</text>
</message>
<message>
  <ts>2020-08-02T19:41:01.683000</ts>
  <user>Cortlin</user>
  <text>What would be the most concise way to write something like```Scheme(if foo (stringappend bar baz foo quux) (stringappend bar baz))```</text>
</message>
<message>
  <ts>2020-08-02T20:00:44.866000</ts>
  <user>Alyiah</user>
  <text>```scheme(~a bar baz (if foo (~a foo quux) ))```?</text>
</message>
<message>
  <ts>2020-08-02T20:02:32.485000</ts>
  <user>Cortlin</user>
  <text>Oh that works!</text>
</message>
<message>
  <ts>2020-08-02T20:02:35.229000</ts>
  <user>Cortlin</user>
  <text>Thanks</text>
</message>
<message>
  <ts>2020-08-02T20:14:01.361000</ts>
  <user>Cortlin</user>
  <text>Is there a way to easily convert a `hasheq?` to a prefab or am I on a wrong path?</text>
</message>
<message>
  <ts>2020-08-02T20:18:01.866000</ts>
  <user>Brayan</user>
  <text>what do you mean by prefab?</text>
</message>
<message>
  <ts>2020-08-02T20:32:31.292000</ts>
  <user>Cortlin</user>
  <text>`struct` made with `#:prefab`</text>
</message>
<message>
  <ts>2020-08-02T20:33:02.523000</ts>
  <user>Cortlin</user>
  <text>https://docs.racketlang.org/guide/definestruct.html#%28part._prefabstruct%29</text>
</message>
<message>
  <ts>2020-08-02T20:52:33.789000</ts>
  <user>Chara</user>
  <text>@gour Those controls look fine to use racket/GUI. I don‚Äôt think you‚Äôll find any bad surprises. If you‚Äôre generating those circles yourself ask around about the correct Racket graphics library (pict maybe?; I always use 2htdp/image but don‚Äôt write GUI apps). Good luck!</text>
</message>
<message>
  <ts>2020-08-02T20:53:10.020000</ts>
  <user>Chara</user>
  <text>If you want mobile friendly this probably isn‚Äôt the route though.</text>
</message>
<message>
  <ts>2020-08-02T21:18:50.147000</ts>
  <user>Brayan</user>
  <text>erkin how do you want the easy conversion to work? is your hash from symbol to value and those symbols are assumed to match up with the struct members?</text>
</message>
<message>
  <ts>2020-08-02T21:24:08.933000</ts>
  <user>Cortlin</user>
  <text>Yup</text>
</message>
<message>
  <ts>2020-08-03T07:43:53.950000</ts>
  <user>Ahadi</user>
  <text>Hi all! is there a way to make racket REPL colorize its output like in DrRacket?</text>
</message>
<message>
  <ts>2020-08-03T08:19:47.028000</ts>
  <user>Liahm</user>
  <text>&gt; @gour Those controls look fine to use racket/GUI. I don‚Äôt think you‚Äôll find any bad surprises. If you‚Äôre generating those circles yourself ask around about the correct Racket graphics library (pict maybe?; I always use 2htdp/image but don‚Äôt write GUI apps). Good luck!@Moinate Thank you! I don't need circles  only rectangles...üôÇ Will do some evaluation (e.g. ffi) to see how it goes</text>
</message>
<message>
  <ts>2020-08-03T08:21:12.183000</ts>
  <user>Liahm</user>
  <text>&gt; If you want mobile friendly this probably isn‚Äôt the route though.@Moinate Is there any plan to have Racket on e.g. Android in the future?</text>
</message>
<message>
  <ts>2020-08-03T18:46:17.205000</ts>
  <user>Britten</user>
  <text>@gour I think you can run Racket(BC) on Android but it's not easy</text>
</message>
<message>
  <ts>2020-08-03T20:53:36.923000</ts>
  <user>Cortlin</user>
  <text>It's very easy to setup Racket on Termux but you probably want more than that.</text>
</message>
<message>
  <ts>2020-08-04T01:09:33.115000</ts>
  <user>Somer</user>
  <text>&gt; ```scheme&gt; (~a bar baz (if foo (~a foo quux) ))&gt; ```&gt; ?@nixin72 Mind blown tbh</text>
</message>
<message>
  <ts>2020-08-04T01:10:09.583000</ts>
  <user>Somer</user>
  <text>Didn't expect to be able to do that</text>
</message>
<message>
  <ts>2020-08-04T02:37:25.743000</ts>
  <user>Alyiah</user>
  <text>Lol I mean it\'d be the same thing in just about any language @spacey üåå ```jsbar + baz + (foo ? (foo + quux) )```</text>
</message>
<message>
  <ts>2020-08-04T04:40:50.300000</ts>
  <user>Brayan</user>
  <text>another way that's a couple extra characters (because `~a` is such a short name):```lisp(apply ~a bar baz (if foo (foo quux) ()))```</text>
</message>
<message>
  <ts>2020-08-04T07:19:32.753000</ts>
  <user>Zayne</user>
  <text>that quotes foo and quux</text>
</message>
<message>
  <ts>2020-08-04T14:00:52.959000</ts>
  <user>Olvin</user>
  <text>I wish people would stop teaching quote as a way for making lists</text>
</message>
<message>
  <ts>2020-08-04T15:42:56.620000</ts>
  <user>Somer</user>
  <text>I never got that far into Racket. How else do you make a list?</text>
</message>
<message>
  <ts>2020-08-04T15:43:44.935000</ts>
  <user>Amaliah</user>
  <text>(list 1 2 3)</text>
</message>
<message>
  <ts>2020-08-04T15:48:08.506000</ts>
  <user>Somer</user>
  <text>Ah of course</text>
</message>
<message>
  <ts>2020-08-04T15:49:57.361000</ts>
  <user>Amaliah</user>
  <text>you could also cons it together for extra points</text>
</message>
<message>
  <ts>2020-08-04T17:30:27.607000</ts>
  <user>Daevion</user>
  <text>I think the difference is quote can be anything where list has the type list  though I don‚Äôt fully understand when a quoted list becomes a list</text>
</message>
<message>
  <ts>2020-08-04T17:46:00.020000</ts>
  <user>Olvin</user>
  <text>When people think of quote as a way of making lists they often miss that you can\'t put expressions inside</text>
</message>
<message>
  <ts>2020-08-04T21:01:12.641000</ts>
  <user>Kiam</user>
  <text>and then you get people wondering why `'(1 2 (+ x 5))` doesn't work and _then_ they sometimes get the idea that `eval` is the way to fix that</text>
</message>
<message>
  <ts>2020-08-04T21:01:36.033000</ts>
  <user>Kiam</user>
  <text>it's a big shiny yellow brick road to hell</text>
</message>
<message>
  <ts>2020-08-04T21:02:16.250000</ts>
  <user>Kiam</user>
  <text>also @Alex Knauth I made traversals!</text>
</message>
<message>
  <ts>2020-08-04T21:03:01.727000</ts>
  <user>Kiam</user>
  <text>https://github.com/jackfirth/glass</text>
</message>
<message>
  <ts>2020-08-04T21:03:53.230000</ts>
  <user>Kiam</user>
  <text>üçâ is a good emoji</text>
</message>
<message>
  <ts>2020-08-04T21:04:31.751000</ts>
  <user>Daevion</user>
  <text>Yes üçâ</text>
</message>
<message>
  <ts>2020-08-04T21:20:31.361000</ts>
  <user>Cortlin</user>
  <text>üçâ :meow:</text>
</message>
<message>
  <ts>2020-08-04T22:53:43.390000</ts>
  <user>Britten</user>
  <text>Oh no I'm allergic to üçâ though</text>
</message>
<message>
  <ts>2020-08-04T22:54:02.675000</ts>
  <user>Britten</user>
  <text>Also honeydew and cantaloupe</text>
</message>
<message>
  <ts>2020-08-04T22:54:07.970000</ts>
  <user>Daevion</user>
  <text>üçá</text>
</message>
<message>
  <ts>2020-08-04T22:54:17.360000</ts>
  <user>Daevion</user>
  <text>Grapes are good too</text>
</message>
<message>
  <ts>2020-08-04T22:54:19.320000</ts>
  <user>Britten</user>
  <text>üòÑ</text>
</message>
<message>
  <ts>2020-08-04T22:57:06.722000</ts>
  <user>Daevion</user>
  <text>Racket version 7.8 is available. https://blog.racketlang.org/2020/08/racketv78.html</text>
</message>
<message>
  <ts>2020-08-04T22:58:06.240000</ts>
  <user>Daevion</user>
  <text>Pinned a message.</text>
</message>
<message>
  <ts>2020-08-05T05:46:48.535000</ts>
  <user>Cortlin</user>
  <text>Hmm</text>
</message>
<message>
  <ts>2020-08-05T05:47:00.202000</ts>
  <user>Cortlin</user>
  <text>`(define)` is an error but `(definevalues () (values))` is not.</text>
</message>
<message>
  <ts>2020-08-05T05:47:18.775000</ts>
  <user>Cortlin</user>
  <text>I guess `define` is strictly 1 definition whereas `definevalues` is any number of definitions including zero.</text>
</message>
<message>
  <ts>2020-08-08T09:41:21.185000</ts>
  <user>Kiam</user>
  <text>0 days since the last time I got a confusing error message because numbers are sequences</text>
</message>
<message>
  <ts>2020-08-08T10:47:32.670000</ts>
  <user>Kiam</user>
  <text>traversal composition! üéâ</text>
</message>
<message>
  <ts>2020-08-08T11:29:19.378000</ts>
  <user>Kiam</user>
  <text>subtraversals!</text>
</message>
<message>
  <ts>2020-08-09T00:23:58.514000</ts>
  <user>Rynlee</user>
  <text>I have a general question is there some sort of resource to learn how to implement functional data structures?</text>
</message>
<message>
  <ts>2020-08-09T00:24:16.543000</ts>
  <user>Rynlee</user>
  <text>for instance I'm working on building a linked list but I can only manage to do it by mutating state</text>
</message>
<message>
  <ts>2020-08-09T00:24:40.915000</ts>
  <user>Rynlee</user>
  <text>```scheme(define (mycons val) (let ([newnode (Node val head)]) Updates the head node to the new node" (set! head newnode) newnode))```</text>
</message>
<message>
  <ts>2020-08-09T00:51:11.952000</ts>
  <user>Maddoc</user>
  <text>It physically pains me that Racket's OpenGL bindings are in camelCase. I think CommonLisp's (gl:whateversyntax) is so much nicer.</text>
</message>
<message>
  <ts>2020-08-09T00:51:49.573000</ts>
  <user>Rynlee</user>
  <text>most of the library is in shishkabob case isn't it?</text>
</message>
<message>
  <ts>2020-08-09T00:51:52.650000</ts>
  <user>Rynlee</user>
  <text>I mean the racket library</text>
</message>
<message>
  <ts>2020-08-09T00:51:58.621000</ts>
  <user>Maddoc</user>
  <text>Was looking into again after the 7.8 announcement; Namely Racket CS supports an ‚Äúincremental‚Äù garbagecollection mode that can eliminate long GC pauses for some applications such as animations and interactive games.</text>
</message>
<message>
  <ts>2020-08-09T00:53:27.800000</ts>
  <user>Maddoc</user>
  <text>@Markus Unless I'm looking at the wrong lib; Not that I can tell? https://docs.racketlang.org/opengl/index.html</text>
</message>
<message>
  <ts>2020-08-09T00:54:14.362000</ts>
  <user>Rynlee</user>
  <text>oh that's shocking</text>
</message>
<message>
  <ts>2020-08-09T00:54:18.187000</ts>
  <user>Rynlee</user>
  <text>I wonder why they did it like that</text>
</message>
<message>
  <ts>2020-08-09T00:55:49.497000</ts>
  <user>Rynlee</user>
  <text>it says it was autogenerated that might have something to do with it</text>
</message>
<message>
  <ts>2020-08-09T01:00:46.125000</ts>
  <user>Maddoc</user>
  <text>Hm okay yeah that probably has a LOT to do with it then . Hopefully it's just noone has just bothered to make it more idiomatic rather than an explicit designchoice. lolI wonder what the most highprofile projects even using it are? I remember Pict3D was a thing  assume that must of been. Maybe some of the old pltgames stuff?</text>
</message>
<message>
  <ts>2020-08-09T01:02:40.957000</ts>
  <user>Maddoc</user>
  <text>_is still trying to dig around for more information on that incremental garbagecollection mode that 7.8 announcement mention. I'd love to try and use Racket to learn graphicsprogramming._</text>
</message>
<message>
  <ts>2020-08-09T01:05:39.276000</ts>
  <user>Rynlee</user>
  <text>I'm trying to use it to learn data structures and algorithms better</text>
</message>
<message>
  <ts>2020-08-09T01:09:18.130000</ts>
  <user>Maddoc</user>
  <text>^ Dog knows I need to ingeneral.</text>
</message>
<message>
  <ts>2020-08-09T01:10:10.351000</ts>
  <user>Rynlee</user>
  <text>anyone here work through SICP before?</text>
</message>
<message>
  <ts>2020-08-09T01:18:49.453000</ts>
  <user>Kiam</user>
  <text>@Markus Purely Functional Data Structures is a very good book on functional data structures</text>
</message>
<message>
  <ts>2020-08-09T02:24:35.624000</ts>
  <user>Cortlin</user>
  <text>Header translations almost always use the syntactic conventions of the original language. Ideally those identifiers shouldn't appear in a common program or library but should be interfaced through a highlevel wrapper. @JOST GRANT @Markus</text>
</message>
<message>
  <ts>2020-08-09T02:40:22.092000</ts>
  <user>Maddoc</user>
  <text>About to go to bed; But I mean that's fair  but there's no highlevel wrappers yet I asusme?</text>
</message>
<message>
  <ts>2020-08-09T02:53:56.764000</ts>
  <user>Britten</user>
  <text>There are several OpenGL libs. IIRC the most complete (and maybe most Rackety I can't remember) is the undocumented one packaged with pict3d.</text>
</message>
<message>
  <ts>2020-08-09T02:54:28.022000</ts>
  <user>Britten</user>
  <text>There was also a recent mailing list thread that I didn't read about OpenGL.</text>
</message>
<message>
  <ts>2020-08-09T02:55:29.295000</ts>
  <user>Britten</user>
  <text>https://groups.google.com/forum/#!topic/racketusers/Km4Eg9Aeww</text>
</message>
<message>
  <ts>2020-08-09T02:57:27.500000</ts>
  <user>Britten</user>
  <text>There is also a mechanized Vulkan binding but it doesn't do graphics last I checked and I had to do a bit of hackery to get it to run a simple diagnostic on my system</text>
</message>
<message>
  <ts>2020-08-09T07:26:48.052000</ts>
  <user>Maddoc</user>
  <text>_should still be sleeping ... woke up from the CRAZY thunder/lightning outside. lolPretty interesting; ; Had no idea that pict3D had their own implementation  but it makes sense within the scope of the project and the amount I assume one would have to call OpenGL ... to quickly start to notice how unidiomatic glDoWhatever is &amp; start to roll your own kebabs. But yeah I'll ceratinly dig around a bit more. Was planning to look into Fluxus a bit but have no idea of the implementation details (like howmuch it is directly calling GL compared to the engine they are mapping to) nor if it's really relevant to contemporary Racket ingeneral. :^P_</text>
</message>
<message>
  <ts>2020-08-09T18:41:41.646000</ts>
  <user>Rynlee</user>
  <text>Hey everyone I'm having some problems here with overriding a method for a class in racketgui</text>
</message>
<message>
  <ts>2020-08-09T18:42:27.155000</ts>
  <user>Rynlee</user>
  <text>```scheme(define mytext% (class text% (supernew) (define (afterinsert) (...)) (augment afterinsert)))``` I'm probably just not doing it right but this is giving me an error where it's saying I'm passing two args into afterinsert</text>
</message>
<message>
  <ts>2020-08-09T18:42:55.752000</ts>
  <user>Rynlee</user>
  <text>basically I just want to augment the method so I can do other stuff after text is inserted</text>
</message>
<message>
  <ts>2020-08-09T18:53:01.782000</ts>
  <user>Rynlee</user>
  <text>Nevermind there was arguments I wasn't handling üôÇ</text>
</message>
<message>
  <ts>2020-08-09T22:17:17.777000</ts>
  <user>Britten</user>
  <text>You may also like the combined `define` for classes. So you can do `(define/augment (method args ...) etc)`</text>
</message>
<message>
  <ts>2020-08-09T23:27:52.653000</ts>
  <user>Rynlee</user>
  <text>yeah I just learned that when I finally got it to work</text>
</message>
<message>
  <ts>2020-08-11T21:03:13.045000</ts>
  <user>Alyiah</user>
  <text>So I'm a TA for a programming languages and paradigms class at my uni and have convinced the prof to let me teach some Racket in addition to the Common Lisp that's in the course and replace some Prolog with Datalog</text>
</message>
<message>
  <ts>2020-08-11T21:34:30.689000</ts>
  <user>Chara</user>
  <text>Instead of CL would be an improvement. In addition to CL might be a nightmare.</text>
</message>
<message>
  <ts>2020-08-11T21:35:39.931000</ts>
  <user>Chara</user>
  <text>Have you thought about what you going to do in Racket?</text>
</message>
<message>
  <ts>2020-08-11T22:45:14.211000</ts>
  <user>Daevion</user>
  <text>Upvotes appreciated https://repl.it/languagerequests/p/racket</text>
</message>
<message>
  <ts>2020-08-12T00:14:08.330000</ts>
  <user>Alyiah</user>
  <text>@Moinate  mostly going to use Racket as a stepping stone into datalog to show the class what you can do with macros. I don't plan on teaching them how to actually use them much though. The class covers prolog already and datalog is the same thing. But I don't plan on using Racket for anything serious just showing 2 key things: lisp is more than just common lisp the parenthesis are important because you can rewrite code at compile time and it's dope and they should get excited about it It's also a programming languages and paradigms class so it would be neat to pique the students interest too by getting to mention language oriented programming which just as a name sounds neat.</text>
</message>
<message>
  <ts>2020-08-12T00:14:43.954000</ts>
  <user>Alyiah</user>
  <text>I don't intend on actually digging into Racket too much though so that I can keep it simple</text>
</message>
<message>
  <ts>2020-08-12T00:16:28.712000</ts>
  <user>Chara</user>
  <text>Nice. You don‚Äôt do macros in CL I take it?</text>
</message>
<message>
  <ts>2020-08-12T03:20:39.886000</ts>
  <user>Alyiah</user>
  <text>Nope macros aren't explored at all üòî Students aren't even made aware that there's a difference between a form like `cond` and a function like `format` honestly. Most students figure it out but they never learn that you can define forms like that yourself most just think they're built into the compiler and that's it</text>
</message>
<message>
  <ts>2020-08-13T01:23:11.376000</ts>
  <user>Somer</user>
  <text>@nixin72 how'd you convince them? give us the deets! :)</text>
</message>
<message>
  <ts>2020-08-13T01:55:29.364000</ts>
  <user>Alyiah</user>
  <text>@spacey üåå persistence and wearing him down üòÇ no but for real it was mostly because they teach common lisp and Prolog but most students hate them because no job is in Lisp or Prolog and they feel it's a waste of time. No macros are ever taught in the class so Lisp is basically just Python but with silly syntax as far as most of them are concerned. But since we're using Prolog and Datalog is the same thing I'm gonna use Datalog to work through Prolog a bit more while also using it to basic macros and how you can do language driven development in a language with macros.</text>
</message>
<message>
  <ts>2020-08-13T14:04:40.484000</ts>
  <user>Matt</user>
  <text>hi</text>
</message>
<message>
  <ts>2020-08-13T14:04:54.440000</ts>
  <user>Daevion</user>
  <text>Hi</text>
</message>
<message>
  <ts>2020-08-13T14:08:45.407000</ts>
  <user>Matt</user>
  <text>i think im gonna be coming back to racket</text>
</message>
<message>
  <ts>2020-08-13T14:10:30.887000</ts>
  <user>Daevion</user>
  <text>Nice to hear! What brings you back?</text>
</message>
<message>
  <ts>2020-08-13T14:19:37.560000</ts>
  <user>Matt</user>
  <text>@StephenD pirated the software Mathematica and was frustrated for weeks having problems only to have someone copy my code verbatim and it worked fine for them. My pirated version was outdated enough for some things to be broken i guess.</text>
</message>
<message>
  <ts>2020-08-13T14:20:10.085000</ts>
  <user>Matt</user>
  <text>@StephenD do you think ill be able to use Gui sliders to affect a Plot in Racket?</text>
</message>
<message>
  <ts>2020-08-13T14:20:31.920000</ts>
  <user>Matt</user>
  <text>thats all i‚Äôd really need</text>
</message>
<message>
  <ts>2020-08-13T14:22:15.322000</ts>
  <user>Matt</user>
  <text>looking through the Plot docs i don‚Äôt think i‚Äôll have any problems</text>
</message>
<message>
  <ts>2020-08-13T14:23:04.279000</ts>
  <user>Daevion</user>
  <text>I‚Äôll admit I‚Äôm not sure  I think it is possible  the package maintainer Alex Hars√°nyi is on slack (but is Australian so is probably asleep rn)Signup first: https://racketslack.herokuapp.com/https://racket.slack.com/ He is also on the mailing list if that works better for you https://groups.google.com/forum/#!forum/racketusers/</text>
</message>
<message>
  <ts>2020-08-13T14:23:34.124000</ts>
  <user>Matt</user>
  <text>thank you</text>
</message>
<message>
  <ts>2020-08-13T16:00:37.204000</ts>
  <user>Cortlin</user>
  <text>I know you can do it with `racket/draw` but I haven't used the plot package.</text>
</message>
<message>
  <ts>2020-08-13T16:07:53.941000</ts>
  <user>Matt</user>
  <text>someone on slack said they did in the past without issue</text>
</message>
<message>
  <ts>2020-08-13T16:08:25.226000</ts>
  <user>Matt</user>
  <text>the docs for Plot has sections on gui integration</text>
</message>
<message>
  <ts>2020-08-13T16:08:32.855000</ts>
  <user>Matt</user>
  <text>i should be fine</text>
</message>
<message>
  <ts>2020-08-13T18:37:06.028000</ts>
  <user>Daevion</user>
  <text>üëç</text>
</message>
<message>
  <ts>2020-08-14T06:59:26.585000</ts>
  <user>Mayzee</user>
  <text>how do i convert the char `#\\2` to the number 2?</text>
</message>
<message>
  <ts>2020-08-14T07:00:08.589000</ts>
  <user>Mayzee</user>
  <text>`(char&gt;integer #\\2)` gives me 50</text>
</message>
<message>
  <ts>2020-08-14T07:04:16.032000</ts>
  <user>Britten</user>
  <text>`char&gt;integer` returns the codepoints for the characters. The easiest way to take a digit character and get it's numeric value is to subtract the `0` character value</text>
</message>
<message>
  <ts>2020-08-14T07:04:55.331000</ts>
  <user>Britten</user>
  <text>`( (char&gt;integer #\\2) (char&gt;integer #\\0)) ==&gt; 2`</text>
</message>
<message>
  <ts>2020-08-14T07:16:23.701000</ts>
  <user>Mayzee</user>
  <text>ahh thanks</text>
</message>
<message>
  <ts>2020-08-15T02:34:01.023000</ts>
  <user>Mayzee</user>
  <text>2htdpimage scene preservers transparency right?</text>
</message>
<message>
  <ts>2020-08-15T03:03:01.995000</ts>
  <user>Mayzee</user>
  <text>is there a version of (emptyscene) in 2htdp image that doesn't create a black outline? i cant seem to find the parameters to disable it</text>
</message>
<message>
  <ts>2020-08-16T00:20:46.222000</ts>
  <user>Brayan</user>
  <text>according to the docs both versions have black outlines</text>
</message>
<message>
  <ts>2020-08-16T02:24:36.280000</ts>
  <user>Mayzee</user>
  <text>yeah no way to turn it off found some work arounds</text>
</message>
<message>
  <ts>2020-08-16T02:25:14.216000</ts>
  <user>Mayzee</user>
  <text>do most of you guys use drracket? i find it painfully slow to scroll and work in...</text>
</message>
<message>
  <ts>2020-08-16T03:12:43.863000</ts>
  <user>Brayan</user>
  <text>I do currently use DrRacket  there are customizable keyboard shortcuts that can be used for navigation and such but afaik there's no scroll speed setting</text>
</message>
<message>
  <ts>2020-08-16T03:22:03.216000</ts>
  <user>Yaw</user>
  <text>oh hey i never noticed that scroll wheel thing before. i guess i don't use the scroll wheel</text>
</message>
<message>
  <ts>2020-08-16T05:20:24.786000</ts>
  <user>Alyiah</user>
  <text>Has anyone used the Koyo webserver? I'm looking at it now and it seems very complete but I wanted to know if anyone's actually used this thing</text>
</message>
<message>
  <ts>2020-08-16T05:25:57.865000</ts>
  <user>Alyiah</user>
  <text>I tried starting a server with it using the example application and it throws exceptions right off the bat... That's no good</text>
</message>
<message>
  <ts>2020-08-16T05:28:18.491000</ts>
  <user>Alyiah</user>
  <text>Oh wait there's a bunch of setup stuff I have to do before starting the server  didn't read enough lol</text>
</message>
<message>
  <ts>2020-08-16T06:25:26.398000</ts>
  <user>Mayzee</user>
  <text>do the lot of you guys use typed racket? or just vanilla racket?</text>
</message>
<message>
  <ts>2020-08-16T07:38:45.649000</ts>
  <user>Kiam</user>
  <text>I use vanilla but I really miss types</text>
</message>
<message>
  <ts>2020-08-16T15:17:38.070000</ts>
  <user>Mayzee</user>
  <text>does typed racket add to much friction when you're trying to get something done?</text>
</message>
<message>
  <ts>2020-08-16T16:25:31.801000</ts>
  <user>Alyiah</user>
  <text>I tried typed racket a bit but wasn't a fan honestly. I found it more annoying than helpful. But that's generally how I feel about type systems anyways lol. Except Rust for some reason Rust feels much nicer to use than most other statically typed langs.</text>
</message>
<message>
  <ts>2020-08-16T17:28:17.629000</ts>
  <user>Britten</user>
  <text>I use Typed Racket occasionally. I usually use it as an evolution converting an untyped program to a typed program.</text>
</message>
<message>
  <ts>2020-08-16T20:00:55.411000</ts>
  <user>Alyiah</user>
  <text>God koyo has so much setup to do... You need to have multiple Postgres databases running need to have it running behind an nginx server even for local development need to have node and nvm way more than most web frameworks require for setting a basic application...</text>
</message>
<message>
  <ts>2020-08-16T20:15:11.722000</ts>
  <user>Daevion</user>
  <text>The developer comes from a professional web app dev background an uses it in production  I‚Äôm assuming it is best practice ?</text>
</message>
<message>
  <ts>2020-08-16T20:17:49.785000</ts>
  <user>Kiam</user>
  <text>dockerizing the setup or making parts of it use inmemory fakes for local dev might be good improvements</text>
</message>
<message>
  <ts>2020-08-17T03:27:06.813000</ts>
  <user>Alyiah</user>
  <text>Definitely not a best practices thing my background is in full stack web development and I\'ve never seen a framework that requires that much setup for its basic pregenerated application. Not even .NET does that and it\'s got the biggest pregenerated app I\'ve ever seen. Closest is maybe Laravel. For sure dockerizing it would make it much nicer maybe I\'ll set that up. Give me a good reason to actually learn docker...</text>
</message>
<message>
  <ts>2020-08-17T04:59:44.765000</ts>
  <user>Svetlozar</user>
  <text>Hey guys I am taking an online cs course and got this problem</text>
</message>
<message>
  <ts>2020-08-17T05:00:05.991000</ts>
  <user>Svetlozar</user>
  <text>```; Exercise 4  Define location(define (location small big) (cond ((empty? big) #f) ((equal? small (first big)) 1) (else (+ 1 (location small (bf big))))))```</text>
</message>
<message>
  <ts>2020-08-17T05:00:23.763000</ts>
  <user>Svetlozar</user>
  <text>```Write a procedure called location that takes two arguments a word and a sentence. It should return a number indicating where in the sentence that word can be found. If the word isn't in the sentence return #f. If the word appears more than once return the location of the first appearance.&gt; (location me (you never give me your money))4&gt; (location i (you never give me your money))#f&gt; (location the (the fork and the spoon))1```</text>
</message>
<message>
  <ts>2020-08-17T05:00:35.272000</ts>
  <user>Svetlozar</user>
  <text>the issue I am facing is that the false case</text>
</message>
<message>
  <ts>2020-08-17T05:00:44.515000</ts>
  <user>Svetlozar</user>
  <text>does not work due to the recursion being</text>
</message>
<message>
  <ts>2020-08-17T05:01:08.263000</ts>
  <user>Svetlozar</user>
  <text>(+ 1 (+ 1 (+ 1 #f)))</text>
</message>
<message>
  <ts>2020-08-17T05:01:27.852000</ts>
  <user>Svetlozar</user>
  <text>how can break out of the recursion and return false?</text>
</message>
<message>
  <ts>2020-08-17T05:16:26.045000</ts>
  <user>Zayne</user>
  <text>How about checking whether the recursive call's result is `#f` or a number before adding 1 to it?</text>
</message>
<message>
  <ts>2020-08-17T08:15:08.445000</ts>
  <user>Svetlozar</user>
  <text>so what I do is check work by word</text>
</message>
<message>
  <ts>2020-08-17T08:15:33.081000</ts>
  <user>Svetlozar</user>
  <text>sorry I didn't get it</text>
</message>
<message>
  <ts>2020-08-17T09:11:51.378000</ts>
  <user>Kiam</user>
  <text>the part where you have `(+ 1 (location small (bf big)))`  the `(location small (bf big))` expression could be a number or false so you should only add 1 to it if it's not false</text>
</message>
<message>
  <ts>2020-08-17T09:16:59.040000</ts>
  <user>Daevion</user>
  <text>@nixin72 The developer of Koyo Bogdan is on the racket slack  ask him (he is a really nice guy I met him briefly in Berlin).</text>
</message>
<message>
  <ts>2020-08-17T16:16:42.797000</ts>
  <user>Chara</user>
  <text>@Prexxla In this case you should be writing simple tests make sure you have seen your code work when big is empty big is length 1 and has the word you are looking for big is length 1 and does not have the word you are looking for then start on some length 2 cases (find the word in position 1,2,3).</text>
</message>
<message>
  <ts>2020-08-17T16:17:30.563000</ts>
  <user>Chara</user>
  <text>Actually I am not a fan of this exercise. It doesn't use 0  could easily use that to indicate word not found.</text>
</message>
<message>
  <ts>2020-08-17T16:19:25.399000</ts>
  <user>Chara</user>
  <text>@Prexxla The point of the tests is so you think of (+ 1 #f) as the problem instead of thinking about a recursion that goes on and on... usually easier to figure out what to do.</text>
</message>
<message>
  <ts>2020-08-17T21:03:41.812000</ts>
  <user>Kiam</user>
  <text>I don't think using 0 to indicate not found is a good idea</text>
</message>
<message>
  <ts>2020-08-17T22:34:05.380000</ts>
  <user>Chara</user>
  <text>I hope this isn't one of the earlier recursion exercises.</text>
</message>
<message>
  <ts>2020-08-17T22:37:37.149000</ts>
  <user>Chara</user>
  <text>I can understand not wanting to overload a chapter with types of problems I guess it's fair to ask people to discover it on their own. https://people.eecs.berkeley.edu/~bh/ssch14/recurpatterns.html</text>
</message>
<message>
  <ts>2020-08-18T04:51:26.056000</ts>
  <user>Mayzee</user>
  <text>@Prexxla what cs course are you taking that uses racket?</text>
</message>
<message>
  <ts>2020-08-18T05:08:05.196000</ts>
  <user>Mayzee</user>
  <text>trying to make a racket cli stand alone exe</text>
</message>
<message>
  <ts>2020-08-18T05:08:12.529000</ts>
  <user>Mayzee</user>
  <text>how do i run it in the drracket?</text>
</message>
<message>
  <ts>2020-08-18T05:08:33.843000</ts>
  <user>Mayzee</user>
  <text>how do i pass command line arguments while in drracket?</text>
</message>
<message>
  <ts>2020-08-18T05:23:15.047000</ts>
  <user>Mayzee</user>
  <text>atm just recompiling the exe everytime</text>
</message>
<message>
  <ts>2020-08-18T05:36:22.038000</ts>
  <user>Mayzee</user>
  <text>holy moly my stand alone executable with embeddlls is 34MB. how can I cut this down? I'm pulling in 2htdp/image as a dependency so I assume that is the main reason. either way how do i cut this down? I don't want other people needing to install racket to use this small cli app (edited). I don't even need the rendering parts of 2htdp/image just the cropping image and writing to a file</text>
</message>
<message>
  <ts>2020-08-18T07:55:23.137000</ts>
  <user>Kiam</user>
  <text>there's a drracket setting somewhere for command line args</text>
</message>
<message>
  <ts>2020-08-18T07:56:39.463000</ts>
  <user>Kiam</user>
  <text>I think</text>
</message>
<message>
  <ts>2020-08-18T07:58:17.367000</ts>
  <user>Kiam</user>
  <text>ah yes it's in Language &gt; Choose Language... &gt; Show Details</text>
</message>
<message>
  <ts>2020-08-18T14:43:12.472000</ts>
  <user>Mayzee</user>
  <text>thanks</text>
</message>
<message>
  <ts>2020-08-18T16:47:54.961000</ts>
  <user>Mayzee</user>
  <text>strangely it doesnt save... Commandline arguments as a vector of strings in read syntax:```#("test")```</text>
</message>
<message>
  <ts>2020-08-19T03:44:54.629000</ts>
  <user>Svetlozar</user>
  <text>@jest cs61a berkely</text>
</message>
<message>
  <ts>2020-08-19T03:44:55.536000</ts>
  <user>Svetlozar</user>
  <text>https://berkeleycs61as.github.io/textbook.html</text>
</message>
<message>
  <ts>2020-08-19T15:59:53.158000</ts>
  <user>Daevion</user>
  <text>Thanks @Prexxla I've put the https://berkeleycs61as.github.io/textbook.html link in #resources</text>
</message>
<message>
  <ts>2020-08-19T22:04:37.637000</ts>
  <user>Daevion</user>
  <text>I‚Äôve started a small collection!https://github.com/rackettemplatesThese are GitHub templates so you use them by clicking ‚Äòuse this template‚Äò on the repoI‚Äôm looking for more ideas/contributions;From the top of my head; ‚Äòworker service‚Äô (dotnet new has this) DrRacket plugin Keybinding package Teachpack raco command scribble (multiple) pollen (multiple) slideshow racket embedded in c appCan you suggest(or submit) any others?&lt;&lt;Some are obvious and simple if you are already a racketeer but one of the reasons is to give new users another way ins&gt;&gt;</text>
</message>
<message>
  <ts>2020-08-20T02:51:38.792000</ts>
  <user>Qiana</user>
  <text>Oh rackettemplates is a good idea! One thing I think would be useful is examples of the various different ways you can structure repositories collections and packages. Especially if it could help clarify this is how it will appear on pkgs.racketlang.org and this is how raco pkg install will behave. (I still don\'t think I totally understand all the nuances.) I\'ve gotten really busy lately but maybe I will take this on in a few weeks.</text>
</message>
<message>
  <ts>2020-08-20T03:46:10.496000</ts>
  <user>Yaw</user>
  <text>i don't know if it's a good idea for a template but one thing you can do in racket is write code using the ffi if it makes sense that could be another one for the list</text>
</message>
<message>
  <ts>2020-08-20T03:50:54.819000</ts>
  <user>Kiam</user>
  <text>I have a template I use for making packages</text>
</message>
<message>
  <ts>2020-08-20T03:51:22.850000</ts>
  <user>Kiam</user>
  <text>https://github.com/jackfirth/racketpackagetemplate</text>
</message>
<message>
  <ts>2020-08-20T05:42:14.807000</ts>
  <user>Alyiah</user>
  <text>@StephenD I made a little raco tool to copy your templates locally for people to try them out. It's literally just a tiny wrapper aroung git that's attached to raco but it's in the spirit of having something like `createreactapp` but for all sorts of Racket templates once you've got more stuff in that org https://github.com/nixin72/fromtemplateSome ideas of other templates that could be included: simple webapp new #lang new language (parsack nanopass)?  database access to set up as template to go in existing projects?  package template (what @notjack shared)</text>
</message>
<message>
  <ts>2020-08-20T09:40:21.704000</ts>
  <user>Daevion</user>
  <text>@nixin72 this is awesome!It serves two purposes1. It‚Äôs a raco tool for installing templates  exactly what is needed2. It is a template for a raco tool!Can I encourage you to add to the Racket packages repository ?Thank you so much</text>
</message>
<message>
  <ts>2020-08-20T10:12:45.108000</ts>
  <user>Daevion</user>
  <text>@notjack looks good  I‚Äôve added it!</text>
</message>
<message>
  <ts>2020-08-20T10:14:47.177000</ts>
  <user>Daevion</user>
  <text>@nixin72 @notjack I‚Äôve added you you both to the organisation</text>
</message>
<message>
  <ts>2020-08-20T15:59:53.706000</ts>
  <user>Alyiah</user>
  <text>@StephenD hahah that's so true I hadn't even intended for it to be a template itself!</text>
</message>
<message>
  <ts>2020-08-20T17:16:24.747000</ts>
  <user>Daevion</user>
  <text>@nixin72  simple webapp  DONE  racketstories new #lang  added to todo list new language (parsack nanopass)?  added to todo list database access to set up as template to go in existing projects?  added to todo list package template (what @notjack shared)  DONE</text>
</message>
<message>
  <ts>2020-08-20T17:18:35.887000</ts>
  <user>Alyiah</user>
  <text>@StephenD and I've uploaded the `fromtemplate` package to the package repository. https://pkgd.racketlang.org/pkgn/package/fromtemplate</text>
</message>
<message>
  <ts>2020-08-20T17:23:07.815000</ts>
  <user>Daevion</user>
  <text>@nixin72 remember to update the readme.md to link back to https://pkgs.racketlang.org/package/fromtemplate</text>
</message>
<message>
  <ts>2020-08-22T21:22:22.947000</ts>
  <user>Kiam</user>
  <text>been working on making `rebellion/type` provide static info to macros and now I can define basic type conversion macros!</text>
</message>
<message>
  <ts>2020-08-22T23:46:56.059000</ts>
  <user>Cortlin</user>
  <text>Nice</text>
</message>
<message>
  <ts>2020-08-23T08:43:39.797000</ts>
  <user>Yaw</user>
  <text>@StephenD for a mascot why not a lamb? for lambda (:</text>
</message>
<message>
  <ts>2020-08-23T13:59:30.037000</ts>
  <user>Cortlin</user>
  <text>Wow that's a good idea.</text>
</message>
<message>
  <ts>2020-08-23T15:43:19.105000</ts>
  <user>Bexon</user>
  <text>hello I‚Äôm back :)</text>
</message>
<message>
  <ts>2020-08-23T17:14:12.200000</ts>
  <user>Daevion</user>
  <text>&gt; @StephenD for a mascot why not a lamb? for lambda (:@Plane that is the cutest suggestion so far!</text>
</message>
<message>
  <ts>2020-08-23T18:06:45.763000</ts>
  <user>Bexon</user>
  <text>I‚Äôd say it‚Äôs a tie with a raccoon</text>
</message>
<message>
  <ts>2020-08-23T18:27:14.425000</ts>
  <user>Daevion</user>
  <text>ü•∫</text>
</message>
<message>
  <ts>2020-08-23T18:27:41.388000</ts>
  <user>Daevion</user>
  <text>Very cute raccoon!</text>
</message>
<message>
  <ts>2020-08-23T18:29:18.117000</ts>
  <user>Daevion</user>
  <text>Can anyone draw better? (Paper or pict or metapict or 2htdp/image)</text>
</message>
<message>
  <ts>2020-08-23T18:29:52.218000</ts>
  <user>Daevion</user>
  <text>Can anyone draw a Lamb(da)?</text>
</message>
<message>
  <ts>2020-08-23T18:40:52.102000</ts>
  <user>Matt</user>
  <text>Racket Raccon Lambda</text>
</message>
<message>
  <ts>2020-08-23T18:47:19.415000</ts>
  <user>Britten</user>
  <text>Lamb(da)</text>
</message>
<message>
  <ts>2020-08-23T18:47:53.272000</ts>
  <user>Jovanna</user>
  <text>ok this is my fav so far</text>
</message>
<message>
  <ts>2020-08-23T19:49:39.400000</ts>
  <user>Bexon</user>
  <text>for gerbil they put it in animal‚Äôs eyes</text>
</message>
<message>
  <ts>2020-08-23T19:50:14.276000</ts>
  <user>Bexon</user>
  <text>None</text>
</message>
<message>
  <ts>2020-08-23T19:50:35.649000</ts>
  <user>Daevion</user>
  <text>That looks creepy.</text>
</message>
<message>
  <ts>2020-08-23T19:50:40.415000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-08-23T19:52:01.067000</ts>
  <user>Daevion</user>
  <text>Like goat eyes</text>
</message>
<message>
  <ts>2020-08-23T19:53:26.348000</ts>
  <user>Bexon</user>
  <text>sheep have these eyes too</text>
</message>
<message>
  <ts>2020-08-23T19:55:55.789000</ts>
  <user>Bexon</user>
  <text>I‚Äôd be a hardcore lobbyist for raccoon but Raku programmers use ‚Äúraccoon‚Äù to describe themselves already üòî</text>
</message>
<message>
  <ts>2020-08-23T21:13:30.633000</ts>
  <user>Daevion</user>
  <text>https://en.wikipedia.org/wiki/Raku_(programming_language)#/media/File:Camelia.svg</text>
</message>
<message>
  <ts>2020-08-23T21:14:08.146000</ts>
  <user>Daevion</user>
  <text>Racket programmers are Racketeers</text>
</message>
<message>
  <ts>2020-08-23T21:14:37.960000</ts>
  <user>Daevion</user>
  <text>Sheep and goat eyes &lt;&lt;shudder&gt;&gt;</text>
</message>
<message>
  <ts>2020-08-23T21:20:03.356000</ts>
  <user>Daevion</user>
  <text>Raku(aka perl 6) Spokes bug': Butterfly called Camelia: call themselves raccoons.</text>
</message>
<message>
  <ts>2020-08-23T21:21:15.841000</ts>
  <user>Daevion</user>
  <text>also raccoons are known as washbears!</text>
</message>
<message>
  <ts>2020-08-23T21:23:08.304000</ts>
  <user>Daevion</user>
  <text>lambs are cute though</text>
</message>
<message>
  <ts>2020-08-23T23:21:25.410000</ts>
  <user>Cortlin</user>
  <text>Raccoon is also the Minix mascot.</text>
</message>
<message>
  <ts>2020-08-23T23:22:11.551000</ts>
  <user>Daevion</user>
  <text>Yeah but no one uses it</text>
</message>
<message>
  <ts>2020-08-23T23:22:22.177000</ts>
  <user>Daevion</user>
  <text>Apart from Intel</text>
</message>
<message>
  <ts>2020-08-23T23:23:13.341000</ts>
  <user>Daevion</user>
  <text>And intel don‚Äôt seem like they are big on mascots</text>
</message>
<message>
  <ts>2020-08-23T23:32:51.044000</ts>
  <user>Cortlin</user>
  <text>Hahah</text>
</message>
<message>
  <ts>2020-08-24T07:52:52.348000</ts>
  <user>Bexon</user>
  <text>@StephenD yeah their mascot is a butterfly but I heard about this racoon thingy on their IRC ü§î searched their subreddit no results  so maybe it's free after all üëÄ</text>
</message>
<message>
  <ts>2020-08-24T07:53:38.020000</ts>
  <user>Bexon</user>
  <text>oh okay it's spelled differently</text>
</message>
<message>
  <ts>2020-08-24T07:53:39.266000</ts>
  <user>Bexon</user>
  <text>https://rakudoweekly.blog/2020/06/08/202023500rakoons/</text>
</message>
<message>
  <ts>2020-08-24T08:56:29.200000</ts>
  <user>Daevion</user>
  <text>We could share.</text>
</message>
<message>
  <ts>2020-08-24T08:56:39.616000</ts>
  <user>Daevion</user>
  <text>And spell it correctly</text>
</message>
<message>
  <ts>2020-08-24T08:56:57.389000</ts>
  <user>Daevion</user>
  <text>None of this is serious</text>
</message>
<message>
  <ts>2020-08-24T08:57:06.967000</ts>
  <user>Daevion</user>
  <text>It‚Äôs all just fun</text>
</message>
<message>
  <ts>2020-08-24T09:51:12.903000</ts>
  <user>Bexon</user>
  <text>true :)</text>
</message>
<message>
  <ts>2020-08-26T08:41:07.408000</ts>
  <user>Kristalynn</user>
  <text>what do you mean it's not serious</text>
</message>
<message>
  <ts>2020-08-26T10:43:52.769000</ts>
  <user>Daevion</user>
  <text>An unofficial mascot is not a serious question  it was just a bit of weekend fun.</text>
</message>
<message>
  <ts>2020-08-26T18:55:43.322000</ts>
  <user>Cortlin</user>
  <text>I'm devastated that `racket/gui` doesn't expose all available X.org cursors: https://tronche.com/gui/x/xlib/appendix/b/</text>
</message>
<message>
  <ts>2020-08-26T18:58:45.415000</ts>
  <user>Daevion</user>
  <text>Wow</text>
</message>
<message>
  <ts>2020-08-26T18:58:53.130000</ts>
  <user>Daevion</user>
  <text>That‚Äôs a lot of cursors</text>
</message>
<message>
  <ts>2020-08-26T19:00:42.819000</ts>
  <user>Daevion</user>
  <text>I want to know what the XC_umbrella cursor is for? Ditto for boat sailboat &amp; spraycan?</text>
</message>
<message>
  <ts>2020-08-26T19:24:53.273000</ts>
  <user>Cortlin</user>
  <text>I know xteddy uses the heart one.</text>
</message>
<message>
  <ts>2020-08-26T19:25:23.774000</ts>
  <user>Daevion</user>
  <text>Now I have to look up xteddy</text>
</message>
<message>
  <ts>2020-08-27T00:45:36.714000</ts>
  <user>Cortlin</user>
  <text>https://weber.itn.liu.se/~stegu/xteddy/</text>
</message>
<message>
  <ts>2020-08-27T00:45:44.393000</ts>
  <user>Cortlin</user>
  <text>I use it all the time.</text>
</message>
<message>
  <ts>2020-08-27T00:45:48.872000</ts>
  <user>Cortlin</user>
  <text>It keeps me company.</text>
</message>
<message>
  <ts>2020-08-28T00:01:31.314000</ts>
  <user>Hina</user>
  <text>Good evening. If I'd like to disable TLS 1.0 TLS 1.1 and SSL 3.0 in the Racket Web Server is that possible? (Crossposting to slack.racket.general.)</text>
</message>
<message>
  <ts>2020-08-28T00:28:14.755000</ts>
  <user>Jersi</user>
  <text>@Anything There's no option right now but you'd need to change line 74 of `webserver/webserver.rkt` and pass a different `#:protocol` option as documented in the docs for `sslmakeservercontext`. We could adjust everything back from there (like `serve/servlet` to take a custom server context) and then it would be easier to do stuff like this.</text>
</message>
<message>
  <ts>2020-08-28T00:35:59.814000</ts>
  <user>Hina</user>
  <text>Thanks @jeapostrophe. That gives me enough information to know what to do now. By the way in the [documentation](https://docs.racketlang.org/openssl/index.html#%28def._%28%28lib._openssl%2Fmain..rkt%29._ports~3esslports%29%29) although we can see `protocol` available it's missing in the procedure's signature.</text>
</message>
<message>
  <ts>2020-08-28T00:37:17.526000</ts>
  <user>Jersi</user>
  <text>It just has a different name `#:encrypt`. I don't know why üò¶</text>
</message>
<message>
  <ts>2020-08-28T00:37:33.701000</ts>
  <user>Jersi</user>
  <text>If you submit a PR to add the webserver btw I'll approve it</text>
</message>
<message>
  <ts>2020-08-28T00:38:37.449000</ts>
  <user>Hina</user>
  <text>Oh I missed encrypt too. üôÇ Alright. I\'ll do that. Should help me to learn a minimum about the Racket\'s source code. By PR I understand pull request".</text>
</message>
<message>
  <ts>2020-08-28T00:38:48.802000</ts>
  <user>Jersi</user>
  <text>Yup üôÇ</text>
</message>
<message>
  <ts>2020-08-28T10:04:27.119000</ts>
  <user>Daevion</user>
  <text>Welcome @jeapostrophe ! Lovely to have you here!</text>
</message>
<message>
  <ts>2020-08-28T11:03:49.248000</ts>
  <user>Jersi</user>
  <text>I've been here for a loooooong time but I never open it :/</text>
</message>
<message>
  <ts>2020-08-28T11:05:25.606000</ts>
  <user>Daevion</user>
  <text>Welcome anyway üòÜ</text>
</message>
<message>
  <ts>2020-08-31T18:04:00.897000</ts>
  <user>Daevion</user>
  <text>Is anyone able to help fix my bad svg? https://github.com/simpleicons/simpleicons/pull/3483It is to allow a racket logo badge on GitHub readme files with https://shields.io badges. (I can't do SVG right now  old laptop no disk space)</text>
</message>
<message>
  <ts>2020-08-31T20:31:41.940000</ts>
  <user>Lukka</user>
  <text>I am trying to port a scheme macro to racket macros for `definerecord`. I have the intended usage and both the scheme and racket versions posted here on the gist page: https://gist.github.com/kesava/3d4f1cdee2184b7a858eda5e275a6947 I see an error on line 33 of the racket version  `formatid: unbound identifier in: formatid`. How do I fix the error? What am I getting wrong?</text>
</message>
<message>
  <ts>2020-08-31T20:34:33.696000</ts>
  <user>Kiam</user>
  <text>(answered in #help)</text>
</message>
<message>
  <ts>2020-09-01T20:26:31.932000</ts>
  <user>Slavcho</user>
  <text>Hello.</text>
</message>
<message>
  <ts>2020-09-01T20:26:43.834000</ts>
  <user>Kiam</user>
  <text>welcome!</text>
</message>
<message>
  <ts>2020-09-01T20:26:51.643000</ts>
  <user>Yaw</user>
  <text>Welcome (:</text>
</message>
<message>
  <ts>2020-09-01T20:27:48.016000</ts>
  <user>Slavcho</user>
  <text>How many programming languages would you consider yourselves fluent/proficient in?</text>
</message>
<message>
  <ts>2020-09-01T20:28:49.502000</ts>
  <user>Kiam</user>
  <text>a dozen or two maybe? hard to say</text>
</message>
<message>
  <ts>2020-09-01T20:30:00.723000</ts>
  <user>Slavcho</user>
  <text>jeez</text>
</message>
<message>
  <ts>2020-09-01T20:30:40.735000</ts>
  <user>Slavcho</user>
  <text>I'm trying to settle on 3  5 and I can't decide. But I do know that less would be better.</text>
</message>
<message>
  <ts>2020-09-01T20:31:13.533000</ts>
  <user>Slavcho</user>
  <text>I'll be trying to evaluate Racket under that pretense.</text>
</message>
<message>
  <ts>2020-09-01T20:32:35.967000</ts>
  <user>Kiam</user>
  <text>I think after you learn a few it becomes much easier to learn new ones they have a lot of overlap</text>
</message>
<message>
  <ts>2020-09-01T20:33:56.750000</ts>
  <user>Slavcho</user>
  <text>True they do.</text>
</message>
<message>
  <ts>2020-09-01T20:34:43.163000</ts>
  <user>Slavcho</user>
  <text>I'm really looking for a language to handle my text processing and/or rapid prototyping that can scale up</text>
</message>
<message>
  <ts>2020-09-01T20:35:31.158000</ts>
  <user>Slavcho</user>
  <text>I already know JavaScript and Rust might be the next thing I have to learn because people stan it super hard</text>
</message>
<message>
  <ts>2020-09-01T20:35:57.363000</ts>
  <user>Kiam</user>
  <text>rust is pretty great</text>
</message>
<message>
  <ts>2020-09-01T20:36:06.852000</ts>
  <user>Slavcho</user>
  <text>That's what I hear</text>
</message>
<message>
  <ts>2020-09-01T20:36:13.908000</ts>
  <user>Slavcho</user>
  <text>But the syntax makes me sad</text>
</message>
<message>
  <ts>2020-09-01T20:36:43.996000</ts>
  <user>Slavcho</user>
  <text>The examples always make sense but the more complex you get the more my brain refuses to read it</text>
</message>
<message>
  <ts>2020-09-01T20:36:50.910000</ts>
  <user>Zayne</user>
  <text>I love the Kisaragi Gentarou avatar. Oh my gosh it animates too. XD</text>
</message>
<message>
  <ts>2020-09-01T20:36:58.586000</ts>
  <user>Slavcho</user>
  <text>:tksSell:</text>
</message>
<message>
  <ts>2020-09-01T20:38:06.518000</ts>
  <user>Zayne</user>
  <text>hmm I wonder if there's a good stepping stone on the way to Rust</text>
</message>
<message>
  <ts>2020-09-01T20:39:12.732000</ts>
  <user>Zayne</user>
  <text>I would think Rust would be one of the best to learn these days in terms of community and being pretty cuttingedge</text>
</message>
<message>
  <ts>2020-09-01T20:39:32.580000</ts>
  <user>Kiam</user>
  <text>rust has a lovely community</text>
</message>
<message>
  <ts>2020-09-01T20:52:10.434000</ts>
  <user>Slavcho</user>
  <text>So Racket. What do y'all use it for?</text>
</message>
<message>
  <ts>2020-09-01T20:53:53.883000</ts>
  <user>Kiam</user>
  <text>I mostly use it for fun</text>
</message>
<message>
  <ts>2020-09-01T20:53:59.958000</ts>
  <user>Kiam</user>
  <text>since for work I write java</text>
</message>
<message>
  <ts>2020-09-01T20:54:22.754000</ts>
  <user>Slavcho</user>
  <text>Ah.</text>
</message>
<message>
  <ts>2020-09-01T20:55:13.311000</ts>
  <user>Daevion</user>
  <text>It‚Äôs a free education for me üòÄ</text>
</message>
<message>
  <ts>2020-09-01T20:56:23.874000</ts>
  <user>Kiam</user>
  <text>I used it for some neat AI stuff earlier this year</text>
</message>
<message>
  <ts>2020-09-01T20:56:35.433000</ts>
  <user>Kiam</user>
  <text>http://docs.racketlang.org/planning</text>
</message>
<message>
  <ts>2020-09-01T21:02:12.826000</ts>
  <user>Slavcho</user>
  <text>Oh neat.</text>
</message>
<message>
  <ts>2020-09-01T21:05:30.664000</ts>
  <user>Slavcho</user>
  <text>See this is the weird part about Lisps and Scheme. Everyone has these crazy cool projects and applications implemented in their flavor of choice but I can't seem to find a definitive example of a throwaway script or something that parses a CSV to make a report.</text>
</message>
<message>
  <ts>2020-09-01T21:06:14.375000</ts>
  <user>Kiam</user>
  <text>ah yes the Lisp Curse</text>
</message>
<message>
  <ts>2020-09-01T21:09:25.977000</ts>
  <user>Britten</user>
  <text>I use it for that boring stuff. Like process a bunch of data over some HTTP API. SSH to a bunch of hosts and do a thing.</text>
</message>
<message>
  <ts>2020-09-01T21:11:05.806000</ts>
  <user>Slavcho</user>
  <text>Oh cool. Any nuances or caveats? Why Racket over X?</text>
</message>
<message>
  <ts>2020-09-01T21:12:08.618000</ts>
  <user>Kiam</user>
  <text>(and as a result @oaktownsam has been an excellent use case tester for me üòõ)</text>
</message>
<message>
  <ts>2020-09-01T21:12:25.719000</ts>
  <user>Britten</user>
  <text>Lately I've chosen Racket over Python because the thread and event abstraction is much better.</text>
</message>
<message>
  <ts>2020-09-01T21:13:30.388000</ts>
  <user>Slavcho</user>
  <text>Nice.</text>
</message>
<message>
  <ts>2020-09-01T21:14:10.319000</ts>
  <user>Britten</user>
  <text>Although python has newer async stuff which I guess is supposed to be like Rust and JS but it seems very clunky.</text>
</message>
<message>
  <ts>2020-09-01T21:17:40.845000</ts>
  <user>Kiam</user>
  <text>this would explain your interest in that fiberweb project idea I had</text>
</message>
<message>
  <ts>2020-09-01T21:20:39.165000</ts>
  <user>Britten</user>
  <text>I think Reppy came up with a good way of dealing with concurrency and I wish everyone would just implement it üôÇ</text>
</message>
<message>
  <ts>2020-09-01T21:24:36.994000</ts>
  <user>Slavcho</user>
  <text>How's the FFI for Racket?</text>
</message>
<message>
  <ts>2020-09-01T21:25:03.640000</ts>
  <user>Daevion</user>
  <text>Reppy?</text>
</message>
<message>
  <ts>2020-09-01T21:25:20.107000</ts>
  <user>Kiam</user>
  <text>I also don't know what reppy is and would like to</text>
</message>
<message>
  <ts>2020-09-01T21:29:34.465000</ts>
  <user>Britten</user>
  <text>John Reppy</text>
</message>
<message>
  <ts>2020-09-01T21:30:02.749000</ts>
  <user>Britten</user>
  <text>https://people.cs.uchicago.edu/~jhr/</text>
</message>
<message>
  <ts>2020-09-01T21:30:21.210000</ts>
  <user>Britten</user>
  <text>FFI for Racket is good.</text>
</message>
<message>
  <ts>2020-09-01T21:38:25.605000</ts>
  <user>Kiam</user>
  <text>he worked on manticore _and_ CML??</text>
</message>
<message>
  <ts>2020-09-01T21:42:57.320000</ts>
  <user>Slavcho</user>
  <text>oh hey UChicago</text>
</message>
<message>
  <ts>2020-09-01T23:35:22.560000</ts>
  <user>Slavcho</user>
  <text>Have y'all played around with TXR?</text>
</message>
<message>
  <ts>2020-09-02T00:08:01.314000</ts>
  <user>Zayne</user>
  <text>first time I've heard of it!</text>
</message>
<message>
  <ts>2020-09-02T00:08:16.849000</ts>
  <user>Slavcho</user>
  <text>There are a lot of interesting concepts in there</text>
</message>
<message>
  <ts>2020-09-02T08:08:10.320000</ts>
  <user>Bexon</user>
  <text>@oaktownsam ocaml got multicore now I wonder how similar it is to CML now üëÄ</text>
</message>
<message>
  <ts>2020-09-02T15:53:02.412000</ts>
  <user>Britten</user>
  <text>Apparently Ocaml has had CML for year no one uses it though? https://discuss.ocaml.org/t/concurrencyinocamlitseemslikethecmlstylenevertookoffforanybody/3819</text>
</message>
<message>
  <ts>2020-09-02T16:16:32.601000</ts>
  <user>Yaw</user>
  <text>I do just honestly find programming in Racket to be pretty fun so I end up doing lots of little things for myself in it</text>
</message>
<message>
  <ts>2020-09-02T16:17:08.706000</ts>
  <user>Yaw</user>
  <text>Lately part of the fun for me has been writing things in either Racket or Haskell and then translating to the other</text>
</message>
<message>
  <ts>2020-09-03T23:39:11.125000</ts>
  <user>Britten</user>
  <text>ü¶úüòº ü¶úüòº ü¶úüòº ü¶úüòº ü¶úüòº ü¶ú  üéâ https://con.racketlang.org/ üéâü¶úüòº ü¶úüòº ü¶úüòº ü¶úüòº ü¶úüòº ü¶ú</text>
</message>
<message>
  <ts>2020-09-03T23:43:48.870000</ts>
  <user>Kiam</user>
  <text>oh wow I totally forgot to attempt to submit a talk for this year!</text>
</message>
<message>
  <ts>2020-09-03T23:47:07.520000</ts>
  <user>Matt</user>
  <text>ooh exciting. hope i dont forget to join</text>
</message>
<message>
  <ts>2020-09-05T08:24:08.275000</ts>
  <user>Svetlozar</user>
  <text>Hey guys is there a darkmode option for drRacket?</text>
</message>
<message>
  <ts>2020-09-05T08:47:46.066000</ts>
  <user>Cortlin</user>
  <text>Yeah there are colour scheme options in settings.</text>
</message>
<message>
  <ts>2020-09-05T08:47:51.357000</ts>
  <user>Cortlin</user>
  <text>You can make your own colour scheme as well.</text>
</message>
<message>
  <ts>2020-09-05T08:59:12.642000</ts>
  <user>Kiam</user>
  <text>it also goes off the OS</text>
</message>
<message>
  <ts>2020-09-05T08:59:32.442000</ts>
  <user>Kiam</user>
  <text>if you set your OS to dark mode drracket will pick that up and change accordingly</text>
</message>
<message>
  <ts>2020-09-05T13:10:32.114000</ts>
  <user>Marilou</user>
  <text>pretty pleased with myself. just learning racket finished advent of code 2019 day 1 yay</text>
</message>
<message>
  <ts>2020-09-05T13:25:44.972000</ts>
  <user>Bexon</user>
  <text>neato! two stars?</text>
</message>
<message>
  <ts>2020-09-05T13:40:49.365000</ts>
  <user>Marilou</user>
  <text>1 star jumped the gun there. day 1 part 1 done part 2 up next. still a win</text>
</message>
<message>
  <ts>2020-09-05T14:41:24.193000</ts>
  <user>Bexon</user>
  <text>yeah good luck with part two :)</text>
</message>
<message>
  <ts>2020-09-05T21:12:27.947000</ts>
  <user>Alyiah</user>
  <text>Let's say I have a set of facts in Prolog pertaining to students and teaches for courses. In the repl for Prolog I can do something like ```prologteaches(professor Course) studies(Student Course).```And it'll return every student being taught by `professor` in all their courses. I'm playing around with Datalog in Racket and I can't seem to be able to do this at the repl. I can define a rules```prologteaches_student(A B) : teaches(A Course) studies(B Course).```And then call that rule but I can't just run a query that has multiple terms to it. Does anyone know how I can do this in Racket's datalog?</text>
</message>
<message>
  <ts>2020-09-05T21:13:26.427000</ts>
  <user>Alyiah</user>
  <text>Currently I get this:</text>
</message>
<message>
  <ts>2020-09-05T21:18:24.260000</ts>
  <user>Alyiah</user>
  <text>Also to specify and OR in Datalog do I need to create a seperate rule for it since there's no equivalent to `;` in Prolog?</text>
</message>
<message>
  <ts>2020-09-05T21:49:19.010000</ts>
  <user>Alyiah</user>
  <text>Looking at the syntax for Datalog there are the following rules: ```‚Äπquery‚Ä∫ ::= ‚Äπliteral‚Ä∫ ?"‚Äπliteral‚Ä∫ ::= ‚Äπpredicatesym‚Ä∫ ( )" | ‚Äπpredicatesym‚Ä∫ ( ‚Äπterms‚Ä∫ )" | ‚Äπpredicatesym‚Ä∫ | ‚Äπterm‚Ä∫ = ‚Äπterm‚Ä∫ | ‚Äπterm‚Ä∫ != ‚Äπterm‚Ä∫ | ‚ÄπVARIABLE‚Ä∫ : ‚Äπexternalsym‚Ä∫ ( ‚Äπterms‚Ä∫ )"```So a query can only contain a literal. But I\'m confused about that last rule in there the `&lt;externalsym&gt;`. That rule isn\'t anywhere in the definition for the rest of the syntax does anyone know what that means?</text>
</message>
<message>
  <ts>2020-09-05T21:50:49.982000</ts>
  <user>Alyiah</user>
  <text>Oh wait never mind it's for calling Racket functions</text>
</message>
<message>
  <ts>2020-09-06T01:59:16.815000</ts>
  <user>Cortlin</user>
  <text>Does someone know how to quickly made flowchart for racket? there are plenty of them for c++ or python too but looks like there is not a single one for Scheme/Racket.</text>
</message>
<message>
  <ts>2020-09-06T02:26:05.033000</ts>
  <user>Kiam</user>
  <text>like make a flowchart _using_ racket? or something else</text>
</message>
<message>
  <ts>2020-09-06T03:43:24.267000</ts>
  <user>Cortlin</user>
  <text>yea</text>
</message>
<message>
  <ts>2020-09-06T03:43:31.537000</ts>
  <user>Cortlin</user>
  <text>that</text>
</message>
<message>
  <ts>2020-09-06T03:43:36.541000</ts>
  <user>Cortlin</user>
  <text>just a flowchart</text>
</message>
<message>
  <ts>2020-09-06T05:41:00.259000</ts>
  <user>Kiam</user>
  <text>alas I do not know of a racket library for making flowcharts</text>
</message>
<message>
  <ts>2020-09-06T05:41:23.613000</ts>
  <user>Kiam</user>
  <text>sounds like a fun project though</text>
</message>
<message>
  <ts>2020-09-06T05:49:53.991000</ts>
  <user>Cortlin</user>
  <text>well not like making flowcharts with racket but for it</text>
</message>
<message>
  <ts>2020-09-06T05:50:26.068000</ts>
  <user>Cortlin</user>
  <text>like grab the code and generate a flowchart</text>
</message>
<message>
  <ts>2020-09-06T07:59:03.183000</ts>
  <user>Kiam</user>
  <text>_oh_</text>
</message>
<message>
  <ts>2020-09-06T07:59:17.989000</ts>
  <user>Kiam</user>
  <text>there is something like that for visualizing dependencies between modules</text>
</message>
<message>
  <ts>2020-09-06T07:59:49.477000</ts>
  <user>Kiam</user>
  <text>https://docs.racketlang.org/pkgdepdraw/index.html</text>
</message>
<message>
  <ts>2020-09-06T09:12:30.103000</ts>
  <user>Marilou</user>
  <text>&gt; yeah good luck with part two :)@sarna 2 stars in now part 2 completed üëç</text>
</message>
<message>
  <ts>2020-09-06T09:48:46.584000</ts>
  <user>Bexon</user>
  <text>@parlortricks ha great job!</text>
</message>
<message>
  <ts>2020-09-06T10:07:52.083000</ts>
  <user>Daevion</user>
  <text>@Deleted User there was a recent `#lang` made using racket to make mind maps announced in Racket News</text>
</message>
<message>
  <ts>2020-09-06T22:46:50.360000</ts>
  <user>Yaw</user>
  <text>i remember that! it was pretty cool. i opened it up to see how they were doing the pythonstyle syntactically significant whitespace</text>
</message>
<message>
  <ts>2020-09-07T07:07:25.990000</ts>
  <user>Daevion</user>
  <text>Yes. I was going to look up the link but got caught up in other stuff.</text>
</message>
<message>
  <ts>2020-09-07T07:08:30.049000</ts>
  <user>Daevion</user>
  <text>@Deleted User let me know if you want the link</text>
</message>
<message>
  <ts>2020-09-07T08:42:30.218000</ts>
  <user>Cortlin</user>
  <text>sure</text>
</message>
<message>
  <ts>2020-09-07T08:42:38.023000</ts>
  <user>Cortlin</user>
  <text>Lemme check it out</text>
</message>
<message>
  <ts>2020-09-07T08:42:56.090000</ts>
  <user>Cortlin</user>
  <text>:racket:</text>
</message>
<message>
  <ts>2020-09-07T08:43:20.715000</ts>
  <user>Daevion</user>
  <text>Ok it will take me a few minutes to find it</text>
</message>
<message>
  <ts>2020-09-07T08:47:43.399000</ts>
  <user>Daevion</user>
  <text>https://github.com/zyrolasting/mindmap</text>
</message>
<message>
  <ts>2020-09-07T22:11:36.484000</ts>
  <user>Daevion</user>
  <text>I started a Racket FAQ: https://github.com/racket/racket/wiki/FrequentlyAskedQuestions</text>
</message>
<message>
  <ts>2020-09-07T22:41:14.688000</ts>
  <user>Cortlin</user>
  <text>Hey thats pretty cool</text>
</message>
<message>
  <ts>2020-09-08T02:25:53.860000</ts>
  <user>Kiam</user>
  <text>@StephenD can I run it on android is another very common question</text>
</message>
<message>
  <ts>2020-09-08T08:05:48.366000</ts>
  <user>Daevion</user>
  <text>@notjack thank you  very good tip</text>
</message>
<message>
  <ts>2020-09-08T13:13:25.548000</ts>
  <user>Daevion</user>
  <text>@notjack done https://github.com/racket/racket/wiki/FrequentlyAskedQuestions</text>
</message>
<message>
  <ts>2020-09-09T11:46:42.335000</ts>
  <user>Marilou</user>
  <text>hazza! AOC day2 done. got 4stars now üòÜ</text>
</message>
<message>
  <ts>2020-09-09T12:14:17.976000</ts>
  <user>Marilou</user>
  <text>day 2 part 2 pushed my limits a bit. tried to do recursion but ended up with for loops instead</text>
</message>
<message>
  <ts>2020-09-10T03:20:10.346000</ts>
  <user>Cortlin</user>
  <text>Recursion is a pain in the ass</text>
</message>
<message>
  <ts>2020-09-10T04:46:06.382000</ts>
  <user>Alyiah</user>
  <text>Looping is a pain in the ass</text>
</message>
<message>
  <ts>2020-09-10T04:47:48.723000</ts>
  <user>Alyiah</user>
  <text>Different problems are better solved different ways. Looping has its place recursion has its place. But both are important and it's good to know when to use which</text>
</message>
<message>
  <ts>2020-09-10T04:50:56.308000</ts>
  <user>Kiam</user>
  <text>use neither write stream pipelines</text>
</message>
<message>
  <ts>2020-09-10T05:26:56.105000</ts>
  <user>Cortlin</user>
  <text>wtf is that</text>
</message>
<message>
  <ts>2020-09-10T06:06:54.760000</ts>
  <user>Bexon</user>
  <text>filter map reduce</text>
</message>
<message>
  <ts>2020-09-10T10:31:42.049000</ts>
  <user>Marilou</user>
  <text>is there a good resource to explain map reduce filter in racket or general? i am a greenhorn when it comes to this</text>
</message>
<message>
  <ts>2020-09-10T10:55:17.189000</ts>
  <user>Bexon</user>
  <text>@parlortricks in my opinion it‚Äôs best to experiment with them</text>
</message>
<message>
  <ts>2020-09-10T10:55:37.746000</ts>
  <user>Bexon</user>
  <text>map is when you want to do something with the data but want to preserve its shape  for example multiplying all elements of a list by two (individual elements change but you got a list and you returned a list)</text>
</message>
<message>
  <ts>2020-09-10T10:56:16.333000</ts>
  <user>Bexon</user>
  <text>reduce is for changing shape (like taking a list and returning a sum of the elements)</text>
</message>
<message>
  <ts>2020-09-10T10:56:32.168000</ts>
  <user>Bexon</user>
  <text>and filter is just throwing stuff out based on some predicate</text>
</message>
<message>
  <ts>2020-09-10T10:57:46.751000</ts>
  <user>Bexon</user>
  <text>with map the number of elements doesn‚Äôt change with filter it can change</text>
</message>
<message>
  <ts>2020-09-10T12:06:24.226000</ts>
  <user>Cortlin</user>
  <text>And they're all implemented with recursion under the hood. :meow:</text>
</message>
<message>
  <ts>2020-09-10T12:14:14.715000</ts>
  <user>Bexon</user>
  <text>yess</text>
</message>
<message>
  <ts>2020-09-10T12:23:34.662000</ts>
  <user>Bexly</user>
  <text>I originally posted in help although after some debugging I\'m not entirely convinced its on me but it could be. I\'m following the embed racket in a binary tutorial but I\'ve fudged the code to get all of the imports dynamically by loading libracket3m instead of linking it all into my binary. Originally I had a crash which I traced to not calling scheme_register_tls_space". But I now get a crash in the depths of libracket3m when it tries to write data to a read only address. Given that this address is nowhere near my binary it looks like a heap allocation so I\'m all out of ideas. I checked Github but is there anywhere I can read the source for libracket?</text>
</message>
<message>
  <ts>2020-09-10T12:43:21.743000</ts>
  <user>Daevion</user>
  <text>&gt; is there a good resource to explain map reduce filter in racket or general? i am a greenhorn when it comes to this@parlortricks I think foldl and foldr May be of interest https://docs.racketlang.org/reference/pairs.html?q=Fold#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._foldl%29%29</text>
</message>
<message>
  <ts>2020-09-10T12:47:11.473000</ts>
  <user>Daevion</user>
  <text>And maybe https://htdp.org/20030926/Book/curriculumZH27.html#node_idx_1502</text>
</message>
<message>
  <ts>2020-09-10T12:54:15.245000</ts>
  <user>Cortlin</user>
  <text>I recommend reading the reference implementation of SRFI1. It's easy to read and gives you a sense of idiomatic use of recursion over lists.</text>
</message>
<message>
  <ts>2020-09-10T13:30:20.493000</ts>
  <user>Marilou</user>
  <text>thanks everyone ill read up on the suggestions</text>
</message>
<message>
  <ts>2020-09-10T16:08:11.125000</ts>
  <user>Ambriel</user>
  <text>&gt; Different problems are better solved different ways. Looping has its place recursion has its place. But both are important and it\'s good to know when to use which@nixin72 Could you please expand on this? My only substantial programming experience so far is with _How to Design Programs_ which I am very close to finishing. The book introduces for loops in an intermezzo but otherwise sticks to recursion; and in looking ahead to the contents of the _How to Design Classes_ draft I saw that it contains a section called Why Loops are Bad ... but that was never even started. While I have had no problem with recursion in working through _HtDP_ when I was trying to implement 3SUM based on an algorithms textbook I did think using nested for loops looked easier. Why does there appear to be hostility to for loops in functional contexts?</text>
</message>
<message>
  <ts>2020-09-10T16:14:12.684000</ts>
  <user>Alyiah</user>
  <text>With for loops your goal is often to perform something like a map filter or reduce which are obviously better implemeted as higherorder functions rather than loops. But some algorithms are just more nicely represented as a loop rather than recursion like bubble sort. Not that you can't implement bubble sort recursively but I at least happen to find it's iterative definition a little nicer. Something like quicksort though on the other hand much nicer to do recursively seeing as it's a divide and conquer strategy. Not sure how you'd try to express that iteratively. But sometimes you just want to avoid recursion in general like if you're using Java since the platform itself doesn't do tail call optimization so you're going to get a performance hit from using recursion instead of loops.</text>
</message>
<message>
  <ts>2020-09-10T16:18:32.922000</ts>
  <user>Ambriel</user>
  <text>Thank you!</text>
</message>
<message>
  <ts>2020-09-10T16:28:15.043000</ts>
  <user>Alyiah</user>
  <text>No problem!</text>
</message>
<message>
  <ts>2020-09-10T17:27:59.896000</ts>
  <user>Britten</user>
  <text>@kronos you may want to make a small example and ask on the mailing list. The libracket source is mostly in here iirc https://github.com/racket/racket/tree/master/racket/src/bc/src</text>
</message>
<message>
  <ts>2020-09-10T17:28:55.156000</ts>
  <user>Bexly</user>
  <text>@oaktownsam Thank you! Will do üôÇ</text>
</message>
<message>
  <ts>2020-09-12T00:13:37.548000</ts>
  <user>Cortlin</user>
  <text>Is racket better than python?</text>
</message>
<message>
  <ts>2020-09-12T00:57:35.097000</ts>
  <user>Rynlee</user>
  <text>That's a loaded question</text>
</message>
<message>
  <ts>2020-09-12T01:01:40.366000</ts>
  <user>Yaw</user>
  <text>i think that question implies you can reduce the goodness of a language to a scalar value which can be ordered but i don't think that is the case</text>
</message>
<message>
  <ts>2020-09-12T01:02:02.344000</ts>
  <user>Yaw</user>
  <text>so you probably need to ask a more nuanced question to get a meaningful answer</text>
</message>
<message>
  <ts>2020-09-12T01:02:25.051000</ts>
  <user>Yaw</user>
  <text>i find python to be a nice language for a lot of things (:</text>
</message>
<message>
  <ts>2020-09-12T01:04:12.506000</ts>
  <user>Yaw</user>
  <text>but i would probably use python and racket for different things</text>
</message>
<message>
  <ts>2020-09-12T01:05:53.886000</ts>
  <user>Yaw</user>
  <text>my personal opinion . . . racket is more fun (:</text>
</message>
<message>
  <ts>2020-09-12T01:06:28.405000</ts>
  <user>Cortlin</user>
  <text>I mean im not saying Python is better at all If a language is better or not completely depends on personal preference and what It will be used on.</text>
</message>
<message>
  <ts>2020-09-12T01:07:00.480000</ts>
  <user>Yaw</user>
  <text>i've always been a fan of trying to make use of whatever tools seem to fit the problem at hand</text>
</message>
<message>
  <ts>2020-09-12T01:07:46.439000</ts>
  <user>Yaw</user>
  <text>and the problem at hand can include factors like what languages are the other people i\'m working with familiar with? or how will i communicate this with other people</text>
</message>
<message>
  <ts>2020-09-12T01:08:28.951000</ts>
  <user>Kiam</user>
  <text>I like racket much more than python</text>
</message>
<message>
  <ts>2020-09-12T01:08:48.921000</ts>
  <user>Kiam</user>
  <text>that\'s about as close to is x language better than y as you can get</text>
</message>
<message>
  <ts>2020-09-12T01:11:06.366000</ts>
  <user>Yaw</user>
  <text>i think for me the thing about python is that it's complicated both in terms of syntax and semantics but it's also kind of limited at the same time</text>
</message>
<message>
  <ts>2020-09-12T01:11:28.289000</ts>
  <user>Yaw</user>
  <text>and python works just fine for some things but sometimes i just want to do something and i can't or i can but the natural way to express it is kind of weird</text>
</message>
<message>
  <ts>2020-09-12T01:13:25.137000</ts>
  <user>Yaw</user>
  <text>i think every language should have tail call elimination and proper lambdas</text>
</message>
<message>
  <ts>2020-09-12T01:13:44.458000</ts>
  <user>Yaw</user>
  <text>well every generalpurpose language</text>
</message>
<message>
  <ts>2020-09-12T01:17:27.519000</ts>
  <user>Yaw</user>
  <text>i was happy js was getting proper tail calls but that basically didn't happen because browser vendors didn't want it . . . and then i was optimistic about the wasm tail call proposal but i'm not sure that one's going to work out either</text>
</message>
<message>
  <ts>2020-09-12T01:17:53.771000</ts>
  <user>Yaw</user>
  <text>frown</text>
</message>
<message>
  <ts>2020-09-12T01:19:19.367000</ts>
  <user>Kiam</user>
  <text>the thing that gets me about python is how much it lacks typo safety  it is far far too hard to catch silly mistakes caused by typos</text>
</message>
<message>
  <ts>2020-09-12T01:19:40.278000</ts>
  <user>Kiam</user>
  <text>for example because calling a function that doesn't exist is a runtime error not a compile time one</text>
</message>
<message>
  <ts>2020-09-12T01:20:02.203000</ts>
  <user>Kiam</user>
  <text>I don't have this problem in racket</text>
</message>
<message>
  <ts>2020-09-12T01:21:02.697000</ts>
  <user>Yaw</user>
  <text>that is a really good point</text>
</message>
<message>
  <ts>2020-09-12T01:22:08.970000</ts>
  <user>Kiam</user>
  <text>it makes racket feel much less dynamic than other dynamic languages</text>
</message>
<message>
  <ts>2020-09-12T01:22:18.626000</ts>
  <user>Kiam</user>
  <text>and I'm very happy with that</text>
</message>
<message>
  <ts>2020-09-12T05:24:20.828000</ts>
  <user>Matt</user>
  <text>racket is so nice to me and i barely use it</text>
</message>
<message>
  <ts>2020-09-12T05:24:27.608000</ts>
  <user>Matt</user>
  <text>thats as much as i can say</text>
</message>
<message>
  <ts>2020-09-12T05:25:07.389000</ts>
  <user>Matt</user>
  <text>i enjoy it more than haskell c c++ python julia (julias pretty nice tho) thats about all ive used</text>
</message>
<message>
  <ts>2020-09-12T08:54:40.377000</ts>
  <user>Daevion</user>
  <text>&gt; Is racket better than python?@Deleted User Thanks for the question.You made me think.At first I asked myself if I should treat this like trolling  on consideration I think you are asking a real question that a lot of people ask.As the others have mentioned here that real question can probably be better phrased as Is Racket better than Python ...for me?'But that is not an easy question because what makes a language good for a person has many different dimensions because it is as much about people as it is about languages.That said there are some interesting responses to the which is better? question. One that comes to mind is the Self programming language was implemented with a classless object system (like js) and the implementors proceeded to implement smalltalks class system in self.You may also like the racketcon talk Like a blind squirrel in a ferrari a few years ago or the Why Racket addendum in Beautiful Racket (by Matthew Butterick.)</text>
</message>
<message>
  <ts>2020-09-12T09:05:32.462000</ts>
  <user>Daevion</user>
  <text>As a human using a language I think aspects to be considered are: Will learning this help me get a job? What is the documentation like? What are the learning resources like?  What is the community like?: Will I be welcomed? is it OK to ask questions? (even ones that I'm afraid might make me feel dumb uneducated or in some way less of a person) Can I learn(develop with it) on the computers I have available? school/college/university/work computer? chromebook? android phone or tablet? Window10 for ARM? Can I write programs on it that will work in the places I need them to? (server side web applications; Client side web applications; Windows Linux Mac gui apps; command line apps; terminal apps; iphone or android apps)</text>
</message>
<message>
  <ts>2020-09-12T09:09:16.830000</ts>
  <user>Daevion</user>
  <text>I think the racket faq needs a couple more questions; Is Racket better than x?(for you)'I also want to add  Is Racket the same as scheme?  and point back to the reasons for the name change from PLTScheme to Racket.</text>
</message>
<message>
  <ts>2020-09-12T09:10:55.949000</ts>
  <user>Kiam</user>
  <text>for me what is possible with this language? is a very important question and it\'s a big part of why I like racket</text>
</message>
<message>
  <ts>2020-09-12T09:13:10.868000</ts>
  <user>Daevion</user>
  <text>Agreed  a big part of programming is making. So there is always an audience you are making for though sometimes that audience is me  and thats ok too.</text>
</message>
<message>
  <ts>2020-09-12T09:14:38.745000</ts>
  <user>Daevion</user>
  <text>I also think a programming language is also for learning (obviously)</text>
</message>
<message>
  <ts>2020-09-12T09:14:53.817000</ts>
  <user>Daevion</user>
  <text>but also for dreaming...</text>
</message>
<message>
  <ts>2020-09-12T09:15:41.466000</ts>
  <user>Bexon</user>
  <text>‚Äúwhat is possible with this language?‚Äù is a trap question for me I always end up with rust this wayand like :GWseremePeepoThink: I feel like I‚Äôm supposed to enjoy rust but I don‚Äôt? it‚Äôs a great language with an awesome ecosystem but I just don‚Äôt vibe with itand racket just feels good :GWcmeisterPeepoShrug:</text>
</message>
<message>
  <ts>2020-09-12T09:16:38.630000</ts>
  <user>Bexon</user>
  <text>when I was asking this question having racket in mind I ended up hating it because it was less dynamic than CL</text>
</message>
<message>
  <ts>2020-09-12T09:17:36.087000</ts>
  <user>Bexon</user>
  <text>also stuff like hygiene was a threat  ‚Äúit limits what I can do it has to be bad!‚Äù</text>
</message>
<message>
  <ts>2020-09-12T09:20:52.393000</ts>
  <user>Kiam</user>
  <text>hygiene _doesn't_ limit what you can do</text>
</message>
<message>
  <ts>2020-09-12T09:24:56.272000</ts>
  <user>Bexon</user>
  <text>I still don‚Äôt fully understand the concept I‚Äôve just seen some people ranting how it‚Äôs annoying and limiting</text>
</message>
<message>
  <ts>2020-09-12T09:25:12.132000</ts>
  <user>Bexon</user>
  <text>don‚Äôt listen to people on internet forums folks</text>
</message>
<message>
  <ts>2020-09-12T09:28:50.918000</ts>
  <user>Bexon</user>
  <text>but still  when I‚Äôm in that mindset I tend to find a couple of perceived ‚Äúflaws‚Äù and hyperfocus on them instead of just making cool stuff</text>
</message>
<message>
  <ts>2020-09-12T09:29:08.875000</ts>
  <user>Bexon</user>
  <text>could be just me though :^)</text>
</message>
<message>
  <ts>2020-09-12T09:30:20.143000</ts>
  <user>Kiam</user>
  <text>I would say it's safe to ignore the complaints about hygiene</text>
</message>
<message>
  <ts>2020-09-12T09:31:38.716000</ts>
  <user>Kiam</user>
  <text>lack of hygiene is a debilitating flaw in a modern macro system</text>
</message>
<message>
  <ts>2020-09-12T09:32:16.199000</ts>
  <user>Daevion</user>
  <text>https://dl.acm.org/doi/epdf/10.1145/3386330</text>
</message>
<message>
  <ts>2020-09-12T09:34:01.651000</ts>
  <user>Daevion</user>
  <text>Complaining about hygiene seems a lot like complaining about gc</text>
</message>
<message>
  <ts>2020-09-12T09:34:32.406000</ts>
  <user>Bexon</user>
  <text>yeah and complaining about GC is everywhere nowadays</text>
</message>
<message>
  <ts>2020-09-12T09:35:16.684000</ts>
  <user>Bexon</user>
  <text>GC and dynamic types are typical scapegoats these days</text>
</message>
<message>
  <ts>2020-09-12T09:37:41.276000</ts>
  <user>Kiam</user>
  <text>wow that paper is _thorough_</text>
</message>
<message>
  <ts>2020-09-12T09:38:26.841000</ts>
  <user>Kiam</user>
  <text>it has multiple pages on an obscure macro issue I've run into a few times and never thought of a good reconciliation for</text>
</message>
<message>
  <ts>2020-09-12T09:38:36.827000</ts>
  <user>Bexon</user>
  <text>:GWseremePeepoGGERS:</text>
</message>
<message>
  <ts>2020-09-12T09:38:47.877000</ts>
  <user>Kiam</user>
  <text>(specifically are field names identifiers or symbols?")</text>
</message>
<message>
  <ts>2020-09-12T09:38:59.426000</ts>
  <user>Bexon</user>
  <text>what are they?</text>
</message>
<message>
  <ts>2020-09-12T09:39:36.504000</ts>
  <user>Kiam</user>
  <text>scheme standards say they're supposed to be identifiers but in practice that doesn't really work they need to be handled symbolically</text>
</message>
<message>
  <ts>2020-09-12T09:39:47.060000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-12T09:40:06.002000</ts>
  <user>Kiam</user>
  <text>(it's about fields in record types)</text>
</message>
<message>
  <ts>2020-09-12T09:41:51.727000</ts>
  <user>Bexon</user>
  <text>yeah got it</text>
</message>
<message>
  <ts>2020-09-12T09:45:33.427000</ts>
  <user>Daevion</user>
  <text>&gt; wow that paper is _thorough_@notjack did you notice the ‚Äòshepherd‚Äô?</text>
</message>
<message>
  <ts>2020-09-12T09:47:28.183000</ts>
  <user>Kiam</user>
  <text>I did not wow</text>
</message>
<message>
  <ts>2020-09-12T10:16:24.956000</ts>
  <user>Zayne</user>
  <text>wow incredibly detailed report on hygiene there :)</text>
</message>
<message>
  <ts>2020-09-12T10:19:41.985000</ts>
  <user>Daevion</user>
  <text>I believe this will be a featured paper in Racket News. To see more like this I would recommend subscribing at https://racketnews.com and checking out the back issues.</text>
</message>
<message>
  <ts>2020-09-12T12:07:24.607000</ts>
  <user>Marilou</user>
  <text>I have created a repository on gitlab to host my Advent of Code and to try and explain how i worked things out https://gitlab.com/ParlorTricks/adventofcode. Still fleshing out how to deliver it.</text>
</message>
<message>
  <ts>2020-09-12T19:27:28.163000</ts>
  <user>Britten</user>
  <text>https://giphy.com/gifs/thingstheaterstrugglesiDJuQR0UmiqOI</text>
</message>
<message>
  <ts>2020-09-12T21:46:23.676000</ts>
  <user>Kiam</user>
  <text>I read that paper's description of the set of scopes model and it was amazingly clear</text>
</message>
<message>
  <ts>2020-09-12T21:46:35.784000</ts>
  <user>Kiam</user>
  <text>I need to read the rest of that paper soon</text>
</message>
<message>
  <ts>2020-09-12T22:33:40.150000</ts>
  <user>Britten</user>
  <text>Set of scopes is nice++</text>
</message>
<message>
  <ts>2020-09-12T23:43:36.361000</ts>
  <user>Britten</user>
  <text>I also found these section titles amusing</text>
</message>
<message>
  <ts>2020-09-12T23:44:24.966000</ts>
  <user>Britten</user>
  <text>I'm only a quarter of the way through the paper though. I'm a slow reader.</text>
</message>
<message>
  <ts>2020-09-12T23:46:04.122000</ts>
  <user>Cortlin</user>
  <text>I remember reading Oleg's original paper on that.</text>
</message>
<message>
  <ts>2020-09-12T23:46:23.521000</ts>
  <user>Cortlin</user>
  <text>I thought wow how the heck would someone come up with that</text>
</message>
<message>
  <ts>2020-09-12T23:46:27.930000</ts>
  <user>Kiam</user>
  <text>Kiselyov Defilement is an amazing section title</text>
</message>
<message>
  <ts>2020-09-12T23:46:58.168000</ts>
  <user>Cortlin</user>
  <text>But abusing the literal list is an obvious idea in retrospect I suppose.</text>
</message>
<message>
  <ts>2020-09-13T04:14:26.370000</ts>
  <user>Marilou</user>
  <text>I wrote this page to assist me with map/filter/reduce https://gitlab.com/ParlorTricks/adventofcode//blob/master/rackettips.md  has some diagrams created with mermaid to visualise them as well.</text>
</message>
<message>
  <ts>2020-09-13T06:06:44.175000</ts>
  <user>Kiam</user>
  <text>@parlortricks wow I really like those diagrams</text>
</message>
<message>
  <ts>2020-09-13T06:07:36.206000</ts>
  <user>Kiam</user>
  <text>is this the mermaid thing you used? https://mermaidjs.github.io/mermaid/</text>
</message>
<message>
  <ts>2020-09-13T06:09:57.406000</ts>
  <user>Marilou</user>
  <text>&gt; is this the mermaid thing you used? https://mermaidjs.github.io/mermaid/@notjack yes that is what i used. gitlab has it included as a markdown option</text>
</message>
<message>
  <ts>2020-09-13T06:17:18.147000</ts>
  <user>Marilou</user>
  <text>i was going to draw them in Visio but having something in text is much better i can source control it then</text>
</message>
<message>
  <ts>2020-09-13T10:43:38.998000</ts>
  <user>Kiam</user>
  <text>idle thought of the night: I wish `#lang`based languages had `languageserver` submodules that started servers which spoke the language sever protocol</text>
</message>
<message>
  <ts>2020-09-13T10:44:13.774000</ts>
  <user>Daevion</user>
  <text>That is such a good idea!</text>
</message>
<message>
  <ts>2020-09-13T10:54:02.621000</ts>
  <user>Kiam</user>
  <text>that way there could be a single racket langserver program that just looks at the file's lang starts up a server using the lang's submodule then acts as a proxy between the client and the langspecific servers</text>
</message>
<message>
  <ts>2020-09-13T10:55:57.301000</ts>
  <user>Kiam</user>
  <text>and then `#lang` authors could ship great editor support directly through the racket package system</text>
</message>
<message>
  <ts>2020-09-13T10:58:18.819000</ts>
  <user>Daevion</user>
  <text>How much of this work is already done by the `#lang` support in DrRacket? how much has GregH already done to made this functionality available to RacketMode?</text>
</message>
<message>
  <ts>2020-09-13T10:59:00.827000</ts>
  <user>Kiam</user>
  <text>some there's stuff like the color lexer thing</text>
</message>
<message>
  <ts>2020-09-13T10:59:57.716000</ts>
  <user>Kiam</user>
  <text>languages can include stuff in... I think the reader? where it supports a way to ask the lang how to syntax highlight stuff</text>
</message>
<message>
  <ts>2020-09-13T11:01:03.904000</ts>
  <user>Kiam</user>
  <text>and all of the functionality that's derived from the macro expander like binding arrows and identifier renaming is already language agnostic anyway</text>
</message>
<message>
  <ts>2020-09-13T11:02:07.096000</ts>
  <user>Daevion</user>
  <text>Sounds like a worthy project!</text>
</message>
<message>
  <ts>2020-09-13T11:02:16.488000</ts>
  <user>Kiam</user>
  <text>this would be mainly useful for things like autocompletion and languagespecific forms of navigation such as jump to type definition</text>
</message>
<message>
  <ts>2020-09-13T11:03:04.611000</ts>
  <user>Kiam</user>
  <text>there isn't really a way to do that stuff for an arbitrary `#lang` ya gotta ask the language what those operations mean</text>
</message>
<message>
  <ts>2020-09-13T13:11:31.001000</ts>
  <user>Daevion</user>
  <text>Sounds like a big project.</text>
</message>
<message>
  <ts>2020-09-13T13:13:09.815000</ts>
  <user>Daevion</user>
  <text>It would be worth defining a MVP and seeing if you could attract collaborators. There are a significant number of VSC users (unsurprisingly).</text>
</message>
<message>
  <ts>2020-09-13T13:15:01.999000</ts>
  <user>Daevion</user>
  <text>Apart from VSC  what other ides can use LSP?</text>
</message>
<message>
  <ts>2020-09-13T13:59:50.726000</ts>
  <user>Bexon</user>
  <text>isn't racketmode lspbased?</text>
</message>
<message>
  <ts>2020-09-13T14:00:21.696000</ts>
  <user>Bexon</user>
  <text>I have lsp in emacs just not sure if for racket</text>
</message>
<message>
  <ts>2020-09-13T14:00:34.675000</ts>
  <user>Bexon</user>
  <text>lsp was supposed to be ideagnostic that's why it's popular</text>
</message>
<message>
  <ts>2020-09-13T14:18:44.948000</ts>
  <user>Daevion</user>
  <text>&gt; isn't racketmode lspbased?@sarna I don‚Äôt know!</text>
</message>
<message>
  <ts>2020-09-13T14:19:33.829000</ts>
  <user>Bexon</user>
  <text>&gt; Racket Mode uses a ‚Äúback end server‚Äù written in Racket which is responsible for running files and implementing commands that cannot be implemented in Emacs Lisp.</text>
</message>
<message>
  <ts>2020-09-13T14:19:38.429000</ts>
  <user>Bexon</user>
  <text>seems like it.. isn't?</text>
</message>
<message>
  <ts>2020-09-13T16:35:14.337000</ts>
  <user>Britten</user>
  <text>There is an LSP bit for vim but I haven't messed with it yet.</text>
</message>
<message>
  <ts>2020-09-13T16:40:58.897000</ts>
  <user>Daevion</user>
  <text>https://github.com/jeapostrophe/racketlangserver do they use this?</text>
</message>
<message>
  <ts>2020-09-13T16:42:44.240000</ts>
  <user>Kiam</user>
  <text>racketmode doesn't use lsp lsp didn't exist at the time it was made</text>
</message>
<message>
  <ts>2020-09-13T16:43:33.108000</ts>
  <user>Kiam</user>
  <text>lsp is awesome but I can't believe it uses UTF16 for everything ü§¶</text>
</message>
<message>
  <ts>2020-09-13T16:47:00.271000</ts>
  <user>Daevion</user>
  <text>Does https://github.com/jeapostrophe/racketlangserver use UTF16 ? I thought json  and by extension LSProtocol as a json api  mandated Utf8?</text>
</message>
<message>
  <ts>2020-09-13T16:49:08.217000</ts>
  <user>Britten</user>
  <text>No the vim addon doodad is a generic LSP client you are supposed to be able to plug it into the language end</text>
</message>
<message>
  <ts>2020-09-13T16:50:58.924000</ts>
  <user>Kiam</user>
  <text>the wire protocol sends all the json text as utf8  the problem is that the _column positions_ that occur in messages like hey what\'s the type of the variable at line 86 column 33 don\'t mean 33 codepoints they mean 33 bytes assuming the file is encoded as utf16</text>
</message>
<message>
  <ts>2020-09-13T16:52:36.273000</ts>
  <user>Kiam</user>
  <text>so the language sever has to read the file into memory and reencode it as utf16 and remember to do that every time or else things will go wrong as soon as a source file contains nonascii characters</text>
</message>
<message>
  <ts>2020-09-13T16:52:49.895000</ts>
  <user>Daevion</user>
  <text>That‚Äôs in the LSProtocol specification? Seems insane? Is there a good reason?</text>
</message>
<message>
  <ts>2020-09-13T16:52:58.049000</ts>
  <user>Britten</user>
  <text>Because Windows</text>
</message>
<message>
  <ts>2020-09-13T16:53:41.403000</ts>
  <user>Kiam</user>
  <text>the spec was mostly driven by Microsoft for use with Typescript so utf16 seemed reasonable to them</text>
</message>
<message>
  <ts>2020-09-13T16:54:04.803000</ts>
  <user>Kiam</user>
  <text>there isn't even a way for clients and servers to negotiate the encoding</text>
</message>
<message>
  <ts>2020-09-13T16:54:20.315000</ts>
  <user>Kiam</user>
  <text>yet at least</text>
</message>
<message>
  <ts>2020-09-13T16:55:40.069000</ts>
  <user>Britten</user>
  <text>unicode makes some things better and other things more complicated (for ASCII users)</text>
</message>
<message>
  <ts>2020-09-13T16:55:46.647000</ts>
  <user>Daevion</user>
  <text>Sounds about right for the first gen of any protocol. Can‚Äôt blame engineers for doing the best they could at the time .</text>
</message>
<message>
  <ts>2020-09-13T16:57:11.357000</ts>
  <user>Kiam</user>
  <text>that's true but for fuck's sake even _java_ has gotten around to moving away from utf16 for string encoding</text>
</message>
<message>
  <ts>2020-09-13T16:58:09.229000</ts>
  <user>Kiam</user>
  <text>(sometime ago the String class changed from utf16 bytes to bytes plus a field saying what encoding it\'s in")</text>
</message>
<message>
  <ts>2020-09-13T17:31:12.456000</ts>
  <user>Daevion</user>
  <text>&gt; the wire protocol sends all the json text as utf8  the problem is that the _column positions_ that occur in messages like hey what\'s the type of the variable at line 86 column 33 don\'t mean 33 codepoints they mean 33 bytes assuming the file is encoded as utf16@notjack Im assuming this means the typescript lsp server is or was written is a windows Lang where UTF16 is convenient?</text>
</message>
<message>
  <ts>2020-09-13T17:32:11.836000</ts>
  <user>Kiam</user>
  <text>yup</text>
</message>
<message>
  <ts>2020-09-13T17:33:56.824000</ts>
  <user>Daevion</user>
  <text>Weird. I wonder but will prob never know why they didn‚Äôt use typescript?</text>
</message>
<message>
  <ts>2020-09-13T17:38:21.576000</ts>
  <user>Kiam</user>
  <text>no idea ü§∑</text>
</message>
<message>
  <ts>2020-09-13T18:04:16.175000</ts>
  <user>Britten</user>
  <text>My hypothesis is that the original language client was plain old VisualStudio (not vscode) and all of the innards are UTF16 and it all flows from there.</text>
</message>
<message>
  <ts>2020-09-13T18:05:03.599000</ts>
  <user>Britten</user>
  <text>oh obvs doesn't totally explain the typescript implementation side.</text>
</message>
<message>
  <ts>2020-09-13T18:06:27.066000</ts>
  <user>Daevion</user>
  <text>I‚Äôm assuming there is a LSPv2 currently being worked on somewhere</text>
</message>
<message>
  <ts>2020-09-13T18:08:45.563000</ts>
  <user>Kiam</user>
  <text>the current spec is v3</text>
</message>
<message>
  <ts>2020-09-13T18:18:19.834000</ts>
  <user>Britten</user>
  <text>:sadtrombone:</text>
</message>
<message>
  <ts>2020-09-14T00:22:28.124000</ts>
  <user>Marilou</user>
  <text>&gt; i was going to draw them in Visio but having something in text is much better i can source control it then@parlortricks i just found that http://draw.io can import mermaid source and draw the diagram i think that is pretty cool allows you to play with it after</text>
</message>
<message>
  <ts>2020-09-14T17:09:02.288000</ts>
  <user>Catori</user>
  <text>is there a built in way to connect over ssh tunnel in `db`</text>
</message>
<message>
  <ts>2020-09-14T17:23:39.222000</ts>
  <user>Daevion</user>
  <text>I‚Äôve only used Stunnel and that wasn‚Äôt for Racket/ db. You could try a search of the docs https://docs.racketlang.org/search/index.html?q=Ssh or maybe the mailing list.</text>
</message>
<message>
  <ts>2020-09-14T19:00:56.964000</ts>
  <user>Britten</user>
  <text>I don't think there is a builtin way. You could start ssh outside of Racket and then connect using the forwarded ports on localhost. Otherwise you can start ssh inside Racket with `process` or `process`https://docs.racketlang.org/reference/subprocess.html?q=system#%28def._%28%28lib._racket%2Fsystem..rkt%29._process%29%29</text>
</message>
<message>
  <ts>2020-09-15T04:11:01.138000</ts>
  <user>Catori</user>
  <text>@oaktownsam process to start the ssh tunnel may just be the most effective</text>
</message>
<message>
  <ts>2020-09-15T04:11:02.076000</ts>
  <user>Catori</user>
  <text>thanks</text>
</message>
<message>
  <ts>2020-09-15T07:13:00.029000</ts>
  <user>Bexon</user>
  <text>why do all thread functions start with ‚Äúthread‚Äù but not ‚Äúkillthread‚Äù and ‚Äúbreakthread‚Äù? legacy?</text>
</message>
<message>
  <ts>2020-09-15T07:47:28.173000</ts>
  <user>Kiam</user>
  <text>probably</text>
</message>
<message>
  <ts>2020-09-15T07:48:17.223000</ts>
  <user>Kiam</user>
  <text>naming conventions for racket APIs have evolved over time and people don't always know about them</text>
</message>
<message>
  <ts>2020-09-16T05:54:12.083000</ts>
  <user>Marilou</user>
  <text>ive just staryed toying with math/array and in the doco it creates a 6x6 array and pretty prints it. However when i do this in the repl it prints the whole array on one line... can you pretty print arrays?</text>
</message>
<message>
  <ts>2020-09-16T05:58:01.673000</ts>
  <user>Marilou</user>
  <text>i know i can write my own thing to pretty print it but is something already in built</text>
</message>
<message>
  <ts>2020-09-16T06:13:15.941000</ts>
  <user>Kiam</user>
  <text>@parlortricks are you using the drracket repl and if so are you using the horizontal or the vertical layout of the definitions and interactions panes?</text>
</message>
<message>
  <ts>2020-09-16T09:32:33.603000</ts>
  <user>Marilou</user>
  <text>@notjack yeah im using drracket repl un horizontal layout. source at top repl below</text>
</message>
<message>
  <ts>2020-09-16T11:35:58.704000</ts>
  <user>Sevak</user>
  <text>lo all</text>
</message>
<message>
  <ts>2020-09-16T11:36:45.909000</ts>
  <user>Cortlin</user>
  <text>Ahoj</text>
</message>
<message>
  <ts>2020-09-16T12:13:54.816000</ts>
  <user>Bexon</user>
  <text>:meowloween:</text>
</message>
<message>
  <ts>2020-09-16T14:08:18.928000</ts>
  <user>Daevion</user>
  <text>Hello @Zac Bir [he/him]</text>
</message>
<message>
  <ts>2020-09-17T00:30:56.321000</ts>
  <user>Daevion</user>
  <text>[ANN]Call for betatesters: racket templatesWe have a small collection of templates at https://github.com/rackettemplates and a command that helps you use them.I‚Äôll do a formal release in the next Racket News but in the meantime it would be great if you have a few free moments to try the tool and a template (or two) let me know if you see any problems.You can download a template straight to your computer with the command `raco fromtemplate &lt;template repo name&gt; &lt;destination folder&gt;` e.g. the following command creates a new folder in the current directory and populates it with the contents of the guiapp template.`raco fromtemplate guiapp mygui`Thanks to @nixin72 we have an extension to raco that adds the fromtemplate command.Thanks also go to Andre Garzia for getting it working for windows.It should go something like this;```% echo $PATH/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/Applications/Racket v7.8/bin:/opt/X11/bin:/Library/Apple/usr/bin% raco pkg install fromtemplateResolving fromtemplate via https://download.racketlang.org/releases/7.8/catalog/Resolving fromtemplate via https://pkgs.racketlang.orgDownloading repository https://github.com/nixin72/fromtemplate.git[‚Ä¶]raco setup:  installing collections  [17:55:59]raco setup:  postinstalling collections  [17:55:59]% mkdir templatetests% cd templatetests % raco fromtemplate guiapp myguiguiapp/Users/spdegabrielle/Dev/templatetests/Cloning into \'mygui\'...remote: Enumerating objects: 25 done.remote: Counting objects: 100% (25/25) done.remote: Compressing objects: 100% (19/19) done.remote: Total 25 (delta 8) reused 13 (delta 3) packreused 0Unpacking objects: 100% (25/25) done.#t% lsmygui% cd mygui```Please try it out and let me know if you identify any problems.Suggestions appreciated!</text>
</message>
<message>
  <ts>2020-09-17T00:36:14.694000</ts>
  <user>Cortlin</user>
  <text>`fromtemplate` is a tad unwieldy.</text>
</message>
<message>
  <ts>2020-09-17T00:36:31.652000</ts>
  <user>Cortlin</user>
  <text>Why not `create` or `init`?</text>
</message>
<message>
  <ts>2020-09-17T00:38:47.392000</ts>
  <user>Alyiah</user>
  <text>Cause I'm dumb and gave it a verbose name lol</text>
</message>
<message>
  <ts>2020-09-17T00:39:54.346000</ts>
  <user>Cortlin</user>
  <text>Haha</text>
</message>
<message>
  <ts>2020-09-17T00:40:53.204000</ts>
  <user>Alyiah</user>
  <text>I was thinking of changing it to `raco new`  `raco new guiapp` is much nicer tbh üëå</text>
</message>
<message>
  <ts>2020-09-17T00:41:14.775000</ts>
  <user>Alyiah</user>
  <text>Also `new` somehow isn't taken among raco commands as far as I can tell</text>
</message>
<message>
  <ts>2020-09-17T00:41:50.985000</ts>
  <user>Daevion</user>
  <text>I think we have a winner!</text>
</message>
<message>
  <ts>2020-09-17T00:42:08.979000</ts>
  <user>Cortlin</user>
  <text>Sounds good to me.</text>
</message>
<message>
  <ts>2020-09-17T00:43:32.366000</ts>
  <user>Daevion</user>
  <text>the idea for the collection of templates came from `dotnet new`</text>
</message>
<message>
  <ts>2020-09-17T00:43:46.232000</ts>
  <user>Daevion</user>
  <text>so why not `raco new`</text>
</message>
<message>
  <ts>2020-09-17T00:44:02.865000</ts>
  <user>Alyiah</user>
  <text>Lol sounds good to me! I'll go change that give me a sec</text>
</message>
<message>
  <ts>2020-09-17T00:45:16.230000</ts>
  <user>Daevion</user>
  <text>@nixin72 can you keep the old command? just while we are beta testing?</text>
</message>
<message>
  <ts>2020-09-17T00:45:30.633000</ts>
  <user>Daevion</user>
  <text>or have both</text>
</message>
<message>
  <ts>2020-09-17T00:47:06.706000</ts>
  <user>Daevion</user>
  <text>```racket(define racocommands \'(("fromtemplate main.rkt Install a repo from a template at rackettemplates 50)("new main.rkt Install a repo from a template at rackettemplates 50)))```</text>
</message>
<message>
  <ts>2020-09-17T00:47:09.502000</ts>
  <user>Alyiah</user>
  <text>Yup I can definitely do that</text>
</message>
<message>
  <ts>2020-09-17T00:48:07.608000</ts>
  <user>Daevion</user>
  <text>cool I can announce it tomorrow on the slack once it builds on pkgs again</text>
</message>
<message>
  <ts>2020-09-17T00:48:42.093000</ts>
  <user>Daevion</user>
  <text>we have added a `#lang` template thanks to @samth</text>
</message>
<message>
  <ts>2020-09-17T00:54:45.387000</ts>
  <user>Alyiah</user>
  <text>Ohh nice!</text>
</message>
<message>
  <ts>2020-09-17T00:55:22.740000</ts>
  <user>Alyiah</user>
  <text>I've added `new` as an alternative to `fromtemplate` now @Deleted User üëç Thanks for the suggestion</text>
</message>
<message>
  <ts>2020-09-17T00:59:07.856000</ts>
  <user>Cortlin</user>
  <text>Excellent :meow:</text>
</message>
<message>
  <ts>2020-09-17T01:03:34.663000</ts>
  <user>Daevion</user>
  <text>check out `racketscaffold`It might be a useful way of customising code generation from templates.to install;```% raco pkg install racketscaffold```to create a package: ```raco scaffold package d Some new package V 1.0 l MIT r markdown L racket/base u me e me@example.com myname```I\'m a bit worried it might overcomplicate things and break the github functionality.</text>
</message>
<message>
  <ts>2020-09-17T14:13:01.507000</ts>
  <user>Daevion</user>
  <text>[Announcement/update] rackettemplatesThank you to those who provided feedback and contributed code yesterday but we still need users to try out the tool on different platforms; linux windows &amp; macos. Just reply with a note saying platform and if it worked.You can install with `raco pkg install fromtemplate`Update with `raco pkg update fromtemplate`changes:  you can now use the command new as in `raco new lang mylang` there is now a `#lang` template `lang` ( from `samth/xlang` courtesy of the author @samth )Please try it out and let us know if the thread if you succeed or failKind regards,Stephen</text>
</message>
<message>
  <ts>2020-09-17T16:08:40.600000</ts>
  <user>Alyiah</user>
  <text>I'll give the `#lang` template a shot later üëç</text>
</message>
<message>
  <ts>2020-09-17T22:31:23.751000</ts>
  <user>Daevion</user>
  <text>I've renamed the `xlang` template as `lang`</text>
</message>
<message>
  <ts>2020-09-18T03:57:14.207000</ts>
  <user>Breno</user>
  <text>does `#lang datalog` have support for lists? or will I need to homeroll them?</text>
</message>
<message>
  <ts>2020-09-18T04:03:13.660000</ts>
  <user>Breno</user>
  <text>I know racklog has a larger syntax but it doesnt have support for retractions which is somethig I needed</text>
</message>
<message>
  <ts>2020-09-18T04:36:36.238000</ts>
  <user>Kiam</user>
  <text>I don't think datalog has any builtin list support</text>
</message>
<message>
  <ts>2020-09-18T04:36:55.699000</ts>
  <user>Alyiah</user>
  <text>It doesn't I was messing around with it a couple weeks ago</text>
</message>
<message>
  <ts>2020-09-18T04:37:15.046000</ts>
  <user>Cortlin</user>
  <text>It's very easy to import Racket stuff into Datalog fortunately.</text>
</message>
<message>
  <ts>2020-09-18T04:37:51.461000</ts>
  <user>Cortlin</user>
  <text>This should work (from the top of my head):```Prolog#lang datalog(racket/base).list(0 1 2).```</text>
</message>
<message>
  <ts>2020-09-18T04:39:35.347000</ts>
  <user>Kiam</user>
  <text>wait really? I thought it was only racklog that supported that kind of embedding</text>
</message>
<message>
  <ts>2020-09-18T04:40:07.045000</ts>
  <user>Kiam</user>
  <text>whoa you're totally right</text>
</message>
<message>
  <ts>2020-09-18T04:41:23.014000</ts>
  <user>Kiam</user>
  <text>&gt; A requirement is a `(` then an identifier then `)` then `.` and it imports functions that can be called as external queries.&gt; &gt; An external query is a variable then `:` then an identifier then a parenthesized list of comma separated terms. Beware that an external query can break Datalog‚Äôs termination guarantee.</text>
</message>
<message>
  <ts>2020-09-18T04:41:54.626000</ts>
  <user>Kiam</user>
  <text>https://docs.racketlang.org/datalog/datalog.html</text>
</message>
<message>
  <ts>2020-09-18T04:44:04.131000</ts>
  <user>Cortlin</user>
  <text>üò∏</text>
</message>
<message>
  <ts>2020-09-18T16:21:38.677000</ts>
  <user>Bexon</user>
  <text>@notjack what‚Äôs the usecase for rebellion? it kinda looks like CL‚Äôs alexandria to be honest</text>
</message>
<message>
  <ts>2020-09-18T16:22:41.862000</ts>
  <user>Bexon</user>
  <text>I mean is it more for when you‚Äôre using a custom #lang and need some goodies or stdlib++ (like alexandria)?</text>
</message>
<message>
  <ts>2020-09-18T18:10:21.278000</ts>
  <user>Kiam</user>
  <text>it's more stdlib++</text>
</message>
<message>
  <ts>2020-09-18T18:15:40.743000</ts>
  <user>Britten</user>
  <text>https://tenor.com/view/whynotbothgif11478682</text>
</message>
<message>
  <ts>2020-09-18T19:20:57.781000</ts>
  <user>Marshawn</user>
  <text>Quick question how is `if` implemented? Is it a primitive or a macro that is lowered to a thunk or something?</text>
</message>
<message>
  <ts>2020-09-18T19:24:31.615000</ts>
  <user>Kiam</user>
  <text>it's a primitive</text>
</message>
<message>
  <ts>2020-09-18T19:25:10.772000</ts>
  <user>Kiam</user>
  <text>you can check by looking at the grammar for fully expanded programs https://docs.racketlang.org/reference/syntaxmodel.html#%28part._fullyexpanded%29</text>
</message>
<message>
  <ts>2020-09-18T19:28:25.820000</ts>
  <user>Marshawn</user>
  <text>Coolio thanks!</text>
</message>
<message>
  <ts>2020-09-22T02:33:21.311000</ts>
  <user>Catori</user>
  <text>https://docs.racketlang.org/bestfit/index.html</text>
</message>
<message>
  <ts>2020-09-22T02:33:26.983000</ts>
  <user>Catori</user>
  <text>i wonder why this needs to be non negative</text>
</message>
<message>
  <ts>2020-09-25T00:48:03.426000</ts>
  <user>Kiam</user>
  <text>cool thing I want to make inspired by an earlier convo in #help : sliding window transducer``` &gt; (transduce (list 1 2 3 4 5) (windowing 3) #:into intolist) (list (list 1 2 3) (list 2 3 4) (list 3 4 5))```</text>
</message>
<message>
  <ts>2020-09-25T00:49:39.658000</ts>
  <user>Kiam</user>
  <text>optionally with a way to collect the windows into things other than lists``` &gt; (transduce (list 1 2 3 4 5) (windowing 3 #:into intovector) #:into intolist) (list (vector 1 2 3) (vector 2 3 4) (vector 3 4 5))```</text>
</message>
<message>
  <ts>2020-09-25T02:34:41.055000</ts>
  <user>Kiam</user>
  <text>mentioned this in the racket slack as well but I got `windowing` working!</text>
</message>
<message>
  <ts>2020-09-25T04:41:50.504000</ts>
  <user>Britten</user>
  <text>@notjack I really thought you had already made a windowing type transducer</text>
</message>
<message>
  <ts>2020-09-25T04:41:58.032000</ts>
  <user>Kiam</user>
  <text>me too!</text>
</message>
<message>
  <ts>2020-09-25T04:42:23.463000</ts>
  <user>Britten</user>
  <text>Now I have to check to see if I made one that I never contributed üò¶</text>
</message>
<message>
  <ts>2020-09-25T04:52:22.420000</ts>
  <user>Kiam</user>
  <text>I think I made one in my _other_ transducers library buried in my personal labs repo</text>
</message>
<message>
  <ts>2020-09-25T04:52:35.225000</ts>
  <user>Kiam</user>
  <text>when I was still experimenting with the whole idea</text>
</message>
<message>
  <ts>2020-09-25T04:52:43.331000</ts>
  <user>Kiam</user>
  <text>(of transducers I mean)</text>
</message>
<message>
  <ts>2020-09-25T10:04:35.965000</ts>
  <user>Cortlin</user>
  <text>@notjack ah this was the one</text>
</message>
<message>
  <ts>2020-09-25T10:04:42.438000</ts>
  <user>Cortlin</user>
  <text>I wanted help with</text>
</message>
<message>
  <ts>2020-09-25T10:04:58.698000</ts>
  <user>Cortlin</user>
  <text>at the end I gave up because I'm pretty sure racket/lsip languages aren't meant for this sorta dataprocessing</text>
</message>
<message>
  <ts>2020-09-25T10:06:00.903000</ts>
  <user>Kiam</user>
  <text>it is now! https://docs.racketlang.org/rebellion/Transducers.html#%28def._%28%28lib._rebellion%2Fstreaming%2Ftransducer..rkt%29._windowing%29%29</text>
</message>
<message>
  <ts>2020-09-25T10:06:26.250000</ts>
  <user>Kiam</user>
  <text>less flippantly: I think this is more a question of libraries than languages</text>
</message>
<message>
  <ts>2020-09-25T10:26:00.008000</ts>
  <user>Bexon</user>
  <text>yeah lisps are really good for data processing</text>
</message>
<message>
  <ts>2020-09-25T10:26:26.120000</ts>
  <user>Bexon</user>
  <text>isn‚Äôt it one of their biggest pros even?</text>
</message>
<message>
  <ts>2020-09-25T11:59:22.192000</ts>
  <user>Daevion</user>
  <text>Lisp enthusiasts will tell you Lisp is good for everything</text>
</message>
<message>
  <ts>2020-09-25T12:00:38.536000</ts>
  <user>Daevion</user>
  <text>(That includes scheme enthusiasts )</text>
</message>
<message>
  <ts>2020-09-25T12:13:59.048000</ts>
  <user>Bexon</user>
  <text>I\'d say lisp (and ML family) languages are good for anything but embedded realtime very few resources type of thing</text>
</message>
<message>
  <ts>2020-09-25T12:14:14.336000</ts>
  <user>Bexon</user>
  <text>you might not even have a heap in this scenario</text>
</message>
<message>
  <ts>2020-09-25T12:16:45.512000</ts>
  <user>Daevion</user>
  <text>I dare you to ask about ‚Äòembedded realtime lisp‚Äô on r/lisp ü§£ (I‚Äôm joking  don‚Äôt do it  it‚Äôs just trolling and unkind.)</text>
</message>
<message>
  <ts>2020-09-25T12:17:21.878000</ts>
  <user>Daevion</user>
  <text>https://tenor.com/view/oldmanyellsatcloudyellingoldmannewsthesimpsonsgif17741451</text>
</message>
<message>
  <ts>2020-09-25T12:18:18.530000</ts>
  <user>Bexon</user>
  <text>but also the truth is most of us won't have to ever deal with such a system</text>
</message>
<message>
  <ts>2020-09-25T12:18:22.803000</ts>
  <user>Bexon</user>
  <text>so :^)</text>
</message>
<message>
  <ts>2020-09-25T12:19:05.226000</ts>
  <user>Bexon</user>
  <text>well maybe not deal as we all have cellphones  write software for"</text>
</message>
<message>
  <ts>2020-09-25T12:23:02.432000</ts>
  <user>Daevion</user>
  <text>I don‚Äôt know? There are so many single board computers the size of a credit card and dirt cheap  DrRacket runs fine on the raspberry pi. I think what counts as embedded is changing. i‚Äôm thinking about getting a macro pad kit that runs Linux! To drive 16 keys. I think it runs python.</text>
</message>
<message>
  <ts>2020-09-25T12:33:44.157000</ts>
  <user>Bexon</user>
  <text>yeah I was thinking something more constrained</text>
</message>
<message>
  <ts>2020-09-25T12:34:17.543000</ts>
  <user>Bexon</user>
  <text>like that chip in your phone that processes data from cell towers</text>
</message>
<message>
  <ts>2020-09-25T12:36:02.043000</ts>
  <user>Daevion</user>
  <text>Yeah.</text>
</message>
<message>
  <ts>2020-09-25T12:36:20.453000</ts>
  <user>Bexon</user>
  <text>I had a good article about this somewhere I can't find it now :(</text>
</message>
<message>
  <ts>2020-09-25T12:36:32.241000</ts>
  <user>Daevion</user>
  <text>The curse of the information age</text>
</message>
<message>
  <ts>2020-09-25T12:36:50.821000</ts>
  <user>Bexon</user>
  <text>too many good articles with poor SEO</text>
</message>
<message>
  <ts>2020-09-25T12:38:44.330000</ts>
  <user>Daevion</user>
  <text>You now have me wondering what the smallest device where I can run Racket.</text>
</message>
<message>
  <ts>2020-09-25T12:39:30.598000</ts>
  <user>Daevion</user>
  <text>(I may buy that macro pad just so I can replace python with racket to do my keyboard macros)</text>
</message>
<message>
  <ts>2020-09-25T12:39:53.572000</ts>
  <user>Daevion</user>
  <text>ü§™</text>
</message>
<message>
  <ts>2020-09-25T12:40:51.747000</ts>
  <user>Bexon</user>
  <text>raspberry pi zero?</text>
</message>
<message>
  <ts>2020-09-25T12:41:14.497000</ts>
  <user>Bexon</user>
  <text>well it won't run on arduino but you could compile to their Clike language lol</text>
</message>
<message>
  <ts>2020-09-25T12:41:37.451000</ts>
  <user>Daevion</user>
  <text>Pizero yes.</text>
</message>
<message>
  <ts>2020-09-25T12:42:52.967000</ts>
  <user>Daevion</user>
  <text>&gt; well it won't run on arduino but you could compile to their Clike language lol@sarna I love that ASI64 project where the guy wrote a 6502 assembler in Racket to make c64 games.</text>
</message>
<message>
  <ts>2020-09-25T12:44:14.635000</ts>
  <user>Bexon</user>
  <text>link please üëÄ</text>
</message>
<message>
  <ts>2020-09-25T12:45:15.084000</ts>
  <user>Daevion</user>
  <text>https://pezipink.itch.io/c64robotfindskitten</text>
</message>
<message>
  <ts>2020-09-25T12:45:30.104000</ts>
  <user>Bexon</user>
  <text>thanks üëÄ</text>
</message>
<message>
  <ts>2020-09-25T12:45:44.324000</ts>
  <user>Bexon</user>
  <text>I remember someone optimizing their assembly code with a racket lang</text>
</message>
<message>
  <ts>2020-09-25T12:45:50.705000</ts>
  <user>Bexon</user>
  <text>rosette probably?</text>
</message>
<message>
  <ts>2020-09-25T12:46:48.053000</ts>
  <user>Daevion</user>
  <text>Maybe @sorawee on slack? He‚Äôs the only one that I know who uses Rosette</text>
</message>
<message>
  <ts>2020-09-25T12:48:42.923000</ts>
  <user>Daevion</user>
  <text>I like the idea of compiling Racket to another language but to do it well I‚Äôd need to know the other language well. (And I don‚Äôt know any language well enough to do that)</text>
</message>
<message>
  <ts>2020-09-25T13:04:20.231000</ts>
  <user>Bexon</user>
  <text>found it  it was whitequark</text>
</message>
<message>
  <ts>2020-09-25T13:04:21.147000</ts>
  <user>Bexon</user>
  <text>https://lab.whitequark.org/notes/20200406/synthesizingoptimal8051code/</text>
</message>
<message>
  <ts>2020-09-25T13:08:43.060000</ts>
  <user>Daevion</user>
  <text>Thanks for that</text>
</message>
<message>
  <ts>2020-09-25T13:19:01.476000</ts>
  <user>Bexon</user>
  <text>on one hand I'm missing emotes other than :meow: here</text>
</message>
<message>
  <ts>2020-09-25T13:19:21.549000</ts>
  <user>Bexon</user>
  <text>on the other hand it's kinda fun when :meow: is the only feeling you experience</text>
</message>
<message>
  <ts>2020-09-25T13:19:45.799000</ts>
  <user>Daevion</user>
  <text>I though you could add new ones</text>
</message>
<message>
  <ts>2020-09-25T13:20:08.794000</ts>
  <user>Bexon</user>
  <text>oh I can!</text>
</message>
<message>
  <ts>2020-09-25T13:20:17.847000</ts>
  <user>Bexon</user>
  <text>hm that's a lot of power to give your members</text>
</message>
<message>
  <ts>2020-09-25T13:20:28.434000</ts>
  <user>Daevion</user>
  <text>(I feel like I have made a grave mistake)</text>
</message>
<message>
  <ts>2020-09-25T13:20:32.516000</ts>
  <user>Daevion</user>
  <text>ü§£</text>
</message>
<message>
  <ts>2020-09-25T13:20:48.742000</ts>
  <user>Cortlin</user>
  <text>I once wrote a clone of that game in CHICKEN Scheme.</text>
</message>
<message>
  <ts>2020-09-25T13:20:52.516000</ts>
  <user>Cortlin</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-25T13:21:06.836000</ts>
  <user>Daevion</user>
  <text>What game?</text>
</message>
<message>
  <ts>2020-09-25T13:21:13.227000</ts>
  <user>Cortlin</user>
  <text>robotfindskitten</text>
</message>
<message>
  <ts>2020-09-25T13:21:27.056000</ts>
  <user>Daevion</user>
  <text>Link please</text>
</message>
<message>
  <ts>2020-09-25T13:21:50.689000</ts>
  <user>Cortlin</user>
  <text>https://github.com/erkin/robotfindschicken</text>
</message>
<message>
  <ts>2020-09-25T13:22:07.439000</ts>
  <user>Cortlin</user>
  <text>The code is ugly because I was using it to learn Scheme.</text>
</message>
<message>
  <ts>2020-09-25T13:22:29.656000</ts>
  <user>Bexon</user>
  <text>lol the description</text>
</message>
<message>
  <ts>2020-09-25T13:25:43.945000</ts>
  <user>Bexon</user>
  <text>by the way I noticed a pattern in my behaviorwhenever I code in a language focused on correctness (like OCaml Haskell or Rust) I‚Äôm very reluctant to use any hacks and tend to think hard about modeling my problem ‚Äújust right‚Äùwith ‚Äúlooser‚Äù languages (like Racket or Python) I tend to just ‚Äúwell whatever‚Äù through the problemwhile the first approach tends to produce more quality code it takes a lot more time and I most often abandon the project because I can‚Äôt model something nicely :meow:</text>
</message>
<message>
  <ts>2020-09-25T13:26:08.460000</ts>
  <user>Bexon</user>
  <text>anyone else experienced that? :meow:</text>
</message>
<message>
  <ts>2020-09-25T13:28:34.600000</ts>
  <user>Cortlin</user>
  <text>I forgot to add the Makefile back to the repo it seems...</text>
</message>
<message>
  <ts>2020-09-25T13:28:59.117000</ts>
  <user>Cortlin</user>
  <text>Anyway the experience is practically the same as robotfindskitten.</text>
</message>
<message>
  <ts>2020-09-25T13:29:05.106000</ts>
  <user>Cortlin</user>
  <text>Here's the interesting part: https://github.com/erkin/robotfindschicken/blob/master/src/const.scm#L36</text>
</message>
<message>
  <ts>2020-09-25T13:31:19.999000</ts>
  <user>Zayne</user>
  <text>I spend a lot of time in Racket trying to model my problem just right :D</text>
</message>
<message>
  <ts>2020-09-25T13:32:30.609000</ts>
  <user>Zayne</user>
  <text>I use expressive contracts and then it\'s slow lol and I\'m currently thinking about how to work around that just right</text>
</message>
<message>
  <ts>2020-09-25T13:32:52.039000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-25T13:33:11.254000</ts>
  <user>Bexon</user>
  <text>it can't be as bad as trying to model the whole application with OCaml's functors and firstclass modules</text>
</message>
<message>
  <ts>2020-09-25T13:33:15.033000</ts>
  <user>Bexon</user>
  <text>they also have objects..</text>
</message>
<message>
  <ts>2020-09-25T13:33:21.375000</ts>
  <user>Zayne</user>
  <text>speaking of that emote what does it mean to you? I\'m never sure if it\'s a smile or a welp or a come at me</text>
</message>
<message>
  <ts>2020-09-25T13:33:24.122000</ts>
  <user>Bexon</user>
  <text>each decision comes with a tradeoff :meow:</text>
</message>
<message>
  <ts>2020-09-25T13:33:39.102000</ts>
  <user>Cortlin</user>
  <text>It's a very generic emote for me.</text>
</message>
<message>
  <ts>2020-09-25T13:34:11.089000</ts>
  <user>Bexon</user>
  <text>either I just ate lemon or smiling through pain</text>
</message>
<message>
  <ts>2020-09-25T13:34:26.759000</ts>
  <user>Zayne</user>
  <text>lol that makes sense</text>
</message>
<message>
  <ts>2020-09-25T13:34:43.570000</ts>
  <user>Cortlin</user>
  <text>I use it when I want to express a feeling but don't feel like articulating it.</text>
</message>
<message>
  <ts>2020-09-25T13:34:45.958000</ts>
  <user>Cortlin</user>
  <text>Or simply can't.</text>
</message>
<message>
  <ts>2020-09-25T13:35:19.433000</ts>
  <user>Daevion</user>
  <text>thats the cat from that meme isnt it ?</text>
</message>
<message>
  <ts>2020-09-25T13:35:20.276000</ts>
  <user>Cortlin</user>
  <text>Also takes the place of several interjections like hmm bruh wow ugh huh? ehh ouch etc</text>
</message>
<message>
  <ts>2020-09-25T13:35:49.826000</ts>
  <user>Cortlin</user>
  <text>Essentially a linguistic filler.</text>
</message>
<message>
  <ts>2020-09-25T13:35:50.964000</ts>
  <user>Daevion</user>
  <text>there is an angry woman? three panels I think?</text>
</message>
<message>
  <ts>2020-09-25T13:35:56.519000</ts>
  <user>Cortlin</user>
  <text>Oh no this is a different one.</text>
</message>
<message>
  <ts>2020-09-25T13:36:09.092000</ts>
  <user>Zayne</user>
  <text>thank you this clarifies it greatly for me lol</text>
</message>
<message>
  <ts>2020-09-25T13:36:30.066000</ts>
  <user>Zayne</user>
  <text>I was wondering if it was that one with the angry woman</text>
</message>
<message>
  <ts>2020-09-25T13:36:39.002000</ts>
  <user>Cortlin</user>
  <text>None</text>
</message>
<message>
  <ts>2020-09-25T13:36:56.652000</ts>
  <user>Cortlin</user>
  <text>Just a very expressive cat whose expression is so vague as to carry any potential meaning.</text>
</message>
<message>
  <ts>2020-09-25T13:37:03.543000</ts>
  <user>Zayne</user>
  <text>lol</text>
</message>
<message>
  <ts>2020-09-25T13:37:10.348000</ts>
  <user>Bexon</user>
  <text>mentally I'm them</text>
</message>
<message>
  <ts>2020-09-25T13:37:32.326000</ts>
  <user>Zayne</user>
  <text>don\'t make that face at me what face :meow: </text>
</message>
<message>
  <ts>2020-09-25T13:38:59.997000</ts>
  <user>Bexon</user>
  <text>ü§£</text>
</message>
<message>
  <ts>2020-09-25T13:39:30.044000</ts>
  <user>Cortlin</user>
  <text>:meowblush:</text>
</message>
<message>
  <ts>2020-09-25T13:39:35.109000</ts>
  <user>Bexon</user>
  <text>:meowblush:</text>
</message>
<message>
  <ts>2020-09-25T13:39:48.687000</ts>
  <user>Bexon</user>
  <text>I love this</text>
</message>
<message>
  <ts>2020-09-25T13:39:55.878000</ts>
  <user>Daevion</user>
  <text>In my defence it could be the same cat</text>
</message>
<message>
  <ts>2020-09-25T13:40:00.422000</ts>
  <user>Daevion</user>
  <text>https://knowyourmeme.com/memes/womanyellingatacat</text>
</message>
<message>
  <ts>2020-09-25T13:40:26.810000</ts>
  <user>Cortlin</user>
  <text>Could be yeah. I researched a bit and couldn't find anything about the history of the :meow: cat.</text>
</message>
<message>
  <ts>2020-09-25T13:40:55.011000</ts>
  <user>Bexon</user>
  <text>allround talented</text>
</message>
<message>
  <ts>2020-09-25T13:43:12.052000</ts>
  <user>Daevion</user>
  <text>tis a good cat</text>
</message>
<message>
  <ts>2020-09-25T13:43:35.459000</ts>
  <user>Bexon</user>
  <text>who wants to help me writing bindings for this https://github.com/zserge/jsmn</text>
</message>
<message>
  <ts>2020-09-25T13:43:52.879000</ts>
  <user>Bexon</user>
  <text>so we can be faster than python</text>
</message>
<message>
  <ts>2020-09-25T13:43:54.821000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-25T13:44:38.140000</ts>
  <user>Bexon</user>
  <text>jokes I'll just read the docs on FFI and ask here</text>
</message>
<message>
  <ts>2020-09-25T13:44:54.975000</ts>
  <user>Daevion</user>
  <text>ok  not sure I'll be much help as callign my c knowledge minimal woudl be overstatign things</text>
</message>
<message>
  <ts>2020-09-25T13:45:48.130000</ts>
  <user>Cortlin</user>
  <text>Have you tried SWIG?</text>
</message>
<message>
  <ts>2020-09-25T13:46:06.012000</ts>
  <user>Cortlin</user>
  <text>It's unmaintained and old so it mightn't support the most recent C FFI.</text>
</message>
<message>
  <ts>2020-09-25T13:46:10.483000</ts>
  <user>Cortlin</user>
  <text>But could be worth a try.</text>
</message>
<message>
  <ts>2020-09-25T13:46:33.590000</ts>
  <user>Bexon</user>
  <text>it calls racket mzscheme :meow:</text>
</message>
<message>
  <ts>2020-09-25T13:46:45.514000</ts>
  <user>Cortlin</user>
  <text>Yes</text>
</message>
<message>
  <ts>2020-09-25T13:46:51.721000</ts>
  <user>Bexon</user>
  <text>I'll try it thanks</text>
</message>
<message>
  <ts>2020-09-25T13:46:58.920000</ts>
  <user>Cortlin</user>
  <text>CHICKEN Scheme has it easy; you can literally `include` C headers natively.</text>
</message>
<message>
  <ts>2020-09-25T13:50:49.203000</ts>
  <user>Bexon</user>
  <text>please don't tempt me</text>
</message>
<message>
  <ts>2020-09-25T13:50:51.117000</ts>
  <user>Bexon</user>
  <text>:meowblush:</text>
</message>
<message>
  <ts>2020-09-25T13:51:35.976000</ts>
  <user>Cortlin</user>
  <text>Oh wait SWIG is still maintained.</text>
</message>
<message>
  <ts>2020-09-25T13:51:46.971000</ts>
  <user>Cortlin</user>
  <text>Interesting.</text>
</message>
<message>
  <ts>2020-09-25T13:52:42.277000</ts>
  <user>Bexon</user>
  <text>didn't racket on chez change something wrt FFI?</text>
</message>
<message>
  <ts>2020-09-25T13:53:14.844000</ts>
  <user>Cortlin</user>
  <text>Yeah I think it's entirely different.</text>
</message>
<message>
  <ts>2020-09-25T13:53:49.093000</ts>
  <user>Bexon</user>
  <text>I heard good things about chez FFI though could be fun</text>
</message>
<message>
  <ts>2020-09-25T13:54:06.380000</ts>
  <user>Cortlin</user>
  <text>No idea if SWIG intends to support it. Wouldn't surprise me if they do though; there's Guile and CHICKEN support as well.</text>
</message>
<message>
  <ts>2020-09-25T13:54:17.908000</ts>
  <user>Cortlin</user>
  <text>Might be worth emailing them to ask about it.</text>
</message>
<message>
  <ts>2020-09-25T13:54:19.690000</ts>
  <user>Daevion</user>
  <text>I'm interested in learnng the racket(cs) ffi</text>
</message>
<message>
  <ts>2020-09-25T13:56:12.962000</ts>
  <user>Bexon</user>
  <text>don't look at me  I embarrassed myself on gambit's mailing list already never again :meowblush:</text>
</message>
<message>
  <ts>2020-09-25T13:57:49.854000</ts>
  <user>Daevion</user>
  <text>I nearly started a fight on the snap! forum this week.:meow:</text>
</message>
<message>
  <ts>2020-09-25T13:58:16.072000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-25T13:59:06.947000</ts>
  <user>Cortlin</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-25T14:01:53.087000</ts>
  <user>Daevion</user>
  <text>did the ffi change for CS? I'm just lookign at the overview and there is no mention/\\</text>
</message>
<message>
  <ts>2020-09-25T14:02:44.920000</ts>
  <user>Bexon</user>
  <text>@Deleted User it generated.. something :meow:</text>
</message>
<message>
  <ts>2020-09-25T14:03:45.990000</ts>
  <user>Bexon</user>
  <text>I don't think generating 2300 lines of wrappers for 200 lines of C is optimal</text>
</message>
<message>
  <ts>2020-09-25T14:03:50.209000</ts>
  <user>Bexon</user>
  <text>I'll do it by hand :meow:</text>
</message>
<message>
  <ts>2020-09-25T14:04:48.412000</ts>
  <user>Daevion</user>
  <text>You cant stop me using `:meow:` now.</text>
</message>
<message>
  <ts>2020-09-25T14:05:02.850000</ts>
  <user>Bexon</user>
  <text>we‚Äôre all :meow: now</text>
</message>
<message>
  <ts>2020-09-25T14:09:33.748000</ts>
  <user>Cortlin</user>
  <text>It's probably mostly boilerplate overhead. :meow:</text>
</message>
<message>
  <ts>2020-09-25T14:52:03.857000</ts>
  <user>Bexon</user>
  <text>@StephenD here are the differences https://docs.racketlang.org/inside/index.html</text>
</message>
<message>
  <ts>2020-09-25T14:52:13.047000</ts>
  <user>Bexon</user>
  <text>I think FFI is the same though :meow:</text>
</message>
<message>
  <ts>2020-09-25T14:53:22.680000</ts>
  <user>Daevion</user>
  <text>Thanks</text>
</message>
<message>
  <ts>2020-09-25T14:55:22.877000</ts>
  <user>Bexon</user>
  <text>I skimmed through the FFI page sounds awesome</text>
</message>
<message>
  <ts>2020-09-25T14:55:31.426000</ts>
  <user>Bexon</user>
  <text>I‚Äôll try to bind to this lib</text>
</message>
<message>
  <ts>2020-09-25T14:55:32.733000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-25T16:52:51.031000</ts>
  <user>Britten</user>
  <text>I don't think that library handles unicode in strings at all. It isn't decoding any \\U escapes</text>
</message>
<message>
  <ts>2020-09-25T16:53:33.415000</ts>
  <user>Britten</user>
  <text>Ahh it's a feature.</text>
</message>
<message>
  <ts>2020-09-25T16:53:44.683000</ts>
  <user>Britten</user>
  <text>&gt; jsmn is designed to be robust (it should work fine even with erroneous data)</text>
</message>
<message>
  <ts>2020-09-25T17:10:58.816000</ts>
  <user>Bexon</user>
  <text>if I had invalid unicode in the file my racket code would bail right? I‚Äôd be fine with that</text>
</message>
<message>
  <ts>2020-09-25T17:14:45.074000</ts>
  <user>Britten</user>
  <text>Yeah the Racket parser will bail out</text>
</message>
<message>
  <ts>2020-09-26T00:32:44.574000</ts>
  <user>Miquel</user>
  <text>Do you guys know if you can do code highlighting for racket on discord?</text>
</message>
<message>
  <ts>2020-09-26T00:33:31.463000</ts>
  <user>Miquel</user>
  <text>Like:```(define (addxanda x a) (+ x a))```making it appear like:</text>
</message>
<message>
  <ts>2020-09-26T00:33:49.485000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-09-26T00:33:54.375000</ts>
  <user>Miquel</user>
  <text>on discord</text>
</message>
<message>
  <ts>2020-09-26T00:34:53.735000</ts>
  <user>Kiam</user>
  <text>Yeah you have to add the word scheme right after the first three backticks</text>
</message>
<message>
  <ts>2020-09-26T00:35:10.264000</ts>
  <user>Miquel</user>
  <text>ooo</text>
</message>
<message>
  <ts>2020-09-26T00:35:12.782000</ts>
  <user>Miquel</user>
  <text>let me try</text>
</message>
<message>
  <ts>2020-09-26T00:35:13.631000</ts>
  <user>Kiam</user>
  <text>the highlighting doesn't show up on android however</text>
</message>
<message>
  <ts>2020-09-26T00:35:28.372000</ts>
  <user>Miquel</user>
  <text>```scheme(define (addxanda x a) (+ x a))```</text>
</message>
<message>
  <ts>2020-09-26T00:35:30.273000</ts>
  <user>Miquel</user>
  <text>Nice!</text>
</message>
<message>
  <ts>2020-09-26T00:35:33.483000</ts>
  <user>Miquel</user>
  <text>Thanks so much</text>
</message>
<message>
  <ts>2020-09-26T00:35:47.431000</ts>
  <user>Kiam</user>
  <text>```scheme(define (double x) ( x 2))```</text>
</message>
<message>
  <ts>2020-09-26T00:35:51.298000</ts>
  <user>Kiam</user>
  <text>welcome!</text>
</message>
<message>
  <ts>2020-09-26T00:36:23.352000</ts>
  <user>Miquel</user>
  <text>I kept typing in racket or drracket and it discord didn't recognize it lol</text>
</message>
<message>
  <ts>2020-09-26T00:38:07.154000</ts>
  <user>Miquel</user>
  <text>do you know if you can do it for single line code as well?</text>
</message>
<message>
  <ts>2020-09-26T00:39:30.803000</ts>
  <user>Kiam</user>
  <text>I don't know of any way to do it for inline code</text>
</message>
<message>
  <ts>2020-09-26T00:41:00.245000</ts>
  <user>Daevion</user>
  <text>https://support.discord.com/hc/enus/articles/210298617MarkdownText101ChatFormattingBoldItalicUnderline</text>
</message>
<message>
  <ts>2020-09-26T00:41:12.060000</ts>
  <user>Daevion</user>
  <text>There isn‚Äôt</text>
</message>
<message>
  <ts>2020-09-26T04:12:02.086000</ts>
  <user>Kiam</user>
  <text>on a transducer kick again!</text>
</message>
<message>
  <ts>2020-09-26T04:12:24.690000</ts>
  <user>Kiam</user>
  <text>I made one for finding _all_ of the greatest elements in a sequence rather than just one</text>
</message>
<message>
  <ts>2020-09-26T04:31:19.354000</ts>
  <user>Britten</user>
  <text>sorting + taking?</text>
</message>
<message>
  <ts>2020-09-26T05:11:22.799000</ts>
  <user>Kiam</user>
  <text>not quite. sort+take would be like take the top N things this is take the biggest thing. if multiple things are tied for biggest take all of them.</text>
</message>
<message>
  <ts>2020-09-26T10:15:09.091000</ts>
  <user>Bexon</user>
  <text>update regarding my FFI adventure: I couldn't even install these C parsers gave up :meow:</text>
</message>
<message>
  <ts>2020-09-26T11:21:47.278000</ts>
  <user>Cortlin</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-26T18:09:02.629000</ts>
  <user>Matt</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-27T03:12:09.995000</ts>
  <user>Avik</user>
  <text>Racketeers who use racket in a distributed sense with containers</text>
</message>
<message>
  <ts>2020-09-27T03:12:19.237000</ts>
  <user>Avik</user>
  <text>How do you attack your logging? Any products you use?</text>
</message>
<message>
  <ts>2020-09-27T03:12:23.367000</ts>
  <user>Avik</user>
  <text>Curious</text>
</message>
<message>
  <ts>2020-09-27T03:40:49.804000</ts>
  <user>Kiam</user>
  <text>I'd also like to hear from anyone with experience in that</text>
</message>
<message>
  <ts>2020-09-27T03:44:47.157000</ts>
  <user>Matt</user>
  <text>:meowloween:</text>
</message>
<message>
  <ts>2020-09-27T03:47:07.826000</ts>
  <user>Avik</user>
  <text>this is a good litmus test as to whether a language ecosystem has prod users who aren't in the research space lol</text>
</message>
<message>
  <ts>2020-09-27T03:47:10.112000</ts>
  <user>Avik</user>
  <text>but i am actually curiouys</text>
</message>
<message>
  <ts>2020-09-27T03:48:24.066000</ts>
  <user>Kiam</user>
  <text>there is definitely logging infrastructure available within the language the log receiver functionality is enough to implement configurable logging to stderr and syslog</text>
</message>
<message>
  <ts>2020-09-27T03:48:46.237000</ts>
  <user>Avik</user>
  <text>oh yeah for sure</text>
</message>
<message>
  <ts>2020-09-27T03:48:46.683000</ts>
  <user>Kiam</user>
  <text>I think I've heard of people hooking it up to log storage services before</text>
</message>
<message>
  <ts>2020-09-27T03:48:58.618000</ts>
  <user>Avik</user>
  <text>but clients for commercial log products</text>
</message>
<message>
  <ts>2020-09-27T03:49:06.705000</ts>
  <user>Avik</user>
  <text>the ones that let you track and do ci to measure occurances etc</text>
</message>
<message>
  <ts>2020-09-27T03:49:13.317000</ts>
  <user>Kiam</user>
  <text>ya</text>
</message>
<message>
  <ts>2020-09-27T03:50:03.367000</ts>
  <user>Kiam</user>
  <text>maybe check the package catalog for packages that implement clients to cloud logging services?</text>
</message>
<message>
  <ts>2020-09-27T03:50:33.906000</ts>
  <user>Kiam</user>
  <text>presumably if there any then their authors had a use for them and you could ask them how it went</text>
</message>
<message>
  <ts>2020-09-27T03:50:40.117000</ts>
  <user>Avik</user>
  <text>true</text>
</message>
<message>
  <ts>2020-09-27T03:50:48.782000</ts>
  <user>Avik</user>
  <text>or google racketeers who've published their tech stack</text>
</message>
<message>
  <ts>2020-09-27T03:51:01.945000</ts>
  <user>Avik</user>
  <text>i'm digging around atm</text>
</message>
<message>
  <ts>2020-09-27T03:51:23.023000</ts>
  <user>Kiam</user>
  <text>let me know if you find anyone I'm curious</text>
</message>
<message>
  <ts>2020-09-27T03:52:42.100000</ts>
  <user>Avik</user>
  <text>üôÇ</text>
</message>
<message>
  <ts>2020-09-27T03:56:39.775000</ts>
  <user>Avik</user>
  <text>oh baby https://pkgs.racketlang.org/package/racketdogstatsd</text>
</message>
<message>
  <ts>2020-09-27T19:41:48.728000</ts>
  <user>Britten</user>
  <text>I have sent data into Splunk HEC but it's generally adhoc and bespoke</text>
</message>
<message>
  <ts>2020-09-28T02:57:45.916000</ts>
  <user>Caycee</user>
  <text>Hi! I'm thinking of trying racket are there any fun projects you'd recommend to get familiar with racket?</text>
</message>
<message>
  <ts>2020-09-28T03:00:24.735000</ts>
  <user>Kiam</user>
  <text>Messing around with `pict` `pict3d` and animations can be really fun</text>
</message>
<message>
  <ts>2020-09-28T03:01:01.240000</ts>
  <user>Kiam</user>
  <text>There's something visceral about building graphical stuff in a REPL</text>
</message>
<message>
  <ts>2020-09-28T03:04:38.966000</ts>
  <user>Caycee</user>
  <text>What are contracts in racket?</text>
</message>
<message>
  <ts>2020-09-28T03:07:15.573000</ts>
  <user>Kiam</user>
  <text>They're like types but checked at runtime and they can do more than types usually do.</text>
</message>
<message>
  <ts>2020-09-28T03:08:04.303000</ts>
  <user>Caycee</user>
  <text>Are they like enums in ocaml/c?</text>
</message>
<message>
  <ts>2020-09-28T03:11:12.073000</ts>
  <user>Kiam</user>
  <text>No. They\'re more like checks in your code like this:```javavoid deleteIndex(List list int index) { if (index &lt; 0) { throw new IllegalArgumentException("index cannot be negative"); } if (index &gt;= list.size()) { throw new IllegalArgumentException("index must be smaller than the list size"); } ...}```</text>
</message>
<message>
  <ts>2020-09-28T03:14:47.567000</ts>
  <user>Kiam</user>
  <text>Racket contacts are an alternative to those sorts of explicit checks:```scheme(define/contract (deleteindex list index) (&gt;i ([list list?] [index (list) (integerin 0 ( (listsize list) 1))]) [_ void?]) ...)```</text>
</message>
<message>
  <ts>2020-09-28T03:17:42.718000</ts>
  <user>Caycee</user>
  <text>That made sense thanks!</text>
</message>
<message>
  <ts>2020-09-28T04:13:11.905000</ts>
  <user>Matt</user>
  <text>contracts are dope</text>
</message>
<message>
  <ts>2020-09-28T04:13:21.996000</ts>
  <user>Matt</user>
  <text>i got used to types too. i never tried typed racket ü§î</text>
</message>
<message>
  <ts>2020-09-28T13:49:38.181000</ts>
  <user>Bexon</user>
  <text>I wish we could get some contractbased static analysis</text>
</message>
<message>
  <ts>2020-09-28T17:48:24.405000</ts>
  <user>Cortlin</user>
  <text>So... static typing?</text>
</message>
<message>
  <ts>2020-09-28T18:01:32.806000</ts>
  <user>Alyiah</user>
  <text>Isn't that dependent types at that point?</text>
</message>
<message>
  <ts>2020-09-28T18:04:35.159000</ts>
  <user>Cortlin</user>
  <text>Typed Racket has experimental refinement types.</text>
</message>
<message>
  <ts>2020-09-28T18:04:43.229000</ts>
  <user>Cortlin</user>
  <text>https://docs.racketlang.org/tsreference/Experimental_Features.html</text>
</message>
<message>
  <ts>2020-09-28T18:33:43.111000</ts>
  <user>Bexon</user>
  <text>well I didn‚Äôt mean turning all contracts to [dependent] types</text>
</message>
<message>
  <ts>2020-09-28T18:37:48.641000</ts>
  <user>Bexon</user>
  <text>I‚Äôd like a complete (will never reject a correct program) unsound (will accept some incorrect programs) type systemas an aid basically</text>
</message>
<message>
  <ts>2020-09-28T18:38:36.974000</ts>
  <user>Bexon</user>
  <text>like ‚Äúthis will 100% not work you‚Äôre trying to pass a struct to `+`!‚Äù</text>
</message>
<message>
  <ts>2020-09-28T18:39:01.999000</ts>
  <user>Bexon</user>
  <text>so I get notified about these obvious silly mistakes earlier than at runtime when a contract fails</text>
</message>
<message>
  <ts>2020-09-28T18:40:12.452000</ts>
  <user>Bexon</user>
  <text>there are tools like this for python</text>
</message>
<message>
  <ts>2020-09-28T18:40:51.904000</ts>
  <user>Bexon</user>
  <text>but they either have to infer the types or you have to specify themthing I‚Äôm talking about would infer them either from the contracts (if available) or the code</text>
</message>
<message>
  <ts>2020-09-28T18:41:53.576000</ts>
  <user>Bexon</user>
  <text>CS people don‚Äôt seem to like unsound type systems though :/</text>
</message>
<message>
  <ts>2020-09-28T19:22:33.867000</ts>
  <user>Matt</user>
  <text>id love an unsound type system üò±</text>
</message>
<message>
  <ts>2020-09-28T19:22:54.184000</ts>
  <user>Matt</user>
  <text>i mean thats kind of what contracts feel like</text>
</message>
<message>
  <ts>2020-09-28T19:23:10.451000</ts>
  <user>Matt</user>
  <text>tbh i think contracts are better because they‚Äôre written where they matter when you‚Äôre exporting</text>
</message>
<message>
  <ts>2020-09-28T19:23:14.716000</ts>
  <user>Matt</user>
  <text>am I right?</text>
</message>
<message>
  <ts>2020-09-28T19:25:24.557000</ts>
  <user>Matt</user>
  <text>allowing u to be unsafe if you want to</text>
</message>
<message>
  <ts>2020-09-28T19:27:35.181000</ts>
  <user>Matt</user>
  <text>uf but contracts are runtime right?</text>
</message>
<message>
  <ts>2020-09-28T19:35:24.683000</ts>
  <user>Bexon</user>
  <text>oh yeah I think contracts are complete and unsound too</text>
</message>
<message>
  <ts>2020-09-28T19:35:37.601000</ts>
  <user>Bexon</user>
  <text>TR is sound and incomplete</text>
</message>
<message>
  <ts>2020-09-28T19:36:04.190000</ts>
  <user>Bexon</user>
  <text>and yeah contracts are runtime checks  but some you could use at compiletime too</text>
</message>
<message>
  <ts>2020-09-28T19:37:00.702000</ts>
  <user>Bexon</user>
  <text>like this example:```scheme(define/contract (deposit amount) (&gt; number? any) ; implementation goes here ....)```</text>
</message>
<message>
  <ts>2020-09-28T19:37:41.933000</ts>
  <user>Bexon</user>
  <text>if you pass a string literal to this function something could warn you before you run the program :meow:</text>
</message>
<message>
  <ts>2020-09-28T19:38:46.544000</ts>
  <user>Bexon</user>
  <text>raku has these two mechanisms in their compiler (contracts + some static analysis) and it‚Äôs kinda confusing because you don‚Äôt know what gets checked when</text>
</message>
<message>
  <ts>2020-09-28T19:38:57.128000</ts>
  <user>Bexon</user>
  <text>if it was a separate tool it‚Äôd be neato</text>
</message>
<message>
  <ts>2020-09-28T20:13:27.394000</ts>
  <user>Matt</user>
  <text>true</text>
</message>
<message>
  <ts>2020-09-28T21:23:22.012000</ts>
  <user>Kiam</user>
  <text>complete and unsound static checkers have a huge problem: if you improve them to catch more errors you break existing code that used to compile fine</text>
</message>
<message>
  <ts>2020-09-28T21:23:50.640000</ts>
  <user>Kiam</user>
  <text>this is usually why type systems start from the other direction of rejecting too many programs rather than too few</text>
</message>
<message>
  <ts>2020-09-28T21:24:06.397000</ts>
  <user>Kiam</user>
  <text>it's much easier to change a static check to admit more programs than to admit fewer</text>
</message>
<message>
  <ts>2020-09-29T06:08:37.976000</ts>
  <user>Bexon</user>
  <text>doesn‚Äôt ‚Äúcomplete‚Äù mean it never rejects a correct program?</text>
</message>
<message>
  <ts>2020-09-29T06:10:35.772000</ts>
  <user>Kiam</user>
  <text>complete means never rejects a program that would run without error which is not always what people mean when they say correct</text>
</message>
<message>
  <ts>2020-09-29T06:11:45.913000</ts>
  <user>Bexon</user>
  <text>well having mypy spew an error doesn‚Äôt prevent me from running my code and getting an exception in my face :meow:</text>
</message>
<message>
  <ts>2020-09-29T06:12:23.156000</ts>
  <user>Kiam</user>
  <text>correct but mypy doesn't show you type errors for code that you know _won't_ throw an exception</text>
</message>
<message>
  <ts>2020-09-29T06:15:15.252000</ts>
  <user>Kiam</user>
  <text>example:```String foo() { boolean returnEarly = true; if (returnEarly) { return foo"; } return 42;}```This function will never throw an exception. Most type systems however would reject it.</text>
</message>
<message>
  <ts>2020-09-29T06:16:01.806000</ts>
  <user>Kiam</user>
  <text>A complete type system cannot reject it because it can\'t prove it will throw an exception (because it doesn\'t)</text>
</message>
<message>
  <ts>2020-09-29T06:17:39.955000</ts>
  <user>Kiam</user>
  <text>(by throw an exception I mean fuck up and return results of the wrong type which I\'m assuming will cause something somewhere to throw an exception")</text>
</message>
<message>
  <ts>2020-09-29T06:18:39.160000</ts>
  <user>Bexon</user>
  <text>well yes that‚Äôs exactly what I meant ü§î</text>
</message>
<message>
  <ts>2020-09-29T06:19:05.240000</ts>
  <user>Bexon</user>
  <text>could you maybe rephrase ‚Äúcorrect but mypy doesn't show you type errors for code that you know _won't_ throw an exception‚Äù? it‚Äôs early in the morning and I don‚Äôt think I got it :meow:</text>
</message>
<message>
  <ts>2020-09-29T06:20:40.865000</ts>
  <user>Kiam</user>
  <text>That function `foo` _does not cause any runtime type errors_ ever. It is a valid program. However it won't compile in languages like Java C# rust haskell or even C. So those languages have type systems that prevent you from running some valid programs.</text>
</message>
<message>
  <ts>2020-09-29T06:22:20.066000</ts>
  <user>Bexon</user>
  <text>yes their type systems are incomplete right?</text>
</message>
<message>
  <ts>2020-09-29T06:22:28.062000</ts>
  <user>Kiam</user>
  <text>Right</text>
</message>
<message>
  <ts>2020-09-29T06:22:28.131000</ts>
  <user>Bexon</user>
  <text>and all are sound (not sure about C)</text>
</message>
<message>
  <ts>2020-09-29T06:22:36.787000</ts>
  <user>Bexon</user>
  <text>then I got it ü§î</text>
</message>
<message>
  <ts>2020-09-29T06:23:12.303000</ts>
  <user>Kiam</user>
  <text>They're mostly sound. Proving soundness of type systems for real world programming languages is complex and hard</text>
</message>
<message>
  <ts>2020-09-29T06:23:24.167000</ts>
  <user>Kiam</user>
  <text>They at least try to be sound most of the time</text>
</message>
<message>
  <ts>2020-09-29T06:23:49.404000</ts>
  <user>Kiam</user>
  <text>(C is extremely not sound however)</text>
</message>
<message>
  <ts>2020-09-29T06:26:28.299000</ts>
  <user>Bexon</user>
  <text>I think java had a soundness hole that was fixed? iirc</text>
</message>
<message>
  <ts>2020-09-29T06:26:43.326000</ts>
  <user>Bexon</user>
  <text>well all compilers have bugs even if they claim to be sound and stuff</text>
</message>
<message>
  <ts>2020-09-29T06:26:59.434000</ts>
  <user>Kiam</user>
  <text>And they all allow FFI stuff so ü§∑</text>
</message>
<message>
  <ts>2020-09-29T06:27:10.442000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-29T06:27:21.753000</ts>
  <user>Kiam</user>
  <text>soundness can have some practical obstacles</text>
</message>
<message>
  <ts>2020-09-29T06:28:10.593000</ts>
  <user>Bexon</user>
  <text>hope I don‚Äôt turn into Rich Hickey because of stuff like that :meow:</text>
</message>
<message>
  <ts>2020-09-29T06:28:48.342000</ts>
  <user>Kiam</user>
  <text>yeah I would say that the practical obstacles of soundness pale in comparison to the obstacles of unsoundness</text>
</message>
<message>
  <ts>2020-09-29T06:33:20.884000</ts>
  <user>Bexon</user>
  <text>can a dynamically typed system be sound?</text>
</message>
<message>
  <ts>2020-09-29T06:33:26.017000</ts>
  <user>Bexon</user>
  <text>or is it only for static types</text>
</message>
<message>
  <ts>2020-09-29T06:36:50.117000</ts>
  <user>Kiam</user>
  <text>I think the term only makes sense in the context of static checkers</text>
</message>
<message>
  <ts>2020-09-29T06:38:54.673000</ts>
  <user>Bexon</user>
  <text>hm okay</text>
</message>
<message>
  <ts>2020-09-29T06:40:06.768000</ts>
  <user>Kiam</user>
  <text>(I'm also far from an expert on type systems)</text>
</message>
<message>
  <ts>2020-09-29T07:00:40.934000</ts>
  <user>Bexon</user>
  <text>yeah I‚Äôm an armchair computer scientist :meow:</text>
</message>
<message>
  <ts>2020-09-29T07:33:23.471000</ts>
  <user>Cortlin</user>
  <text>me 2</text>
</message>
<message>
  <ts>2020-09-29T12:50:44.934000</ts>
  <user>Bexon</user>
  <text>I just wrote python in racket</text>
</message>
<message>
  <ts>2020-09-29T12:50:54.029000</ts>
  <user>Bexon</user>
  <text>was way easier than I thought :meow:</text>
</message>
<message>
  <ts>2020-09-29T12:51:25.990000</ts>
  <user>Daevion</user>
  <text>What do you mean?</text>
</message>
<message>
  <ts>2020-09-29T12:51:28.178000</ts>
  <user>Bexon</user>
  <text>it's for work but this should give you the idea</text>
</message>
<message>
  <ts>2020-09-29T12:51:46.050000</ts>
  <user>Bexon</user>
  <text>I also used a box to keep track of state :meow:</text>
</message>
<message>
  <ts>2020-09-29T12:53:23.797000</ts>
  <user>Daevion</user>
  <text>Mmmm. Nested `for` loops.</text>
</message>
<message>
  <ts>2020-09-29T12:53:57.354000</ts>
  <user>Daevion</user>
  <text>But at least you are writing racket for work!</text>
</message>
<message>
  <ts>2020-09-29T12:56:52.620000</ts>
  <user>Bexon</user>
  <text>hope my manager doesn't ask me to upload this script anywhere :meow:</text>
</message>
<message>
  <ts>2020-09-29T12:57:13.457000</ts>
  <user>Daevion</user>
  <text>Just compile it.</text>
</message>
<message>
  <ts>2020-09-29T12:57:30.568000</ts>
  <user>Cortlin</user>
  <text>Haha</text>
</message>
<message>
  <ts>2020-09-29T13:01:05.820000</ts>
  <user>Bexon</user>
  <text>lol</text>
</message>
<message>
  <ts>2020-09-29T13:01:11.935000</ts>
  <user>Bexon</user>
  <text>compile it and tell him I wrote in go</text>
</message>
<message>
  <ts>2020-09-29T13:01:16.930000</ts>
  <user>Bexon</user>
  <text>always works :meow:</text>
</message>
<message>
  <ts>2020-09-29T13:01:34.619000</ts>
  <user>Daevion</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-29T13:02:35.659000</ts>
  <user>Cortlin</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-29T13:12:46.838000</ts>
  <user>Bexon</user>
  <text>it works! :meow:</text>
</message>
<message>
  <ts>2020-09-29T13:13:01.282000</ts>
  <user>Bexon</user>
  <text>I mean the script not the golang coverup</text>
</message>
<message>
  <ts>2020-09-29T13:16:27.807000</ts>
  <user>Bexon</user>
  <text>the only thing I miss from python is `getpass`</text>
</message>
<message>
  <ts>2020-09-29T13:16:35.597000</ts>
  <user>Bexon</user>
  <text>for now I'm just using an `.env` file</text>
</message>
<message>
  <ts>2020-09-29T13:27:51.143000</ts>
  <user>Daevion</user>
  <text>What does get pass do?</text>
</message>
<message>
  <ts>2020-09-29T13:29:43.720000</ts>
  <user>Bexon</user>
  <text>gets a password from the terminal</text>
</message>
<message>
  <ts>2020-09-29T13:30:08.510000</ts>
  <user>Bexon</user>
  <text>(without showing what user types)</text>
</message>
<message>
  <ts>2020-09-29T13:31:13.018000</ts>
  <user>Cortlin</user>
  <text>um https://docs.racketlang.org/getpass/index.html</text>
</message>
<message>
  <ts>2020-09-29T13:34:00.069000</ts>
  <user>Bexon</user>
  <text>_facepalms_</text>
</message>
<message>
  <ts>2020-09-29T13:34:21.694000</ts>
  <user>Bexon</user>
  <text>I searched for pass password getpass</text>
</message>
<message>
  <ts>2020-09-29T13:34:26.929000</ts>
  <user>Bexon</user>
  <text>thanks erkin :)</text>
</message>
<message>
  <ts>2020-09-29T13:35:26.222000</ts>
  <user>Cortlin</user>
  <text>No problem! :meowblush:</text>
</message>
<message>
  <ts>2020-09-29T13:39:50.133000</ts>
  <user>Cortlin</user>
  <text>The implementation is surprisingly simple too.</text>
</message>
<message>
  <ts>2020-09-29T13:40:19.874000</ts>
  <user>Cortlin</user>
  <text>It's a little bit of termios FFI.</text>
</message>
<message>
  <ts>2020-09-29T13:42:14.186000</ts>
  <user>Bexon</user>
  <text>~50 lines nice</text>
</message>
<message>
  <ts>2020-09-29T13:42:52.866000</ts>
  <user>Bexon</user>
  <text>hmm I have a problem with breaking</text>
</message>
<message>
  <ts>2020-09-29T13:43:01.747000</ts>
  <user>Bexon</user>
  <text>how do you do something and break in a for loop?</text>
</message>
<message>
  <ts>2020-09-29T13:43:16.198000</ts>
  <user>Bexon</user>
  <text>I tried different combinations of #:break and #:final nothing really worked</text>
</message>
<message>
  <ts>2020-09-29T13:43:31.145000</ts>
  <user>Cortlin</user>
  <text>Maybe a recursive procedure would work better then?</text>
</message>
<message>
  <ts>2020-09-29T13:43:44.696000</ts>
  <user>Cortlin</user>
  <text>How did you use `#:break`?</text>
</message>
<message>
  <ts>2020-09-29T13:43:52.529000</ts>
  <user>Bexon</user>
  <text>oh hold on it was the nestedness</text>
</message>
<message>
  <ts>2020-09-29T13:44:04.274000</ts>
  <user>Cortlin</user>
  <text>Haha</text>
</message>
<message>
  <ts>2020-09-29T13:46:29.745000</ts>
  <user>Bexon</user>
  <text>also  (box #f) is truthy :meow:</text>
</message>
<message>
  <ts>2020-09-29T13:47:26.021000</ts>
  <user>Bexon</user>
  <text>lol it was literally these two</text>
</message>
<message>
  <ts>2020-09-29T13:48:00.833000</ts>
  <user>Bexon</user>
  <text>now it works perfectly :meowblush:</text>
</message>
<message>
  <ts>2020-09-29T13:54:10.268000</ts>
  <user>Cortlin</user>
  <text>:racket:</text>
</message>
<message>
  <ts>2020-09-29T14:17:31.709000</ts>
  <user>Cortlin</user>
  <text>Never forget: If it ain't `eq? #f` it's truthy.</text>
</message>
<message>
  <ts>2020-09-29T14:42:14.379000</ts>
  <user>Bexon</user>
  <text>yeah I forgot to unbox it :meowblush:</text>
</message>
<message>
  <ts>2020-09-29T16:29:54.054000</ts>
  <user>Britten</user>
  <text>@sarna wip not getpass (but I should add a plugin) https://github.com/samdphillips/racketkeyring</text>
</message>
<message>
  <ts>2020-09-29T16:30:42.009000</ts>
  <user>Britten</user>
  <text>Re: json slowness I think it's related to general slowness of io ports</text>
</message>
<message>
  <ts>2020-09-29T16:32:11.792000</ts>
  <user>Bexon</user>
  <text>@oaktownsam oh neat thanks! I should learn how to use keyrings lol</text>
</message>
<message>
  <ts>2020-09-29T16:32:26.823000</ts>
  <user>Bexon</user>
  <text>can I somehow make io ports faster? üëÄ</text>
</message>
<message>
  <ts>2020-09-29T16:32:34.579000</ts>
  <user>Bexon</user>
  <text>like set some flag or whatever</text>
</message>
<message>
  <ts>2020-09-29T16:33:06.215000</ts>
  <user>Britten</user>
  <text>PLT_MAKE_PORTS=faster (kidding)</text>
</message>
<message>
  <ts>2020-09-29T16:33:37.885000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-29T16:34:08.687000</ts>
  <user>Bexon</user>
  <text>in CL I‚Äôd simply (declaim (speed 3) (safety 0))</text>
</message>
<message>
  <ts>2020-09-29T16:34:18.708000</ts>
  <user>Bexon</user>
  <text>it would segfault immediately but it‚Äôd be fast</text>
</message>
<message>
  <ts>2020-09-29T16:34:38.475000</ts>
  <user>Britten</user>
  <text>I don't know what the plans are to make ports faster but I know there is an issue open for it.</text>
</message>
<message>
  <ts>2020-09-29T16:34:53.567000</ts>
  <user>Bexon</user>
  <text>o I‚Äôll look for that</text>
</message>
<message>
  <ts>2020-09-29T16:35:52.822000</ts>
  <user>Britten</user>
  <text>It\'s a bit stale last I checked but maybe worth a me too type post</text>
</message>
<message>
  <ts>2020-09-29T16:36:17.671000</ts>
  <user>Bexon</user>
  <text>https://github.com/racket/racket/issues/13884 years and no comments :meow:</text>
</message>
<message>
  <ts>2020-09-29T16:36:46.080000</ts>
  <user>Britten</user>
  <text>as for json an interesting experiment would be to try to port the lib to use an in memory bytes and parse from that and see if it would be faster.</text>
</message>
<message>
  <ts>2020-09-29T16:37:55.575000</ts>
  <user>Bexon</user>
  <text>wouldn‚Äôt I have to load the file into memory using a port anyway?</text>
</message>
<message>
  <ts>2020-09-29T16:38:48.350000</ts>
  <user>Britten</user>
  <text>One big read is more efficient that the smaller reads</text>
</message>
<message>
  <ts>2020-09-29T16:39:26.678000</ts>
  <user>Bexon</user>
  <text>oh true I thought I was doing just that. I‚Äôll dig deeper üëÄ</text>
</message>
<message>
  <ts>2020-09-29T21:39:23.393000</ts>
  <user>Britten</user>
  <text>getpass doesn't seem to work on my system</text>
</message>
<message>
  <ts>2020-09-29T21:39:34.706000</ts>
  <user>Britten</user>
  <text>Linux w/ RacketCS</text>
</message>
<message>
  <ts>2020-09-29T21:46:28.932000</ts>
  <user>Britten</user>
  <text>Oh it might not work running under xrepl I think</text>
</message>
<message>
  <ts>2020-09-29T21:50:42.909000</ts>
  <user>Britten</user>
  <text>Yeah doesn't like if the `currentinputport` is not a terminal.</text>
</message>
<message>
  <ts>2020-09-29T21:51:05.530000</ts>
  <user>Cortlin</user>
  <text>You can give it a different port with `#:in`</text>
</message>
<message>
  <ts>2020-09-29T21:52:25.331000</ts>
  <user>Britten</user>
  <text>Yes but if you give anything not a terminal you get an opaque error```Welcome to Racket v7.8 [cs].&gt; r getpass&gt; (getpass); apply: bad value for conversion; ctype: _int32; value: #f; [,bt for context]```</text>
</message>
<message>
  <ts>2020-09-29T21:59:48.717000</ts>
  <user>Britten</user>
  <text>Actually anything not a unix fd because it works if you pipe in a value but `(withinputfromstring secrets (lambda () (getpass))` fails.</text>
</message>
<message>
  <ts>2020-09-29T22:00:23.248000</ts>
  <user>Cortlin</user>
  <text>Hmm</text>
</message>
<message>
  <ts>2020-09-29T22:00:38.143000</ts>
  <user>Cortlin</user>
  <text>Maybe you could add a check to see if it's talking to a tty.</text>
</message>
<message>
  <ts>2020-09-29T22:03:08.291000</ts>
  <user>Britten</user>
  <text>https://github.com/smitchell556/getpass/issues/1</text>
</message>
<message>
  <ts>2020-09-29T22:05:15.695000</ts>
  <user>Britten</user>
  <text>It probably also has problems running in DrRacket</text>
</message>
<message>
  <ts>2020-09-30T08:48:55.724000</ts>
  <user>Bexon</user>
  <text>matchstring makes my emacs freeze :meow:</text>
</message>
<message>
  <ts>2020-09-30T08:50:27.546000</ts>
  <user>Yaw</user>
  <text>frown</text>
</message>
<message>
  <ts>2020-09-30T10:04:53.697000</ts>
  <user>Bexon</user>
  <text>@ json slow  I tried another niche language a compiled one this time  crystalwith a release build it takes 1s to parse this file :meow:</text>
</message>
<message>
  <ts>2020-09-30T10:05:12.079000</ts>
  <user>Bexon</user>
  <text>seems like we really can‚Äôt compete with python</text>
</message>
<message>
  <ts>2020-09-30T10:05:40.293000</ts>
  <user>Bexon</user>
  <text>(racket 2.5s python 0.5s)</text>
</message>
<message>
  <ts>2020-09-30T10:06:48.447000</ts>
  <user>Daevion</user>
  <text>How much json do you need to parse and how often?</text>
</message>
<message>
  <ts>2020-09-30T10:16:37.483000</ts>
  <user>Cortlin</user>
  <text>Racket's jsexprs are too high level and readable in comparison to Python's performanceoriented low level implementation.</text>
</message>
<message>
  <ts>2020-09-30T10:21:34.531000</ts>
  <user>Cortlin</user>
  <text>There's an old parser implementation that uses streaming: https://www.neilvandyke.org/racket/jsonparsing/</text>
</message>
<message>
  <ts>2020-09-30T10:21:37.319000</ts>
  <user>Cortlin</user>
  <text>I wonder how it performs.</text>
</message>
<message>
  <ts>2020-09-30T10:46:50.651000</ts>
  <user>Bexon</user>
  <text>@StephenD to be honest 2.5s is totally bearable  it‚Äôs a ~25MB file and I needed to run the program only once</text>
</message>
<message>
  <ts>2020-09-30T10:47:03.043000</ts>
  <user>Bexon</user>
  <text>but still annoying :meow:</text>
</message>
<message>
  <ts>2020-09-30T10:47:23.315000</ts>
  <user>Bexon</user>
  <text>I have to learn to live with annoyances tho :meowblush: or I‚Äôll go insane</text>
</message>
<message>
  <ts>2020-09-30T10:48:35.355000</ts>
  <user>Daevion</user>
  <text>if you only have to do it once then just use python.</text>
</message>
<message>
  <ts>2020-09-30T10:49:08.589000</ts>
  <user>Daevion</user>
  <text>I love racket but there is no point punishing yourself.</text>
</message>
<message>
  <ts>2020-09-30T10:49:08.980000</ts>
  <user>Bexon</user>
  <text>@Deleted User yeah jsexprs are awesome! I haven‚Äôt seen anything better for json in a lispy language</text>
</message>
<message>
  <ts>2020-09-30T10:49:21.630000</ts>
  <user>Bexon</user>
  <text>it was more fun in racket!</text>
</message>
<message>
  <ts>2020-09-30T10:49:29.846000</ts>
  <user>Daevion</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-30T10:49:30.598000</ts>
  <user>Bexon</user>
  <text>just a bit slower :meowblush:</text>
</message>
<message>
  <ts>2020-09-30T10:49:55.668000</ts>
  <user>Cortlin</user>
  <text>Racket generally considers performance secondary to readable highlevel code.</text>
</message>
<message>
  <ts>2020-09-30T10:49:58.677000</ts>
  <user>Cortlin</user>
  <text>(not always mind you)</text>
</message>
<message>
  <ts>2020-09-30T10:50:15.098000</ts>
  <user>Cortlin</user>
  <text>I like it but it's probably because I don't use Racket in production.</text>
</message>
<message>
  <ts>2020-09-30T10:51:19.924000</ts>
  <user>Bexon</user>
  <text>I don‚Äôt like that you can‚Äôt turn off contracts</text>
</message>
<message>
  <ts>2020-09-30T10:51:49.999000</ts>
  <user>Bexon</user>
  <text>like at all  not even with a scoped (callwithoutchecking ...)style thing</text>
</message>
<message>
  <ts>2020-09-30T10:52:28.101000</ts>
  <user>Daevion</user>
  <text>it is an interesting idea.</text>
</message>
<message>
  <ts>2020-09-30T10:52:29.401000</ts>
  <user>Bexon</user>
  <text>(btw  what are you using in production? I don‚Äôt really need the speed so mostly python)</text>
</message>
<message>
  <ts>2020-09-30T10:53:13.445000</ts>
  <user>Cortlin</user>
  <text>What I run in production is up to the product manager's whims. :meow:</text>
</message>
<message>
  <ts>2020-09-30T10:53:24.388000</ts>
  <user>Daevion</user>
  <text>I use cache objectscript on Intersystems cache Health Connect  I'm a health systems integrator in a hospital</text>
</message>
<message>
  <ts>2020-09-30T10:53:45.134000</ts>
  <user>Cortlin</user>
  <text>Hey isn't that the proprietary objectoriented Mumps dialect?</text>
</message>
<message>
  <ts>2020-09-30T10:54:21.854000</ts>
  <user>Daevion</user>
  <text>yes. But is it a OO language built a level above the core mumps code.</text>
</message>
<message>
  <ts>2020-09-30T10:54:27.917000</ts>
  <user>Cortlin</user>
  <text>Neat</text>
</message>
<message>
  <ts>2020-09-30T10:54:48.058000</ts>
  <user>Daevion</user>
  <text>(hospital IT security is so tight I cant even run racket scripts)</text>
</message>
<message>
  <ts>2020-09-30T10:55:01.172000</ts>
  <user>Cortlin</user>
  <text>Yeah understandable.</text>
</message>
<message>
  <ts>2020-09-30T10:55:19.354000</ts>
  <user>Cortlin</user>
  <text>The current place I work in is a Java house with occasional JavaScript. I don't touch the development parts though.</text>
</message>
<message>
  <ts>2020-09-30T10:55:44.442000</ts>
  <user>Cortlin</user>
  <text>At the previous work I wrote some Python and Ruby and then sneaked in some Perl and CHICKEN Scheme.</text>
</message>
<message>
  <ts>2020-09-30T10:56:21.645000</ts>
  <user>Daevion</user>
  <text>Nice. I did a little perl for digital library stuff a long time ago.</text>
</message>
<message>
  <ts>2020-09-30T10:57:03.420000</ts>
  <user>Cortlin</user>
  <text>Sneaked as in we had the liberty to do whatever we wanted for small glue scripts on our own servers rather than customers machines.</text>
</message>
<message>
  <ts>2020-09-30T10:57:22.799000</ts>
  <user>Bexon</user>
  <text>@Deleted User I mean that\'s why I use python  my manager said what I write should be readable for him and team members :meow: (doesn\'t matter that he doesn\'t really code and my teammates know it so well they use camelCase variables in their scripts)((n once I got I don\'t know what decorator means during code review :meow: ))</text>
</message>
<message>
  <ts>2020-09-30T10:57:23.759000</ts>
  <user>Daevion</user>
  <text>(I mostly meant nice about the chicken scheme)</text>
</message>
<message>
  <ts>2020-09-30T10:58:06.682000</ts>
  <user>Cortlin</user>
  <text>Ah</text>
</message>
<message>
  <ts>2020-09-30T10:58:34.015000</ts>
  <user>Daevion</user>
  <text>confession time. I don't know what a decorator is either. tis a java thing right??</text>
</message>
<message>
  <ts>2020-09-30T10:58:44.710000</ts>
  <user>Bexon</user>
  <text>no a python thing :meow:</text>
</message>
<message>
  <ts>2020-09-30T10:59:11.339000</ts>
  <user>Daevion</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-30T10:59:13.172000</ts>
  <user>Bexon</user>
  <text>```python@foo # &lt; decoratordef bar(): print("something")```</text>
</message>
<message>
  <ts>2020-09-30T10:59:23.548000</ts>
  <user>Bexon</user>
  <text>it wraps a function definition</text>
</message>
<message>
  <ts>2020-09-30T10:59:54.338000</ts>
  <user>Cortlin</user>
  <text>bad memories</text>
</message>
<message>
  <ts>2020-09-30T11:00:03.942000</ts>
  <user>Cortlin</user>
  <text>I had to use it a lot.</text>
</message>
<message>
  <ts>2020-09-30T11:00:06.311000</ts>
  <user>Bexon</user>
  <text>you could make one called `@timeit` for example  and it'd time each function invocation</text>
</message>
<message>
  <ts>2020-09-30T11:00:58.016000</ts>
  <user>Daevion</user>
  <text>Nice</text>
</message>
<message>
  <ts>2020-09-30T11:01:01.698000</ts>
  <user>Bexon</user>
  <text>I tried using perl instead of python for our stuff but perl dead and unreadable :meow:</text>
</message>
<message>
  <ts>2020-09-30T11:01:15.520000</ts>
  <user>Bexon</user>
  <text>..then I tried ruby but why not just python :meow:</text>
</message>
<message>
  <ts>2020-09-30T11:01:20.146000</ts>
  <user>Cortlin</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-30T11:01:20.704000</ts>
  <user>Bexon</user>
  <text>so python it is :meow:</text>
</message>
<message>
  <ts>2020-09-30T11:01:36.708000</ts>
  <user>Cortlin</user>
  <text>It sounds like they went why anything other than Python when you can Python?</text>
</message>
<message>
  <ts>2020-09-30T11:01:40.901000</ts>
  <user>Bexon</user>
  <text>yeah</text>
</message>
<message>
  <ts>2020-09-30T11:01:49.267000</ts>
  <user>Bexon</user>
  <text>basically the only reason is popularity</text>
</message>
<message>
  <ts>2020-09-30T11:02:47.617000</ts>
  <user>Daevion</user>
  <text>Python is fine. It‚Äôs just not interesting to me.</text>
</message>
<message>
  <ts>2020-09-30T11:03:08.248000</ts>
  <user>Bexon</user>
  <text>but like.. people on my team write loops like this in python:```pythonfor i in range(0 len(regs)): reg = regs[i] rname = reg['RegionName']```(copypasted from some AWS glue)</text>
</message>
<message>
  <ts>2020-09-30T11:03:26.499000</ts>
  <user>Cortlin</user>
  <text>I wrote my bachelor's thesis project in Hy just to avoid Python.</text>
</message>
<message>
  <ts>2020-09-30T11:03:42.060000</ts>
  <user>Cortlin</user>
  <text>I find it too tedious to use. It tries to force you to its will. My way or highway</text>
</message>
<message>
  <ts>2020-09-30T11:04:06.097000</ts>
  <user>Bexon</user>
  <text>hope you'll never have to try go</text>
</message>
<message>
  <ts>2020-09-30T11:04:11.852000</ts>
  <user>Cortlin</user>
  <text>hahah</text>
</message>
<message>
  <ts>2020-09-30T11:04:24.945000</ts>
  <user>Cortlin</user>
  <text>Yeah Go is even more adamant about the one true way".</text>
</message>
<message>
  <ts>2020-09-30T11:04:35.702000</ts>
  <user>Cortlin</user>
  <text>Completely stifles expressivity.</text>
</message>
<message>
  <ts>2020-09-30T11:04:50.487000</ts>
  <user>Bexon</user>
  <text>btw have you tried raku? overall I want to like it but it's just so complex :meow: and that nil propagation stuff is.. I don't like it</text>
</message>
<message>
  <ts>2020-09-30T11:05:36.708000</ts>
  <user>Bexon</user>
  <text>(nil can be returned from any function even if it's typedand all methods cast on nil just return nil no exceptions)</text>
</message>
<message>
  <ts>2020-09-30T11:05:52.474000</ts>
  <user>Cortlin</user>
  <text>I want to try it but the ecosystem feels like a maze.</text>
</message>
<message>
  <ts>2020-09-30T11:05:53.626000</ts>
  <user>Daevion</user>
  <text>Never tried it. Always seemed to be a response to python.</text>
</message>
<message>
  <ts>2020-09-30T11:06:52.542000</ts>
  <user>Daevion</user>
  <text>None</text>
</message>
<message>
  <ts>2020-09-30T11:06:55.407000</ts>
  <user>Marilou</user>
  <text>&gt; I wrote my bachelor's thesis project in Hy just to avoid Python.@Deleted User have you tried coconut? it is similar from what ive read</text>
</message>
<message>
  <ts>2020-09-30T11:07:46.005000</ts>
  <user>Bexon</user>
  <text>@StephenD well it was supposed to be Perl 6</text>
</message>
<message>
  <ts>2020-09-30T11:08:15.411000</ts>
  <user>Cortlin</user>
  <text>There's Perl 7 now.</text>
</message>
<message>
  <ts>2020-09-30T11:08:21.476000</ts>
  <user>Cortlin</user>
  <text>@parlortricks No let me take a look.</text>
</message>
<message>
  <ts>2020-09-30T11:08:34.551000</ts>
  <user>Daevion</user>
  <text>(Racket developer uses plot package to put earth on cube...because ‚Äòwhy not‚Äô)</text>
</message>
<message>
  <ts>2020-09-30T11:09:13.892000</ts>
  <user>Bexon</user>
  <text>yeah good for perl (I think)</text>
</message>
<message>
  <ts>2020-09-30T11:09:27.950000</ts>
  <user>Marilou</user>
  <text>&gt; @parlortricks No let me take a look.@Deleted User i got confused its functional not really lispy</text>
</message>
<message>
  <ts>2020-09-30T11:09:34.339000</ts>
  <user>Daevion</user>
  <text>So there is raku AND Perl 7?</text>
</message>
<message>
  <ts>2020-09-30T11:09:46.591000</ts>
  <user>Bexon</user>
  <text>perl 7 is just a perl version</text>
</message>
<message>
  <ts>2020-09-30T11:10:01.047000</ts>
  <user>Bexon</user>
  <text>they went from 5 straight to 7 not to confuse people</text>
</message>
<message>
  <ts>2020-09-30T11:10:16.773000</ts>
  <user>Bexon</user>
  <text>(actually not sure if there's perl 7 already or just in plans)</text>
</message>
<message>
  <ts>2020-09-30T11:10:16.774000</ts>
  <user>Cortlin</user>
  <text>Perl 7 is going to be different though.</text>
</message>
<message>
  <ts>2020-09-30T11:10:21.533000</ts>
  <user>Cortlin</user>
  <text>They're going to make it more modern.</text>
</message>
<message>
  <ts>2020-09-30T11:10:31.948000</ts>
  <user>Cortlin</user>
  <text>Make `use strict; use warnings;` etc default for example.</text>
</message>
<message>
  <ts>2020-09-30T11:10:41.248000</ts>
  <user>Daevion</user>
  <text>Ahh it‚Äôs still Perl without the perl6/raku breaking changes</text>
</message>
<message>
  <ts>2020-09-30T11:10:44.880000</ts>
  <user>Cortlin</user>
  <text>Yeah</text>
</message>
<message>
  <ts>2020-09-30T11:10:49.624000</ts>
  <user>Bexon</user>
  <text>function signatures? :meow:</text>
</message>
<message>
  <ts>2020-09-30T11:10:53.944000</ts>
  <user>Marilou</user>
  <text>its just perl with sane defaults?</text>
</message>
<message>
  <ts>2020-09-30T11:10:54.356000</ts>
  <user>Cortlin</user>
  <text>Raku no longer has much in common with Perl any more.</text>
</message>
<message>
  <ts>2020-09-30T11:11:11.011000</ts>
  <user>Cortlin</user>
  <text>Kinda yeah. More strict and has boilerplates and folk idioms built in.</text>
</message>
<message>
  <ts>2020-09-30T11:11:37.090000</ts>
  <user>Cortlin</user>
  <text>AFAICT you can still configure it to run Perl 5 scripts in a compatibility mode.</text>
</message>
<message>
  <ts>2020-09-30T11:11:57.315000</ts>
  <user>Marilou</user>
  <text>wonder if my company will upgrade to new perl then</text>
</message>
<message>
  <ts>2020-09-30T11:12:09.542000</ts>
  <user>Cortlin</user>
  <text>It's supposedly easy to migrate from 5 to 7.</text>
</message>
<message>
  <ts>2020-09-30T11:12:31.807000</ts>
  <user>Marilou</user>
  <text>unless the upgrade can be billable to a customer i doubt ittl happen for me ha</text>
</message>
<message>
  <ts>2020-09-30T11:13:13.761000</ts>
  <user>Cortlin</user>
  <text>haha yeah</text>
</message>
<message>
  <ts>2020-09-30T11:16:55.358000</ts>
  <user>Bexon</user>
  <text>we have machines with 5.16 :meow:</text>
</message>
<message>
  <ts>2020-09-30T11:24:04.377000</ts>
  <user>Daevion</user>
  <text>Which industry/sector?</text>
</message>
<message>
  <ts>2020-09-30T11:24:39.723000</ts>
  <user>Bexon</user>
  <text>is that a question for me?</text>
</message>
<message>
  <ts>2020-09-30T11:25:12.537000</ts>
  <user>Daevion</user>
  <text>Yes about being a Perl shop (I‚Äôm guessing recruitment or local govt)</text>
</message>
<message>
  <ts>2020-09-30T11:25:59.356000</ts>
  <user>Bexon</user>
  <text>ah no  I just meant we have 5.16 installed</text>
</message>
<message>
  <ts>2020-09-30T11:26:02.029000</ts>
  <user>Bexon</user>
  <text>we don't use it much</text>
</message>
<message>
  <ts>2020-09-30T11:26:11.956000</ts>
  <user>Bexon</user>
  <text>there are some old scripts but they're unused</text>
</message>
<message>
  <ts>2020-09-30T11:26:23.297000</ts>
  <user>Daevion</user>
  <text>Ahh</text>
</message>
<message>
  <ts>2020-09-30T11:26:37.828000</ts>
  <user>Bexon</user>
  <text>I know it's 5.16 because I wanted to use it instead of python 2 :meow:</text>
</message>
<message>
  <ts>2020-09-30T11:26:43.549000</ts>
  <user>Bexon</user>
  <text>turns out 5.16 is old as hell too</text>
</message>
<message>
  <ts>2020-09-30T11:26:49.274000</ts>
  <user>Cortlin</user>
  <text>In my secondary job they're trying to migrate from Perl to Python.</text>
</message>
<message>
  <ts>2020-09-30T11:26:57.350000</ts>
  <user>Bexon</user>
  <text>a lot of people do that now</text>
</message>
<message>
  <ts>2020-09-30T11:27:23.970000</ts>
  <user>Bexon</user>
  <text>rewriting from python/java to go is a popular thing too</text>
</message>
<message>
  <ts>2020-09-30T11:28:43.954000</ts>
  <user>Daevion</user>
  <text>Not rust?</text>
</message>
<message>
  <ts>2020-09-30T11:29:04.400000</ts>
  <user>Daevion</user>
  <text>Or node?</text>
</message>
<message>
  <ts>2020-09-30T11:30:49.974000</ts>
  <user>Bexon</user>
  <text>not many companies rewrite stuff in rust</text>
</message>
<message>
  <ts>2020-09-30T11:31:14.347000</ts>
  <user>Bexon</user>
  <text>it's everywhere on the programming forums but in the industry it's pretty niche</text>
</message>
<message>
  <ts>2020-09-30T11:31:23.276000</ts>
  <user>Bexon</user>
  <text>zalando dropped rust a few months ago..</text>
</message>
<message>
  <ts>2020-09-30T11:31:32.579000</ts>
  <user>Bexon</user>
  <text>but node  yeah</text>
</message>
<message>
  <ts>2020-09-30T11:31:45.835000</ts>
  <user>Daevion</user>
  <text>i'm honestly surprised. I would have thought the safe+fast would push a lot of buttons</text>
</message>
<message>
  <ts>2020-09-30T11:32:24.004000</ts>
  <user>Bexon</user>
  <text>I wish my team didn't perceive ruby as legacy crap (it's because they have too many problems with the old chef version they have to support and they want to get rid of everything ruby now)</text>
</message>
<message>
  <ts>2020-09-30T11:32:54.158000</ts>
  <user>Bexon</user>
  <text>turns out safe+fast is not the right tradeoff for most enterprise stuff</text>
</message>
<message>
  <ts>2020-09-30T11:33:22.505000</ts>
  <user>Bexon</user>
  <text>popular+popular however..</text>
</message>
<message>
  <ts>2020-09-30T11:33:50.393000</ts>
  <user>Marilou</user>
  <text>fast just means throw more compute at the problem so youre left with safe...safe from what? memory issues just reboot</text>
</message>
<message>
  <ts>2020-09-30T11:34:29.062000</ts>
  <user>Bexon</user>
  <text>yeah basically  my friend works at zalando and their JVM services just spin 500 pods when needed</text>
</message>
<message>
  <ts>2020-09-30T11:34:51.025000</ts>
  <user>Bexon</user>
  <text>their rust service works perfectly fine but zalando wants more crossteam collaboration</text>
</message>
<message>
  <ts>2020-09-30T11:35:06.611000</ts>
  <user>Bexon</user>
  <text>so everything but node n jvm got trashed</text>
</message>
<message>
  <ts>2020-09-30T11:35:30.875000</ts>
  <user>Marilou</user>
  <text>at least they are putting their eggs into two baskets</text>
</message>
<message>
  <ts>2020-09-30T11:36:10.858000</ts>
  <user>Bexon</user>
  <text>it's funny because they rewrote that service from scala to rust  it was too slow and architecturally complexI wonder how it survives a rewrite from rust to kotlin/java</text>
</message>
<message>
  <ts>2020-09-30T11:37:03.506000</ts>
  <user>Bexon</user>
  <text>it'll probably be slow as heck and very complex because of all the performance hacks they had to apply  but hey people from other teams will be able to chime in</text>
</message>
<message>
  <ts>2020-09-30T11:38:38.436000</ts>
  <user>Daevion</user>
  <text>enterprise is weird cause you can throw more servers at the problem  so in that case rust was never going to prosper in a scala environment.</text>
</message>
<message>
  <ts>2020-09-30T11:39:01.357000</ts>
  <user>Daevion</user>
  <text>(someone else is payign for the servers)</text>
</message>
<message>
  <ts>2020-09-30T11:39:14.079000</ts>
  <user>Daevion</user>
  <text>(and they are not a significant cost anyway)</text>
</message>
<message>
  <ts>2020-09-30T11:39:44.789000</ts>
  <user>Bexon</user>
  <text>programmers are more expensive than hardware these days</text>
</message>
<message>
  <ts>2020-09-30T11:40:07.916000</ts>
  <user>Marilou</user>
  <text>enterprise can be hilarious our architect decided we should have nvidia gtx1080ti in all our OCR machines because they do graphical work not because the app is coded for CUDA....</text>
</message>
<message>
  <ts>2020-09-30T11:40:36.051000</ts>
  <user>Marilou</user>
  <text>graphical being it opened an image as an input file</text>
</message>
<message>
  <ts>2020-09-30T11:40:44.796000</ts>
  <user>Marilou</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-30T11:41:11.955000</ts>
  <user>Marilou</user>
  <text>rust is great somewhere but ive not seen it at my work</text>
</message>
<message>
  <ts>2020-09-30T13:21:52.455000</ts>
  <user>Bexon</user>
  <text>csv reading and writing is still slower in racket than in python</text>
</message>
<message>
  <ts>2020-09-30T13:21:54.821000</ts>
  <user>Bexon</user>
  <text>I'm :meow:</text>
</message>
<message>
  <ts>2020-09-30T13:45:18.366000</ts>
  <user>Bexon</user>
  <text>I compiled it</text>
</message>
<message>
  <ts>2020-09-30T13:45:21.430000</ts>
  <user>Bexon</user>
  <text>and it's faster!!</text>
</message>
<message>
  <ts>2020-09-30T13:45:28.981000</ts>
  <user>Bexon</user>
  <text>(excluding startup)</text>
</message>
<message>
  <ts>2020-09-30T13:45:36.089000</ts>
  <user>Bexon</user>
  <text>:meowblush:</text>
</message>
<message>
  <ts>2020-09-30T15:09:50.750000</ts>
  <user>Britten</user>
  <text>&gt; (racket 2.5s python 0.5s)@sarna odd. In my synthetic test I got Racket at about 1/2 as fast as Python</text>
</message>
<message>
  <ts>2020-09-30T15:10:19.927000</ts>
  <user>Bexon</user>
  <text>was it just loading the file from disk? or loading + parsing JSON</text>
</message>
<message>
  <ts>2020-09-30T15:10:30.528000</ts>
  <user>Bexon</user>
  <text>hm I didn‚Äôt compile this one I think  I should‚Äôve</text>
</message>
<message>
  <ts>2020-09-30T15:14:30.637000</ts>
  <user>Britten</user>
  <text>Loading and parsing an 800k file 1000 times</text>
</message>
<message>
  <ts>2020-09-30T15:15:21.085000</ts>
  <user>Britten</user>
  <text>I don't have the numbers but on this computer it was (from memory) Python: ~24s Racket: : ~56s</text>
</message>
<message>
  <ts>2020-09-30T16:22:02.421000</ts>
  <user>Bexon</user>
  <text>oh interesting. I‚Äôll check again tomorrow</text>
</message>
<message>
  <ts>2020-09-30T16:32:28.830000</ts>
  <user>Britten</user>
  <text>&gt; $ racket readbench.rkt &gt; cpu time: 60036 real time: 60426 gc time: 1770&gt; &gt; $ python3 read_bench.py &gt; 26.22542119026184 secs elapsed</text>
</message>
<message>
  <ts>2020-09-30T16:33:37.291000</ts>
  <user>Britten</user>
  <text>It is totally possible that your document is a different shape and maybe there would be more GC pressure</text>
</message>
<message>
  <ts>2020-09-30T16:43:21.902000</ts>
  <user>Cortlin</user>
  <text>Racket also has a relatively slow startup time especially if you rely on too many libraries.</text>
</message>
<message>
  <ts>2020-09-30T16:43:45.180000</ts>
  <user>Cortlin</user>
  <text>I try not to use `#lang racket` until the `require`s get cumbersome.</text>
</message>
<message>
  <ts>2020-09-30T16:48:21.537000</ts>
  <user>Britten</user>
  <text>That script is `racket/base` and `raco make readbench.rkt` was run beforehand</text>
</message>
<message>
  <ts>2020-09-30T17:08:25.995000</ts>
  <user>Bexon</user>
  <text>`#lang racket` takes ~0.35s to load on my work laptop</text>
</message>
<message>
  <ts>2020-09-30T17:08:46.155000</ts>
  <user>Bexon</user>
  <text>that still leaves 2s+</text>
</message>
<message>
  <ts>2020-09-30T17:08:52.614000</ts>
  <user>Britten</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-30T17:09:51.689000</ts>
  <user>Alyiah</user>
  <text>I wish Racket had something like Clojure's `&gt;` and `&gt;&gt;` macros :P</text>
</message>
<message>
  <ts>2020-09-30T17:11:48.956000</ts>
  <user>Bexon</user>
  <text>same</text>
</message>
<message>
  <ts>2020-09-30T17:11:58.476000</ts>
  <user>Bexon</user>
  <text>I think they were implemented somewhere?</text>
</message>
<message>
  <ts>2020-09-30T17:12:17.819000</ts>
  <user>Bexon</user>
  <text>https://docs.racketlang.org/threading/index.html</text>
</message>
<message>
  <ts>2020-09-30T17:12:21.836000</ts>
  <user>Bexon</user>
  <text>there ya go</text>
</message>
<message>
  <ts>2020-09-30T17:14:28.966000</ts>
  <user>Bexon</user>
  <text>I like how they solved ocaml‚Äôs problem with a hole</text>
</message>
<message>
  <ts>2020-09-30T17:14:32.880000</ts>
  <user>Cortlin</user>
  <text>They're very easy to implement from memory.</text>
</message>
<message>
  <ts>2020-09-30T17:15:13.879000</ts>
  <user>Cortlin</user>
  <text>I just put them in a utility file when I need them instead of depending on a library.</text>
</message>
<message>
  <ts>2020-09-30T17:15:20.558000</ts>
  <user>Bexon</user>
  <text>the most popular OCaml stdlib replacement uses named arguments for everything instead</text>
</message>
<message>
  <ts>2020-09-30T17:15:41.611000</ts>
  <user>Bexon</user>
  <text>@Deleted User why? code reuse is good :meow:</text>
</message>
<message>
  <ts>2020-09-30T17:15:45.895000</ts>
  <user>Cortlin</user>
  <text>`doto` is also nice.</text>
</message>
<message>
  <ts>2020-09-30T17:16:06.574000</ts>
  <user>Cortlin</user>
  <text>Depending on an external library is expensive. There's a slippery slope towards leftpadism here.</text>
</message>
<message>
  <ts>2020-09-30T17:16:51.645000</ts>
  <user>Bexon</user>
  <text>this library is much bigger than leftpad</text>
</message>
<message>
  <ts>2020-09-30T17:17:18.583000</ts>
  <user>Bexon</user>
  <text>I noticed many people who code in Scheme dialects don‚Äôt like dependencies</text>
</message>
<message>
  <ts>2020-09-30T17:17:24.086000</ts>
  <user>Bexon</user>
  <text>not sure why</text>
</message>
<message>
  <ts>2020-09-30T17:18:20.709000</ts>
  <user>Kiam</user>
  <text>lousy package managers plays a part i think</text>
</message>
<message>
  <ts>2020-09-30T17:18:40.520000</ts>
  <user>Bexon</user>
  <text>some Scheme dialects don‚Äôt even have one</text>
</message>
<message>
  <ts>2020-09-30T17:18:42.227000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-09-30T17:19:32.701000</ts>
  <user>Caycee</user>
  <text>I wish scheme has 1 main implementation</text>
</message>
<message>
  <ts>2020-09-30T17:19:51.197000</ts>
  <user>Britten</user>
  <text>also unreliable/nonexistant library systems</text>
</message>
<message>
  <ts>2020-09-30T17:20:10.489000</ts>
  <user>Bexon</user>
  <text>racket is one true scheme :meow:</text>
</message>
<message>
  <ts>2020-09-30T17:20:37.749000</ts>
  <user>Bexon</user>
  <text>jokes aside maybe r7rslarge gets there</text>
</message>
<message>
  <ts>2020-09-30T17:22:52.657000</ts>
  <user>Alyiah</user>
  <text>Oh shit good to know this exists! Thanks @sarna!</text>
</message>
<message>
  <ts>2020-09-30T17:23:16.505000</ts>
  <user>Bexon</user>
  <text>it‚Äôs only 125 lines surprisingly</text>
</message>
<message>
  <ts>2020-09-30T17:23:21.192000</ts>
  <user>Britten</user>
  <text>threading is a very good macro</text>
</message>
<message>
  <ts>2020-09-30T17:23:34.006000</ts>
  <user>Bexon</user>
  <text>`and~&gt;` sounds very useful</text>
</message>
<message>
  <ts>2020-09-30T17:24:59.081000</ts>
  <user>Alyiah</user>
  <text>Wow that's a lot smaller than I would expect.</text>
</message>
<message>
  <ts>2020-09-30T17:25:41.835000</ts>
  <user>Alyiah</user>
  <text>Oh of course it's Lexi Lambda lol they have so much cool stuff</text>
</message>
<message>
  <ts>2020-09-30T17:26:07.351000</ts>
  <user>Kiam</user>
  <text>tip for using threading: _always_ use the hole markers</text>
</message>
<message>
  <ts>2020-09-30T18:11:19.982000</ts>
  <user>Cortlin</user>
  <text>I quite like Akku.</text>
</message>
<message>
  <ts>2020-09-30T18:11:35.065000</ts>
  <user>Cortlin</user>
  <text>It's the only reliable package manager for Scheme I've seen.</text>
</message>
<message>
  <ts>2020-09-30T18:12:18.116000</ts>
  <user>Cortlin</user>
  <text>It's in the tradition of pip w/ virtualenv though. Not in the tradition of CPAN like raco pkg (PlaneT) is.</text>
</message>
<message>
  <ts>2020-09-30T18:40:12.960000</ts>
  <user>Bexon</user>
  <text>I heard good things about it</text>
</message>
<message>
  <ts>2020-09-30T18:40:29.005000</ts>
  <user>Bexon</user>
  <text>and personally I prefer this way of doing things instead of the CPAN way</text>
</message>
<message>
  <ts>2020-09-30T18:40:52.291000</ts>
  <user>Bexon</user>
  <text>problems arise when you gotta have more than one version of some library :/</text>
</message>
<message>
  <ts>2020-09-30T18:41:09.908000</ts>
  <user>Bexon</user>
  <text>Raku allows that idk about Perl</text>
</message>
<message>
  <ts>2020-09-30T18:41:45.536000</ts>
  <user>Bexon</user>
  <text>in OCaml I had a couple of cases like ‚Äúoh you‚Äôre pulling this library? I have to downgrade 10 of your packages from 3.0 to 0.12!‚Äù</text>
</message>
<message>
  <ts>2020-09-30T18:42:47.878000</ts>
  <user>Alyiah</user>
  <text>Is this something Nix is able to solve? It's able to solve this issue with system packages idk about packages for language's package managers though</text>
</message>
<message>
  <ts>2020-09-30T18:43:22.533000</ts>
  <user>Bexon</user>
  <text>I heard they interact badly (Nix and language‚Äôs package managers)</text>
</message>
<message>
  <ts>2020-09-30T18:43:28.866000</ts>
  <user>Bexon</user>
  <text>not sure though</text>
</message>
<message>
  <ts>2020-09-30T18:43:53.170000</ts>
  <user>Cortlin</user>
  <text>https://github.com/fractalide/racket2nix</text>
</message>
<message>
  <ts>2020-09-30T18:43:58.331000</ts>
  <user>Bexon</user>
  <text>as I‚Äôve never tried personally</text>
</message>
<message>
  <ts>2020-09-30T18:44:30.261000</ts>
  <user>Bexon</user>
  <text>can I have the same issue with Racket that I had in OCaml? üëÄ</text>
</message>
<message>
  <ts>2020-09-30T18:56:39.954000</ts>
  <user>Alyiah</user>
  <text>No idea I've never tried nix at all personally but I have some friends that have been shilling it recently and this problem is exactly what it's meant to solve ü§∑\u200d‚ôÇÔ∏è</text>
</message>
<message>
  <ts>2020-09-30T19:30:59.963000</ts>
  <user>Bexon</user>
  <text>I tried nix too complex for me :meow:</text>
</message>
<message>
  <ts>2020-09-30T19:38:36.304000</ts>
  <user>Bexon</user>
  <text>same with guix</text>
</message>
<message>
  <ts>2020-09-30T19:39:06.581000</ts>
  <user>Kiam</user>
  <text>nix looks neat</text>
</message>
<message>
  <ts>2020-09-30T19:39:12.383000</ts>
  <user>Kiam</user>
  <text>I want to do Weird things to it though</text>
</message>
<message>
  <ts>2020-09-30T19:39:41.187000</ts>
  <user>Bexon</user>
  <text>it looks great but it‚Äôs a big paradigm shift</text>
</message>
<message>
  <ts>2020-09-30T21:02:18.463000</ts>
  <user>Kiam</user>
  <text>feeling like sharing some Spice today so I'm here to say I've decided that `#true` and `#false` are much better than `#t` and `#f`</text>
</message>
<message>
  <ts>2020-09-30T21:12:57.105000</ts>
  <user>Britten</user>
  <text>That's some bold spice.</text>
</message>
<message>
  <ts>2020-09-30T21:14:36.140000</ts>
  <user>Daevion</user>
  <text>Teaching languages got it right</text>
</message>
<message>
  <ts>2020-09-30T21:17:03.351000</ts>
  <user>Kiam</user>
  <text>_really_ bold spice would be saying it should just be `true` and `false` which should be bound to the values so it doesn't have to be Special Reader Magic but I don't think it's realistic to suggest that to other racketeers.</text>
</message>
<message>
  <ts>2020-09-30T21:18:09.176000</ts>
  <user>Kiam</user>
  <text>the far more pressing problem is that `#t` and `#f` are pointlessly inscrutable shorthands that save three characters apiece at the expense of 1) preventing me from telling which is which and 2) having to explain this nonsense to nonlisp people</text>
</message>
<message>
  <ts>2020-09-30T21:27:06.526000</ts>
  <user>Bexon</user>
  <text>some fonts make t and f really similar :meow:</text>
</message>
<message>
  <ts>2020-09-30T21:27:27.232000</ts>
  <user>Olvin</user>
  <text>`true` and `false` would make more sense if matchexpanders could be identifiers</text>
</message>
<message>
  <ts>2020-09-30T21:27:37.089000</ts>
  <user>Bexon</user>
  <text>~~`#y` and `#n` gang~~</text>
</message>
<message>
  <ts>2020-09-30T22:06:00.026000</ts>
  <user>Cortlin</user>
  <text>Why not `#true` and `#false`?</text>
</message>
<message>
  <ts>2020-09-30T22:21:10.250000</ts>
  <user>Britten</user>
  <text>Yeah I'm team `true` and `false`. Partly because I want `#` to be a magic reader hook. Also writing `#` reader hooks should be easier.</text>
</message>
<message>
  <ts>2020-09-30T22:36:54.126000</ts>
  <user>Cortlin</user>
  <text>I don't really like the idea of hardcoding two plain identifiers as a different selfevaluating type.</text>
</message>
<message>
  <ts>2020-09-30T22:37:33.308000</ts>
  <user>Cortlin</user>
  <text>I like the Scheme tradition of using the `#` prefix for tokens treated to be separately by the reader.</text>
</message>
<message>
  <ts>2020-09-30T23:01:31.842000</ts>
  <user>Kiam</user>
  <text>Because that's how any other twoelement enum type you'd make would look</text>
</message>
<message>
  <ts>2020-09-30T23:01:44.706000</ts>
  <user>Kiam</user>
  <text>it'd have two constant values bound to identifiers and exported by a module</text>
</message>
<message>
  <ts>2020-09-30T23:02:42.284000</ts>
  <user>Kiam</user>
  <text>They wouldn't be hard coded `true` and `false` would be identifiers bound with `define` and imported from a module or the enclosing `#lang` just like any other constants would be.</text>
</message>
<message>
  <ts>2020-09-30T23:02:54.751000</ts>
  <user>Kiam</user>
  <text>They wouldn't be hard coded `true` and `false` would be identifiers bound with `define` and imported from a module or the enclosing `#lang` just like any other named constants would be.</text>
</message>
<message>
  <ts>2020-09-30T23:14:35.346000</ts>
  <user>Zayne</user>
  <text>you know stuff like `caddaddr`? at one point in like 2010 I was thinking of chaining front and tail operations like `fttftt`</text>
</message>
<message>
  <ts>2020-09-30T23:15:33.821000</ts>
  <user>Kiam</user>
  <text>_omg_</text>
</message>
<message>
  <ts>2020-09-30T23:16:39.999000</ts>
  <user>Zayne</user>
  <text>these would of course be booleans and you'd call a cons cell as a booleantaking function to get its front or tail</text>
</message>
<message>
  <ts>2020-09-30T23:17:02.959000</ts>
  <user>Zayne</user>
  <text>but that was a long time ago and feels silly now</text>
</message>
<message>
  <ts>2020-09-30T23:18:50.779000</ts>
  <user>Kiam</user>
  <text>I've had plenty of those ideas</text>
</message>
<message>
  <ts>2020-09-30T23:19:38.024000</ts>
  <user>Zayne</user>
  <text>or maybe it was first rather than front"... either way really</text>
</message>
<message>
  <ts>2020-09-30T23:21:02.426000</ts>
  <user>Kiam</user>
  <text>one time I wanted to change `require` to perform a DNSlike hierarchical resolution of paths so `(require foo/bar/baz)` would first `(require foo)` look in a `#%links` export or something for a hash table to lookup `bar` in then require that and do another lookup for `baz` then finally require that</text>
</message>
<message>
  <ts>2020-09-30T23:21:31.082000</ts>
  <user>Zayne</user>
  <text>sounds great!</text>
</message>
<message>
  <ts>2020-09-30T23:21:47.178000</ts>
  <user>Kiam</user>
  <text>I can't remember _why_ I wanted this or what problem it was supposed to fix</text>
</message>
<message>
  <ts>2020-09-30T23:22:08.106000</ts>
  <user>Kiam</user>
  <text>and nowadays I just shrug and go if I\'m changing something as fundamental as `require` specs fuck it just make them URLs</text>
</message>
<message>
  <ts>2020-09-30T23:23:53.823000</ts>
  <user>Zayne</user>
  <text>probably helpful for organizing codebases in ways that don't have their directory structure determined by their public interface or for dependency injection to replace one whole subtree of module paths with another as far as certain modules are concerned...</text>
</message>
<message>
  <ts>2020-09-30T23:24:47.385000</ts>
  <user>Kiam</user>
  <text>yeah but like</text>
</message>
<message>
  <ts>2020-09-30T23:24:58.324000</ts>
  <user>Kiam</user>
  <text>I couldn't remember why I would want to do either of those things instead of just organizing modules the normal way</text>
</message>
<message>
  <ts>2020-09-30T23:26:13.193000</ts>
  <user>Zayne</user>
  <text>peraonally though I like to think of the module path as being like a kind of authorization; if you're being loaded at a module path that means it's up to you and only you to define things that other modules are expecting at that path</text>
</message>
<message>
  <ts>2020-09-30T23:28:37.751000</ts>
  <user>Zayne</user>
  <text>I don't know if this is strictly true in Racket but it seems true as long as people don't do dynamic loading</text>
</message>
<message>
  <ts>2020-09-30T23:33:16.805000</ts>
  <user>Zayne</user>
  <text>My system of custom variables is an exciting project. Over the past week I've already made a big deal out of two hygienerelated surprises in Racket that turned out to be misunderstandings on ny part. :p</text>
</message>
<message>
  <ts>2020-09-30T23:34:36.618000</ts>
  <user>Kiam</user>
  <text>whatcha makin? :p</text>
</message>
<message>
  <ts>2020-09-30T23:42:24.868000</ts>
  <user>Zayne</user>
  <text>The motivation of this system is to represent something like type classes or implicit arguments. Where an operation would take an implicit argument or type class constraint I\'m thinking of treating that like an anaphoric variable use.Not an anaphor that uses syntax parameters though. An anaphor more like `#%app`.And it wouldn\'t be a single namebased binding so much as a database that contains compound relations like (handwavingly) collection type T works with iterator functionality F and here\'s how.</text>
</message>
<message>
  <ts>2020-09-30T23:43:53.951000</ts>
  <user>Kiam</user>
  <text>huh I definitely don't get the details but the big picture sounds neat</text>
</message>
<message>
  <ts>2020-09-30T23:53:14.623000</ts>
  <user>Zayne</user>
  <text>I'm not sure I've figured out all the details either. Currently I have a proofofconcept system of variables that consists of arbitrary transformerphase values (matched using `equal?) that are associated with some number of runtime value bindings.</text>
</message>
<message>
  <ts>2020-09-30T23:55:25.134000</ts>
  <user>Zayne</user>
  <text>so it seems I could use this to represent values that have associated static info (including things like variables with ellipsis depths) as well as constraints that extrinsically hold static (and run time) information about other variables in scope</text>
</message>
<message>
  <ts>2020-09-30T23:55:33.192000</ts>
  <user>Zayne</user>
  <text>it could go a lot of places XD</text>
</message>
<message>
  <ts>2020-09-30T23:55:52.667000</ts>
  <user>Kiam</user>
  <text>overload resolution seems related maybe?</text>
</message>
<message>
  <ts>2020-09-30T23:56:36.132000</ts>
  <user>Zayne</user>
  <text>yeah!</text>
</message>
<message>
  <ts>2020-09-30T23:59:02.933000</ts>
  <user>Zayne</user>
  <text>anyway the first thing I wanna use it for is to make a DSL for side effects wherein some side effect systems _can_ compile simply to Racket side effects but others can compile to other languages or compile to more complex ways to model side effects within Racket</text>
</message>
<message>
  <ts>2020-10-01T00:00:03.195000</ts>
  <user>Zayne</user>
  <text>well I have my sights set low enough at the moment that I'm not aiming to compile to languages other than Racket</text>
</message>
<message>
  <ts>2020-10-01T00:05:23.451000</ts>
  <user>Zayne</user>
  <text>speaking of overload resolution I've got some ideas in mind for modules that can be customized with a set of extensions and can determine a transformed set of extensions. So if you want one of my macros to have a `set!` transformer for instance maybe I can define my macro in a way that takes extensions like that into account.</text>
</message>
<message>
  <ts>2020-10-01T00:07:23.736000</ts>
  <user>Zayne</user>
  <text>the thing I'm most hoping to use that for is defining modules which can have customized contract policies like turning off the contracts of one of their dependencies</text>
</message>
<message>
  <ts>2020-10-01T00:08:19.373000</ts>
  <user>Kiam</user>
  <text>more easily configurable contracts is something I want though I'm not yet sure in what way I want them</text>
</message>
<message>
  <ts>2020-10-01T00:08:47.259000</ts>
  <user>Kiam</user>
  <text>since it's about turning off edges between modules rather than just a straight switch on each module</text>
</message>
<message>
  <ts>2020-10-01T08:34:52.187000</ts>
  <user>Bexon</user>
  <text>@oaktownsam OCaml (on default settings) takes 0.6s Racket takes 2.5s Python takes 0.57s</text>
</message>
<message>
  <ts>2020-10-01T08:39:35.631000</ts>
  <user>Bexon</user>
  <text>interestingly if I comment everything out in Racket and leave only```scheme(define parsed (withinputfromfile jsonfile (Œª () (readjson))))```it takes longer than before (around 3s)</text>
</message>
<message>
  <ts>2020-10-01T08:55:54.409000</ts>
  <user>Bexon</user>
  <text>```scheme(define parsed (withinputfromfile jsonfile (Œª () (string&gt;jsexpr (port&gt;string)))))```2.7s :meow:</text>
</message>
<message>
  <ts>2020-10-01T09:13:45.579000</ts>
  <user>Kiam</user>
  <text>@sarna how long does it take if all you do is call `port&gt;string`?</text>
</message>
<message>
  <ts>2020-10-01T09:17:23.237000</ts>
  <user>Bexon</user>
  <text>@notjack ~0.66s</text>
</message>
<message>
  <ts>2020-10-01T09:17:37.552000</ts>
  <user>Bexon</user>
  <text>startup is around 0.37s</text>
</message>
<message>
  <ts>2020-10-01T09:46:47.678000</ts>
  <user>Bexon</user>
  <text>hmm with idiomatic OCaml I got to Python speeds</text>
</message>
<message>
  <ts>2020-10-01T10:51:08.379000</ts>
  <user>Bexon</user>
  <text>Ruby takes 0.86s :meow:</text>
</message>
<message>
  <ts>2020-10-02T08:34:53.276000</ts>
  <user>Bexon</user>
  <text>python's parser really is handtuned C there's no way around that</text>
</message>
<message>
  <ts>2020-10-02T08:35:16.522000</ts>
  <user>Bexon</user>
  <text>I'm gonna stop trying to make stuff faster I feel like it's giving me brain damage :meow:</text>
</message>
<message>
  <ts>2020-10-02T08:55:55.939000</ts>
  <user>Bexon</user>
  <text>which editor do y'all use? DrRacket?</text>
</message>
<message>
  <ts>2020-10-02T08:56:38.032000</ts>
  <user>Bexon</user>
  <text>I've been using doom emacs but support for racket breaks pretty frequently</text>
</message>
<message>
  <ts>2020-10-02T08:57:01.192000</ts>
  <user>Bexon</user>
  <text>tried vscode it's missing half of the features :meow:</text>
</message>
<message>
  <ts>2020-10-02T09:07:30.986000</ts>
  <user>Caycee</user>
  <text>vim</text>
</message>
<message>
  <ts>2020-10-02T09:08:02.768000</ts>
  <user>Bexon</user>
  <text>with some plugins? or spartan</text>
</message>
<message>
  <ts>2020-10-02T09:08:46.135000</ts>
  <user>Caycee</user>
  <text>for racket/scheme i use autopairs and rainbow</text>
</message>
<message>
  <ts>2020-10-02T09:11:58.783000</ts>
  <user>Bexon</user>
  <text>just that? wow</text>
</message>
<message>
  <ts>2020-10-02T09:22:22.653000</ts>
  <user>Caycee</user>
  <text>yeah if i need something more powerful i'll use drracket</text>
</message>
<message>
  <ts>2020-10-02T09:56:57.418000</ts>
  <user>Marilou</user>
  <text>&gt; I've been using doom emacs but support for racket breaks pretty frequently@sarna DrRacket or VSCode</text>
</message>
<message>
  <ts>2020-10-02T09:59:46.636000</ts>
  <user>Daevion</user>
  <text>&gt; which editor do y'all use? DrRacket?@sarna DrRacket serves me well.</text>
</message>
<message>
  <ts>2020-10-02T10:00:35.289000</ts>
  <user>Daevion</user>
  <text>Though I do customise with settings plugins &amp; scripts</text>
</message>
<message>
  <ts>2020-10-02T10:07:35.956000</ts>
  <user>Trason</user>
  <text>I use vscode üòÑ i dont like too many features</text>
</message>
<message>
  <ts>2020-10-02T10:38:05.440000</ts>
  <user>Daevion</user>
  <text>üòÅI like lots of features! Arrows bubbles autocomplete scripts! Yes give it to me üòÅ</text>
</message>
<message>
  <ts>2020-10-02T10:44:33.117000</ts>
  <user>Cortlin</user>
  <text>Emacs :meow:</text>
</message>
<message>
  <ts>2020-10-02T11:06:07.761000</ts>
  <user>Caycee</user>
  <text>When I use drracket there's a noticable delay after a key press and the character being shown onscreen</text>
</message>
<message>
  <ts>2020-10-02T11:06:13.230000</ts>
  <user>Caycee</user>
  <text>Is this normal?</text>
</message>
<message>
  <ts>2020-10-02T11:34:01.473000</ts>
  <user>Bexon</user>
  <text>@Deleted User do you use a distribution like doom or spacemacs?</text>
</message>
<message>
  <ts>2020-10-02T11:34:33.428000</ts>
  <user>Bexon</user>
  <text>@beru not really it doesn‚Äôt differ much from other text editors I have latencywise</text>
</message>
<message>
  <ts>2020-10-02T11:34:38.416000</ts>
  <user>Cortlin</user>
  <text>Nope</text>
</message>
<message>
  <ts>2020-10-02T11:34:41.387000</ts>
  <user>Bexon</user>
  <text>I think it‚Äôs bad with really big files tho</text>
</message>
<message>
  <ts>2020-10-02T11:34:42.073000</ts>
  <user>Cortlin</user>
  <text>Plain GNU Emacs</text>
</message>
<message>
  <ts>2020-10-02T11:34:47.737000</ts>
  <user>Bexon</user>
  <text>:meowblush:</text>
</message>
<message>
  <ts>2020-10-02T11:34:48.595000</ts>
  <user>Cortlin</user>
  <text>I don't like vistyle keybindings.</text>
</message>
<message>
  <ts>2020-10-02T11:35:15.300000</ts>
  <user>Bexon</user>
  <text>I see</text>
</message>
<message>
  <ts>2020-10-02T11:35:24.249000</ts>
  <user>Bexon</user>
  <text>spacemacs also has a ‚Äúholy‚Äù mode</text>
</message>
<message>
  <ts>2020-10-02T11:35:45.203000</ts>
  <user>Bexon</user>
  <text>it keeps the emacs bindings then</text>
</message>
<message>
  <ts>2020-10-02T11:36:19.860000</ts>
  <user>Cortlin</user>
  <text>I just install a bunch of packages I need keep some .el files under `~/.emacs.d` and that's enough for me.</text>
</message>
<message>
  <ts>2020-10-02T12:00:52.071000</ts>
  <user>Daevion</user>
  <text>&gt; Is this normal?@beru no</text>
</message>
<message>
  <ts>2020-10-02T12:05:49.528000</ts>
  <user>Daevion</user>
  <text>Please log it to GitHub.com/racket/drracket with all the usual details  Racket distribution build type and version OS/architecture/word  display details (‚Äòretina‚Äô dpi ‚Äòmagnification‚Äô)^ steps to reproduce /settings</text>
</message>
<message>
  <ts>2020-10-02T12:11:31.028000</ts>
  <user>Bexon</user>
  <text>I'll give dr racket a try again :meow:</text>
</message>
<message>
  <ts>2020-10-02T12:12:48.486000</ts>
  <user>Daevion</user>
  <text>I run it on a raspberry pi 4 with no typing lag</text>
</message>
<message>
  <ts>2020-10-02T12:13:16.350000</ts>
  <user>Bexon</user>
  <text>neato</text>
</message>
<message>
  <ts>2020-10-02T12:13:21.895000</ts>
  <user>Bexon</user>
  <text>on mine it was kinda slow iirc</text>
</message>
<message>
  <ts>2020-10-02T12:13:26.029000</ts>
  <user>Bexon</user>
  <text>but everything was slow :meow:</text>
</message>
<message>
  <ts>2020-10-02T12:13:33.133000</ts>
  <user>Daevion</user>
  <text>So it should run on low end chrome books and the like</text>
</message>
<message>
  <ts>2020-10-02T12:13:50.705000</ts>
  <user>Daevion</user>
  <text>&gt; but everything was slow :meow:@sarna ‚òπÔ∏è</text>
</message>
<message>
  <ts>2020-10-02T12:14:15.521000</ts>
  <user>Bexon</user>
  <text>the worst offender was youtube</text>
</message>
<message>
  <ts>2020-10-02T12:14:24.366000</ts>
  <user>Bexon</user>
  <text>everything worked fine just slower</text>
</message>
<message>
  <ts>2020-10-02T12:14:35.033000</ts>
  <user>Bexon</user>
  <text>but youtube was lagging as hell :meow:</text>
</message>
<message>
  <ts>2020-10-02T12:16:09.434000</ts>
  <user>Daevion</user>
  <text>Sounds like it‚Äôs not Dr racket specific you might be better off with Emacs racket mode  But change the key bindings to what works for you</text>
</message>
<message>
  <ts>2020-10-02T12:17:43.783000</ts>
  <user>Daevion</user>
  <text>I recognise that I am probably quite privileged to have a 2012 MacBook Pro I7 As my main machine</text>
</message>
<message>
  <ts>2020-10-02T12:17:59.022000</ts>
  <user>Bexon</user>
  <text>I'll try to make racket layer better in doom emacs maybe someday.. but lemme experience a good IDE first</text>
</message>
<message>
  <ts>2020-10-02T12:18:20.459000</ts>
  <user>Bexon</user>
  <text>my main machine is a desktop dr racket is snappy there</text>
</message>
<message>
  <ts>2020-10-02T12:18:35.026000</ts>
  <user>Bexon</user>
  <text>on my work laptop even emacs is kinda :meow: sometimes</text>
</message>
<message>
  <ts>2020-10-02T12:19:44.586000</ts>
  <user>Daevion</user>
  <text>&gt; my main machine is a desktop dr racket is snappy there@sarna üëç</text>
</message>
<message>
  <ts>2020-10-02T15:14:17.375000</ts>
  <user>Caycee</user>
  <text>Var will be equal to #t</text>
</message>
<message>
  <ts>2020-10-02T15:15:58.265000</ts>
  <user>Caycee</user>
  <text>Or did you mean store the conditional expression not the result?</text>
</message>
<message>
  <ts>2020-10-02T15:16:06.559000</ts>
  <user>Daevion</user>
  <text>Why not just `(define var #t)` or do you mean something like;```scheme(define isgreaterthanseven (lambda (b) (&gt; 7 b)))```</text>
</message>
<message>
  <ts>2020-10-02T15:17:05.678000</ts>
  <user>Caycee</user>
  <text>`(define var (&gt; 7 5))` like this?</text>
</message>
<message>
  <ts>2020-10-02T15:17:07.836000</ts>
  <user>Daevion</user>
  <text>`(define var &lt;)` ?</text>
</message>
<message>
  <ts>2020-10-02T15:17:24.911000</ts>
  <user>Olvin</user>
  <text>Is it an expression that you want to evaluate multiple times with possibly different results each time?</text>
</message>
<message>
  <ts>2020-10-02T15:18:02.240000</ts>
  <user>Olvin</user>
  <text>The expression `(&gt; 7 5)` will produce the same result each time so I'm confused</text>
</message>
<message>
  <ts>2020-10-02T15:21:09.143000</ts>
  <user>Olvin</user>
  <text>Please leave `'` quote out of this it's probably not what you want</text>
</message>
<message>
  <ts>2020-10-02T15:22:47.762000</ts>
  <user>Bexon</user>
  <text>but then you have to `(if var ..`</text>
</message>
<message>
  <ts>2020-10-02T15:23:02.545000</ts>
  <user>Bexon</user>
  <text>aight</text>
</message>
<message>
  <ts>2020-10-02T15:25:13.235000</ts>
  <user>Olvin</user>
  <text>What did you get to work?</text>
</message>
<message>
  <ts>2020-10-02T15:25:20.890000</ts>
  <user>Olvin</user>
  <text>I'm just worried it only halfworks</text>
</message>
<message>
  <ts>2020-10-02T15:29:52.058000</ts>
  <user>Caycee</user>
  <text>Racket has a builtin for loop tho</text>
</message>
<message>
  <ts>2020-10-02T15:32:16.289000</ts>
  <user>Olvin</user>
  <text>But if you're using recursion anyway I don't understand why you would need to save a conditional expression instead of its value</text>
</message>
<message>
  <ts>2020-10-02T15:33:35.993000</ts>
  <user>Yaw</user>
  <text>i\'m guessing this is for the loop invariant like i want to keep going until x is equal to 10 so i\'ll keep comparing x and 10 on each iteration</text>
</message>
<message>
  <ts>2020-10-02T15:34:45.832000</ts>
  <user>Yaw</user>
  <text>so basically your function can take a function as a parameter</text>
</message>
<message>
  <ts>2020-10-02T15:44:07.344000</ts>
  <user>Yaw</user>
  <text>oh you agreed with what i said so i thought you were agreeing it was the answer</text>
</message>
<message>
  <ts>2020-10-02T15:44:16.080000</ts>
  <user>Yaw</user>
  <text>you just take a function as a parameter and call that function from yours</text>
</message>
<message>
  <ts>2020-10-02T16:38:19.648000</ts>
  <user>Olvin</user>
  <text>What problem are you running into?</text>
</message>
<message>
  <ts>2020-10-02T16:49:06.303000</ts>
  <user>Olvin</user>
  <text>I'm not sure what you mean... are you talking about the `guard` procedure in the 2ndargument to `makeparameter` or something else?</text>
</message>
<message>
  <ts>2020-10-02T16:50:04.210000</ts>
  <user>Bexon</user>
  <text>@Alex Knauth I think they mean ‚Äúfunction parameter/argument‚Äù</text>
</message>
<message>
  <ts>2020-10-02T16:50:23.332000</ts>
  <user>Bexon</user>
  <text>you can just take functions as arguments in racket it‚Äôs called ‚Äúfirst class functions‚Äù</text>
</message>
<message>
  <ts>2020-10-02T16:50:25.379000</ts>
  <user>Olvin</user>
  <text>A function parameter like the `x` in `(define (f x) body)`?</text>
</message>
<message>
  <ts>2020-10-02T16:50:54.211000</ts>
  <user>Olvin</user>
  <text>Oh an argument when calling a function.</text>
</message>
<message>
  <ts>2020-10-02T16:51:11.864000</ts>
  <user>Olvin</user>
  <text>You can use `begin` to group multiple expressions together</text>
</message>
<message>
  <ts>2020-10-02T16:52:06.982000</ts>
  <user>Olvin</user>
  <text>Oh do you want the argument to be a function? Then put it in `lambda ()` or `thunk`</text>
</message>
<message>
  <ts>2020-10-02T16:53:30.664000</ts>
  <user>Olvin</user>
  <text>A function with no inputs is commonly called a thunk</text>
</message>
<message>
  <ts>2020-10-02T16:54:57.423000</ts>
  <user>Olvin</user>
  <text>About 6 years</text>
</message>
<message>
  <ts>2020-10-02T17:13:23.320000</ts>
  <user>Cortlin</user>
  <text>The formatting makes it very difficult to read.</text>
</message>
<message>
  <ts>2020-10-02T17:15:34.308000</ts>
  <user>Cortlin</user>
  <text>But here are a couple semantic tips:1. You don't need to check if the condition is equal to true. You can just say `if condition`.2. You don't need to use `begin` if your code is a single line. If you're dealing with an `if` statement with multiple lines per case you might want to consider using a `cond` instead.</text>
</message>
<message>
  <ts>2020-10-02T17:16:47.217000</ts>
  <user>Cortlin</user>
  <text>The procedure takes a `code` argument but doesn't do anything with it.</text>
</message>
<message>
  <ts>2020-10-02T17:16:53.149000</ts>
  <user>Cortlin</user>
  <text>So it just loops.</text>
</message>
<message>
  <ts>2020-10-02T17:18:25.864000</ts>
  <user>Cortlin</user>
  <text>Well you can make it work but this isn't the idiomatic way to do loops in Racket.</text>
</message>
<message>
  <ts>2020-10-02T17:19:01.211000</ts>
  <user>Cortlin</user>
  <text>Destructively incrementing an index for a loop is a very imperative idiom.</text>
</message>
<message>
  <ts>2020-10-02T17:19:05.685000</ts>
  <user>Cortlin</user>
  <text>C style if you will.</text>
</message>
<message>
  <ts>2020-10-02T17:19:16.990000</ts>
  <user>Cortlin</user>
  <text>In functional programming languages you should rely on natural recursion.</text>
</message>
<message>
  <ts>2020-10-02T17:19:39.565000</ts>
  <user>Cortlin</user>
  <text>Don't worry I'm sure you'll get a hang of it in no time.</text>
</message>
<message>
  <ts>2020-10-02T17:21:28.186000</ts>
  <user>Cortlin</user>
  <text>All forms of iteration in Racket uses recursion haha</text>
</message>
<message>
  <ts>2020-10-02T17:21:43.482000</ts>
  <user>Cortlin</user>
  <text>(or continuations but let's not get ahead of ourselves)</text>
</message>
<message>
  <ts>2020-10-02T17:22:35.033000</ts>
  <user>Cortlin</user>
  <text>I could go as far as to say while and for loops are just not used in functional programming.</text>
</message>
<message>
  <ts>2020-10-02T17:24:02.147000</ts>
  <user>Cortlin</user>
  <text>Yes but wouldn't you rather learn natural recursion?</text>
</message>
<message>
  <ts>2020-10-02T17:25:21.390000</ts>
  <user>Cortlin</user>
  <text>(the problem in your code is that you need to call `code` before recursing again)</text>
</message>
<message>
  <ts>2020-10-02T17:26:29.276000</ts>
  <user>Olvin</user>
  <text>Okay I see a problem with your while loop: the condition expression `(= 1 asd)` relies on the mutable variable `asd` but is only evaluated once so it will always be true. In order to fix this you would need a thunk there too</text>
</message>
<message>
  <ts>2020-10-02T17:27:52.310000</ts>
  <user>Olvin</user>
  <text>Turning `(= 1 asd)` into a thunk like `(thunk (= 1 asd))` means the argument is now a function with no inputs. This allows the expression `(= 1 asd)` to be evaluated multiple times to produce different results after `asd` is mutated</text>
</message>
<message>
  <ts>2020-10-02T17:32:25.674000</ts>
  <user>Olvin</user>
  <text>`begin` doesn't make it a thunk `thunk` does</text>
</message>
<message>
  <ts>2020-10-02T17:33:02.946000</ts>
  <user>Olvin</user>
  <text>also if it\'s a thunk you also need to call it whenever you want to evaluate the condition</text>
</message>
<message>
  <ts>2020-10-02T17:33:21.597000</ts>
  <user>Olvin</user>
  <text>Like you're already doing with `(code)`</text>
</message>
<message>
  <ts>2020-10-02T17:35:23.780000</ts>
  <user>Olvin</user>
  <text>You're already making `code` a thunk just do the same with `condition`</text>
</message>
<message>
  <ts>2020-10-02T17:36:51.036000</ts>
  <user>Olvin</user>
  <text>Oh and I think I see another problem: an extra `thunk` wrapping the thenbody of the `if`</text>
</message>
<message>
  <ts>2020-10-02T17:37:41.734000</ts>
  <user>Olvin</user>
  <text>`condition` is a thunk the same way `code` is so evaluating it should be `(condition)` just like you're using `(code)` in the other place</text>
</message>
<message>
  <ts>2020-10-02T18:00:06.471000</ts>
  <user>Olvin</user>
  <text>Since `condition` is a thunk the same way `code` is you need to use `(condition)` in the ifequal stuff the same way you already have `(code)` in the begin stuff</text>
</message>
<message>
  <ts>2020-10-02T18:04:47.276000</ts>
  <user>Olvin</user>
  <text>Did you fix the `condition` in the ifequal?</text>
</message>
<message>
  <ts>2020-10-02T18:07:40.287000</ts>
  <user>Olvin</user>
  <text>Then I would have thought it would produce `"final"` almost immediately because `asd` starts out at `1` so `(= 10 asd)` should start out `#false`</text>
</message>
<message>
  <ts>2020-10-02T18:10:56.526000</ts>
  <user>Olvin</user>
  <text>Can you show how you fixed the `condition` in the ifequal?</text>
</message>
<message>
  <ts>2020-10-02T18:11:53.008000</ts>
  <user>Olvin</user>
  <text>Oh there shouldn't be a `thunk` in the if only 2 `thunks` in the call to `recursive_while`</text>
</message>
<message>
  <ts>2020-10-02T18:12:40.542000</ts>
  <user>Olvin</user>
  <text>And as I said before since `condition` is already a thunk the same way `code` is you need to use`(condition)` to call it in the ifequal stuff the same way you already have `(code)` in the begin stuff</text>
</message>
<message>
  <ts>2020-10-02T18:13:05.646000</ts>
  <user>Olvin</user>
  <text>`(thunk expr)` creates a thunk doesn't call it</text>
</message>
<message>
  <ts>2020-10-02T18:26:07.348000</ts>
  <user>Olvin</user>
  <text>Wait I'm still confused why doesn't it end immediately? `(condition)` should be false on the first round</text>
</message>
<message>
  <ts>2020-10-02T18:48:15.853000</ts>
  <user>Olvin</user>
  <text>when I run it it returns `"final"` right away</text>
</message>
<message>
  <ts>2020-10-02T18:49:09.019000</ts>
  <user>Olvin</user>
  <text>which is what I would expect from a while loop with that condition and body</text>
</message>
<message>
  <ts>2020-10-02T18:49:27.892000</ts>
  <user>Olvin</user>
  <text>I don't know why it looks like for you it's printing `test` over and over again</text>
</message>
<message>
  <ts>2020-10-02T18:52:36.552000</ts>
  <user>Olvin</user>
  <text>Can you copypaste directly instead of screenshoting?</text>
</message>
<message>
  <ts>2020-10-02T19:10:53.743000</ts>
  <user>Olvin</user>
  <text>Oh there's an extra `'` quote that shouldn't be there</text>
</message>
<message>
  <ts>2020-10-02T19:12:16.224000</ts>
  <user>Olvin</user>
  <text>Wait the screenshot is different now</text>
</message>
<message>
  <ts>2020-10-02T19:12:40.254000</ts>
  <user>Olvin</user>
  <text>It's not this anymore</text>
</message>
<message>
  <ts>2020-10-02T19:12:55.116000</ts>
  <user>Olvin</user>
  <text>What happened to that did you revert?</text>
</message>
<message>
  <ts>2020-10-02T19:13:34.703000</ts>
  <user>Olvin</user>
  <text>What was broken about that one?</text>
</message>
<message>
  <ts>2020-10-02T19:13:45.415000</ts>
  <user>Olvin</user>
  <text>When I run that it finishes with `"final"`</text>
</message>
<message>
  <ts>2020-10-02T19:14:45.473000</ts>
  <user>Olvin</user>
  <text>No that one's different</text>
</message>
<message>
  <ts>2020-10-02T19:14:56.897000</ts>
  <user>Olvin</user>
  <text>There was a version that looked like the image I posted above</text>
</message>
<message>
  <ts>2020-10-02T19:15:01.638000</ts>
  <user>Olvin</user>
  <text>what happened to that version?</text>
</message>
<message>
  <ts>2020-10-02T19:15:34.790000</ts>
  <user>Olvin</user>
  <text>You posted it here what happened to it?https://discordapp.com/channels/571040468092321801/618895179343986688/761651995559723049</text>
</message>
<message>
  <ts>2020-10-02T19:17:01.183000</ts>
  <user>Olvin</user>
  <text>That one looks closer to right than anything else</text>
</message>
<message>
  <ts>2020-10-02T19:18:13.100000</ts>
  <user>Olvin</user>
  <text>It's not the same. It doesn't have the `thunk` around the `(= 10 asd)` and it doesn't have the call around the use of the condition in the ifequal</text>
</message>
<message>
  <ts>2020-10-02T19:19:18.519000</ts>
  <user>Olvin</user>
  <text>You keep changing it faster than I can try to help you its hard to keep up</text>
</message>
<message>
  <ts>2020-10-02T19:20:43.598000</ts>
  <user>Olvin</user>
  <text>When I manually write that and run it it returns `"final"` without printing any `test` things. Is that what it does for you?</text>
</message>
<message>
  <ts>2020-10-02T19:22:02.089000</ts>
  <user>Olvin</user>
  <text>So that's a good start. It terminates doesn't go into an infinite loop that's progress</text>
</message>
<message>
  <ts>2020-10-02T19:23:21.109000</ts>
  <user>Olvin</user>
  <text>And it\'s the result I would expect from a while loop like:```let asd = 1;while (10 === asd) { print("test"); asd = asd + 1;}```</text>
</message>
<message>
  <ts>2020-10-02T19:23:50.969000</ts>
  <user>Olvin</user>
  <text>No it's adding 1 just fine</text>
</message>
<message>
  <ts>2020-10-02T19:24:06.787000</ts>
  <user>Olvin</user>
  <text>The problem is that the condition is false from the start</text>
</message>
<message>
  <ts>2020-10-02T19:24:40.919000</ts>
  <user>Olvin</user>
  <text>`asd` starts as 1so `(= 10 asd)` starts as false</text>
</message>
<message>
  <ts>2020-10-02T19:25:56.524000</ts>
  <user>Olvin</user>
  <text>Usually when writing while loops where you want many iterations you want the condition to be true at the start and remain true for as many times as you want iterations</text>
</message>
<message>
  <ts>2020-10-02T19:31:02.914000</ts>
  <user>Olvin</user>
  <text>At this point I think the definition of `recursive_while` looks right. But the use of the while loop is wrong in the same way```let asd = 1;while (10 === asd) { print("test"); asd = asd + 1;}```is wrong</text>
</message>
<message>
  <ts>2020-10-02T19:32:11.550000</ts>
  <user>Olvin</user>
  <text>Well where did you learn to use while loops then?</text>
</message>
<message>
  <ts>2020-10-02T19:33:01.364000</ts>
  <user>Cortlin</user>
  <text>You should read the Racket tutorial.</text>
</message>
<message>
  <ts>2020-10-02T19:35:35.215000</ts>
  <user>Olvin</user>
  <text>Well the thing with `let asd = 1;` is in other languages". I just meant to say that your Racket program isn\'t wrong because of Racket stuff it\'s wrong for reasons that would still be wrong in other languages</text>
</message>
<message>
  <ts>2020-10-02T21:43:17.332000</ts>
  <user>Yaw</user>
  <text>i think it is nice to explain that writing `thunk` is like writing `lambda ()`</text>
</message>
<message>
  <ts>2020-10-02T22:26:42.238000</ts>
  <user>Olvin</user>
  <text>I'm not sure what you mean</text>
</message>
<message>
  <ts>2020-10-02T22:27:12.892000</ts>
  <user>Olvin</user>
  <text>The `let asd = 1;` in other languages corresponds to the `(define asd 1)` in Racket</text>
</message>
<message>
  <ts>2020-10-02T22:29:40.811000</ts>
  <user>Olvin</user>
  <text>The `let` wasn't event the point of what I was talking about. I was talking about the `while` loop</text>
</message>
<message>
  <ts>2020-10-02T22:30:49.485000</ts>
  <user>Olvin</user>
  <text>The `while` loop there is wrong if you intended it to iterate multiple times</text>
</message>
<message>
  <ts>2020-10-02T22:34:14.743000</ts>
  <user>Olvin</user>
  <text>I'm wondering if you'll be able to understand why that while loop is wrong if I write it in a language you understand better... that's why I asked where you learned to use while loops</text>
</message>
<message>
  <ts>2020-10-02T22:40:49.072000</ts>
  <user>Olvin</user>
  <text>So do you see how the while loop here is wrong?:```asd = 1while 10 == asd: print("test") asd = asd + 1```</text>
</message>
<message>
  <ts>2020-10-04T17:51:38.481000</ts>
  <user>Caycee</user>
  <text>is there a way to get vim keybindings on the racket repl?</text>
</message>
<message>
  <ts>2020-10-04T19:48:23.146000</ts>
  <user>Poema</user>
  <text>just use vim :p</text>
</message>
<message>
  <ts>2020-10-04T19:48:45.286000</ts>
  <user>Poema</user>
  <text>not the best lisper out there but i found a half decent plugin</text>
</message>
<message>
  <ts>2020-10-04T19:51:21.319000</ts>
  <user>Daevion</user>
  <text>https://github.com/takikawa/drracketvimtool</text>
</message>
<message>
  <ts>2020-10-04T19:52:54.744000</ts>
  <user>Poema</user>
  <text>did anyone finish sicp?</text>
</message>
<message>
  <ts>2020-10-04T19:53:41.480000</ts>
  <user>Poema</user>
  <text>i have started it recently and not sure what's the correct plan to follow in order to get the most out of it been watching the lectures while following along in the book</text>
</message>
<message>
  <ts>2020-10-04T20:58:34.469000</ts>
  <user>Cortlin</user>
  <text>The best advice I can give is: Don't skip any exercises and don't move on to the next chapter until you make sure you've fully grasped what's being taught.</text>
</message>
<message>
  <ts>2020-10-04T20:59:10.793000</ts>
  <user>Cortlin</user>
  <text>It's a very information dense book and every chapter builds on what is taught in prior chapters.</text>
</message>
<message>
  <ts>2020-10-04T21:00:00.427000</ts>
  <user>Cortlin</user>
  <text>If you miss something in a hurry to move on it makes it even more difficult to move further later on.</text>
</message>
<message>
  <ts>2020-10-04T21:01:13.896000</ts>
  <user>Cortlin</user>
  <text>So yeah very few people actually finish the book covertocover for this reason. But even reading only a part of it teaches a lot IMO.</text>
</message>
<message>
  <ts>2020-10-04T21:01:51.956000</ts>
  <user>Cortlin</user>
  <text>I've personally only read 2/3 of it.</text>
</message>
<message>
  <ts>2020-10-05T07:17:04.617000</ts>
  <user>Zayne</user>
  <text>It's saying your function is missing the expression to compute its result. It just ends with definitions no result.</text>
</message>
<message>
  <ts>2020-10-05T07:19:51.946000</ts>
  <user>Zayne</user>
  <text>(If you already do have an expression in there that you intend to be the result you might be able to fix this by simply moving it to the end after the definitions.)</text>
</message>
<message>
  <ts>2020-10-05T08:42:31.989000</ts>
  <user>Bexon</user>
  <text>or you‚Äôre just not used to it</text>
</message>
<message>
  <ts>2020-10-05T10:18:02.496000</ts>
  <user>Caycee</user>
  <text>I started racket/scheme around a month ago and at first I hated it. I can't do anything. But the more I code in racket the more I like it. It's fun.</text>
</message>
<message>
  <ts>2020-10-05T13:37:00.903000</ts>
  <user>Bexon</user>
  <text>@Dav1s wasn‚Äôt it like this when you first started coding in C++/Python?</text>
</message>
<message>
  <ts>2020-10-05T13:38:33.161000</ts>
  <user>Bexon</user>
  <text>in Racket you‚Äôll get 0 precedence errors :meow:</text>
</message>
<message>
  <ts>2020-10-06T10:20:45.162000</ts>
  <user>Bexon</user>
  <text>is there really no zlib racket wrapper? :meow:</text>
</message>
<message>
  <ts>2020-10-06T12:19:28.259000</ts>
  <user>Marilou</user>
  <text>just discovered that VSCode has draw.io integration now thats pretty darn cool</text>
</message>
<message>
  <ts>2020-10-06T14:01:23.710000</ts>
  <user>Cortlin</user>
  <text>@sarna You know what to make now!</text>
</message>
<message>
  <ts>2020-10-06T14:01:54.563000</ts>
  <user>Bexon</user>
  <text>@Deleted User yeah I tried as I couldn‚Äôt really work now (internal network dead)</text>
</message>
<message>
  <ts>2020-10-06T14:01:59.658000</ts>
  <user>Bexon</user>
  <text>failed miserably once again</text>
</message>
<message>
  <ts>2020-10-06T14:02:02.049000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-06T14:02:28.785000</ts>
  <user>Cortlin</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-06T14:02:56.450000</ts>
  <user>Cortlin</user>
  <text>Never worry for miserable failures are building blocks for glorious achievements.</text>
</message>
<message>
  <ts>2020-10-06T14:03:34.399000</ts>
  <user>Cortlin</user>
  <text>I wanted it to sound like an exotic proverb but it ended up coming across like LinkedIn influencer deepity rubbish.</text>
</message>
<message>
  <ts>2020-10-06T14:03:45.183000</ts>
  <user>Cortlin</user>
  <text>But you get the point</text>
</message>
<message>
  <ts>2020-10-06T14:06:28.310000</ts>
  <user>Bexon</user>
  <text>:meowblush:</text>
</message>
<message>
  <ts>2020-10-06T14:08:16.916000</ts>
  <user>Bexon</user>
  <text>http://zlib.net/manual.html</text>
</message>
<message>
  <ts>2020-10-06T14:08:27.957000</ts>
  <user>Bexon</user>
  <text>look at these structs though :meowloween:</text>
</message>
<message>
  <ts>2020-10-06T14:08:58.839000</ts>
  <user>Bexon</user>
  <text>I know basic C but it has so many weird things</text>
</message>
<message>
  <ts>2020-10-06T14:10:09.085000</ts>
  <user>Bexon</user>
  <text>what‚Äôs z_const? what‚Äôs FAR? pointers to alloc/free in the struct??</text>
</message>
<message>
  <ts>2020-10-06T14:11:50.284000</ts>
  <user>Bexon</user>
  <text>what‚Äôs ZEXTERN and ZEXPORT lol</text>
</message>
<message>
  <ts>2020-10-06T14:12:26.968000</ts>
  <user>Cortlin</user>
  <text>It's a pointer.</text>
</message>
<message>
  <ts>2020-10-06T14:12:32.772000</ts>
  <user>Bexon</user>
  <text>I tried to copy some other scheme‚Äôs bindings (tried with guile and chicken) but well big surprise  FFI systems are kinda different</text>
</message>
<message>
  <ts>2020-10-06T14:12:55.241000</ts>
  <user>Cortlin</user>
  <text>Pointers are easy to represent in FFI because regardless of what type they point at they invariably have the same size.</text>
</message>
<message>
  <ts>2020-10-06T14:13:21.961000</ts>
  <user>Bexon</user>
  <text>which one is a pointer though?</text>
</message>
<message>
  <ts>2020-10-06T14:13:38.058000</ts>
  <user>Cortlin</user>
  <text>The ones with `` in the type name. :meow:</text>
</message>
<message>
  <ts>2020-10-06T14:13:42.788000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-06T14:13:49.294000</ts>
  <user>Bexon</user>
  <text>that I know</text>
</message>
<message>
  <ts>2020-10-06T14:14:36.337000</ts>
  <user>Cortlin</user>
  <text>At the end of the day all C is built on the trick of treating chunks of continuous memory as data structures (pseudoarrays unions structs) and doing pointer trickery to keep up the pretence.</text>
</message>
<message>
  <ts>2020-10-06T14:15:17.426000</ts>
  <user>Bexon</user>
  <text>yeah and this approach is very confusing  for me at least</text>
</message>
<message>
  <ts>2020-10-06T14:16:06.514000</ts>
  <user>Cortlin</user>
  <text>Some hail it as being closer to the way the computer works but I think it\'s actually very misleading because we aren\'t using VAXen any more.</text>
</message>
<message>
  <ts>2020-10-06T14:16:34.705000</ts>
  <user>Cortlin</user>
  <text>https://queue.acm.org/detail.cfm?id=3212479</text>
</message>
<message>
  <ts>2020-10-06T14:17:23.978000</ts>
  <user>Cortlin</user>
  <text>In reality pointers are secretly an abstraction over the black box of actual physical memory.</text>
</message>
<message>
  <ts>2020-10-06T14:41:01.674000</ts>
  <user>Bexon</user>
  <text>yeah C was close to PDP11.. it‚Äôs not so close to modern CPUs (‚ÄúC abstract machine‚Äù is a thing)</text>
</message>
<message>
  <ts>2020-10-06T14:41:22.316000</ts>
  <user>Bexon</user>
  <text>anyway that doesn‚Äôt bring me closer to a working impl :meow:</text>
</message>
<message>
  <ts>2020-10-06T14:43:40.249000</ts>
  <user>Bexon</user>
  <text>https://github.com/r1b/zlib/blob/master/zlib.scm I‚Äôll try to copy this</text>
</message>
<message>
  <ts>2020-10-06T14:51:39.960000</ts>
  <user>Daevion</user>
  <text>https://youtu.be/vaLKm9FE8oo</text>
</message>
<message>
  <ts>2020-10-06T14:55:22.890000</ts>
  <user>Bexon</user>
  <text>sounds nice can you repost in #offtopic @StephenD? it‚Äôs slowermoving than general üëÄ</text>
</message>
<message>
  <ts>2020-10-06T14:55:54.866000</ts>
  <user>Bexon</user>
  <text>~~this way I‚Äôll come back to it later instead of forgetting :meow:~~</text>
</message>
<message>
  <ts>2020-10-06T15:09:04.700000</ts>
  <user>Bexon</user>
  <text>thank you :meowblush:</text>
</message>
<message>
  <ts>2020-10-06T15:13:39.555000</ts>
  <user>Daevion</user>
  <text>I posted here deliberately as I really believe this video addresses an issue that affects all PL communities racket included. I've posted in #resources for future references but I've also put it in off topic too. (it also got posted in general on racket slack for the same reason)</text>
</message>
<message>
  <ts>2020-10-06T15:33:37.676000</ts>
  <user>Bexon</user>
  <text>yeah I skimmed through it and saw a lot of good stuff</text>
</message>
<message>
  <ts>2020-10-06T15:36:49.676000</ts>
  <user>Bexon</user>
  <text>I must say this discord is one of the friendliest and most humbling communities I‚Äôve been part of :meowblush:</text>
</message>
<message>
  <ts>2020-10-06T15:39:45.256000</ts>
  <user>Mayalynn</user>
  <text>Fr i just joined and u peeps were really nice</text>
</message>
<message>
  <ts>2020-10-06T16:05:29.313000</ts>
  <user>Daevion</user>
  <text>Thanks for the feedback @AcerbicVeil#2790 &amp; @sarna#3904  that is the goal</text>
</message>
<message>
  <ts>2020-10-06T16:13:52.736000</ts>
  <user>Britten</user>
  <text>@sarna what are you going to do with zlib?</text>
</message>
<message>
  <ts>2020-10-06T16:15:23.223000</ts>
  <user>Bexon</user>
  <text>@oaktownsam trying to make a discord bot library</text>
</message>
<message>
  <ts>2020-10-06T16:15:25.185000</ts>
  <user>Bexon</user>
  <text>https://discord.com/developers/docs/topics/gateway#receivingpayloads</text>
</message>
<message>
  <ts>2020-10-06T16:23:43.915000</ts>
  <user>Daevion</user>
  <text>:meow:bot</text>
</message>
<message>
  <ts>2020-10-06T16:24:06.351000</ts>
  <user>Bexon</user>
  <text>kotbot</text>
</message>
<message>
  <ts>2020-10-06T16:24:57.816000</ts>
  <user>Kiam</user>
  <text>&gt; Never worry for miserable failures are building blocks for glorious achievements.@Deleted User _wow_</text>
</message>
<message>
  <ts>2020-10-06T16:24:58.277000</ts>
  <user>Bexon</user>
  <text>there‚Äôs already one library for racket but the author abandoned it and they write haskell now</text>
</message>
<message>
  <ts>2020-10-06T16:29:41.772000</ts>
  <user>Bexon</user>
  <text>wanted to post their github status but they changed it</text>
</message>
<message>
  <ts>2020-10-06T16:29:54.429000</ts>
  <user>Bexon</user>
  <text>but well there‚Äôs a blog post</text>
</message>
<message>
  <ts>2020-10-06T16:30:10.004000</ts>
  <user>Bexon</user>
  <text>&gt; polysemy: Higherorder lowboilerplate zerocost free monads.</text>
</message>
<message>
  <ts>2020-10-06T16:30:11.956000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-06T16:30:29.767000</ts>
  <user>Bexon</user>
  <text>and I‚Äôm here trying to send a hello payload</text>
</message>
<message>
  <ts>2020-10-06T16:49:35.388000</ts>
  <user>Cortlin</user>
  <text>I have come to the conclusion that zerocost has no meaning in computer science.</text>
</message>
<message>
  <ts>2020-10-06T16:49:52.657000</ts>
  <user>Cortlin</user>
  <text>zerocost abstractions is a marketing buzzword</text>
</message>
<message>
  <ts>2020-10-06T17:05:24.434000</ts>
  <user>Olvin</user>
  <text>zerocost abstractions usually are only zerocost in very limited circumstances. If you limit them to only situations where they have zerocost they aren\'t really abstractions anymore. I guess it\'s used as abstractions with specialcases that are zerocost when optimized"?</text>
</message>
<message>
  <ts>2020-10-06T17:05:58.646000</ts>
  <user>Olvin</user>
  <text>But then abstractions with specialcases is the part that confuses things</text>
</message>
<message>
  <ts>2020-10-06T17:51:14.738000</ts>
  <user>Yaw</user>
  <text>@sarna this is the nicest discord community i've joined (:</text>
</message>
<message>
  <ts>2020-10-06T18:00:33.345000</ts>
  <user>Kiam</user>
  <text>polysemy specifically is also definitely not zero cost</text>
</message>
<message>
  <ts>2020-10-06T18:02:00.242000</ts>
  <user>Kiam</user>
  <text>it has benchmarks but they're wrong along with most other effect system benchmarks because benchmarking haskell algebraic effects libraries is extremely complex and poorly understood</text>
</message>
<message>
  <ts>2020-10-06T18:24:58.140000</ts>
  <user>Bexon</user>
  <text>benchmarks are always wrong</text>
</message>
<message>
  <ts>2020-10-06T18:26:04.850000</ts>
  <user>Bexon</user>
  <text>‚Äúhow fast this thing can be on a small batch of artificial inputs‚Äù is never important ‚Äúis my program fast enough‚Äù is always important</text>
</message>
<message>
  <ts>2020-10-06T18:26:30.141000</ts>
  <user>Bexon</user>
  <text>I‚Äôm a guilty benchmarker I wrote this for myself :meowblush:</text>
</message>
<message>
  <ts>2020-10-06T18:39:47.820000</ts>
  <user>Kiam</user>
  <text>in this specific case it was mostly because the benchmarks are single files which _massively_ changes how aggressive GHC is when inlining and specializing typeclass instances</text>
</message>
<message>
  <ts>2020-10-06T18:41:27.273000</ts>
  <user>Bexon</user>
  <text>How To Speed Up Your Haskell Program With This One Weird Trick</text>
</message>
<message>
  <ts>2020-10-06T18:41:55.956000</ts>
  <user>Bexon</user>
  <text>the weird trick: `cat .hs &gt; optimized.hs`</text>
</message>
<message>
  <ts>2020-10-06T18:42:08.713000</ts>
  <user>Kiam</user>
  <text>lol</text>
</message>
<message>
  <ts>2020-10-06T18:42:52.912000</ts>
  <user>Kiam</user>
  <text>package manager? I hardly know er!</text>
</message>
<message>
  <ts>2020-10-06T18:43:20.069000</ts>
  <user>Kiam</user>
  <text>(I am slightly delirious from lack of sleep)</text>
</message>
<message>
  <ts>2020-10-06T18:47:40.966000</ts>
  <user>Bexon</user>
  <text>go get some rest we‚Äôll be there when you come back :meowblush:</text>
</message>
<message>
  <ts>2020-10-06T21:45:28.761000</ts>
  <user>Britten</user>
  <text>Doing some scribble and package stuff today. I think one of the problems I have with the package system is how I just end up cribbing parts of `info.rkt` files from other packages on github.</text>
</message>
<message>
  <ts>2020-10-06T22:51:14.004000</ts>
  <user>Kiam</user>
  <text>IMO `#lang info` would benefit more than any other `#lang` from a protocol for Racket languages to expose autoformatters and static analyzers to IDEs</text>
</message>
<message>
  <ts>2020-10-06T22:57:15.472000</ts>
  <user>Kiam</user>
  <text>anyway today I have a wish for a tool that would take a rebellion stream pipeline like this:```scheme(transduce (inrange 0 20) (filtering even?) (mapping ) (taking 5) #:into intolist)```...and generate an animated diagram showing the values moving through the pipeline and what order the state transitions happen in</text>
</message>
<message>
  <ts>2020-10-07T00:32:39.087000</ts>
  <user>Kiam</user>
  <text>@oaktownsam you've used transducers with IO right? I'm looking more closely at transducer finishing and trying to figure out what behavior I want</text>
</message>
<message>
  <ts>2020-10-07T00:37:23.634000</ts>
  <user>Britten</user>
  <text>I have but it's been a while.</text>
</message>
<message>
  <ts>2020-10-07T00:40:17.088000</ts>
  <user>Britten</user>
  <text>@StephenD thanks for posting the video. It was long but worth it.</text>
</message>
<message>
  <ts>2020-10-07T07:33:44.680000</ts>
  <user>Bexon</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-07T07:34:01.435000</ts>
  <user>Bexon</user>
  <text>&gt; called hyphen&gt;camelcase&gt; performs hyphen&gt;titlecase</text>
</message>
<message>
  <ts>2020-10-07T07:34:18.575000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-07T07:46:04.961000</ts>
  <user>Kiam</user>
  <text>missed opportunity to call it kebab case</text>
</message>
<message>
  <ts>2020-10-07T07:48:46.138000</ts>
  <user>Bexon</user>
  <text>yeah but why is the first letter uppercase :meow:</text>
</message>
<message>
  <ts>2020-10-07T07:49:02.996000</ts>
  <user>Bexon</user>
  <text>I also have a weird error</text>
</message>
<message>
  <ts>2020-10-07T07:49:19.368000</ts>
  <user>Bexon</user>
  <text>it found zlib but not a definition that I'm fairly sure is in it?</text>
</message>
<message>
  <ts>2020-10-07T07:52:40.001000</ts>
  <user>Bexon</user>
  <text>added a version same issue</text>
</message>
<message>
  <ts>2020-10-07T07:56:30.900000</ts>
  <user>Yaw</user>
  <text>i think `inflateInit` is a c macro which expands to a call to `inflateInit_`</text>
</message>
<message>
  <ts>2020-10-07T07:57:22.863000</ts>
  <user>Yaw</user>
  <text>so it doesn't end up being an actual symbol in the shared object</text>
</message>
<message>
  <ts>2020-10-07T08:06:45.045000</ts>
  <user>Bexon</user>
  <text>@Plane you're right!</text>
</message>
<message>
  <ts>2020-10-07T08:06:47.121000</ts>
  <user>Bexon</user>
  <text>https://refspecs.linuxbase.org/LSB_3.0.0/LSBCoregeneric/LSBCoregeneric/libz.html</text>
</message>
<message>
  <ts>2020-10-07T08:07:02.211000</ts>
  <user>Bexon</user>
  <text>chicken bindings just bind to `inflateInit` weird</text>
</message>
<message>
  <ts>2020-10-07T10:05:32.281000</ts>
  <user>Bexon</user>
  <text>describe doesn't work üò©</text>
</message>
<message>
  <ts>2020-10-07T10:19:20.534000</ts>
  <user>Bexon</user>
  <text>@Deleted User I'm progressing (very slowly) thanks for encouraging me to try again :meowblush:</text>
</message>
<message>
  <ts>2020-10-07T11:42:15.945000</ts>
  <user>Caycee</user>
  <text>What's gamejam?Is it an event where you develop games in a limited span of time?</text>
</message>
<message>
  <ts>2020-10-07T11:51:58.643000</ts>
  <user>Bexon</user>
  <text>yep</text>
</message>
<message>
  <ts>2020-10-07T11:56:02.179000</ts>
  <user>Caycee</user>
  <text>When's the next one?</text>
</message>
<message>
  <ts>2020-10-07T11:56:43.105000</ts>
  <user>Caycee</user>
  <text>Also any resources on making a game I'd like to try making one</text>
</message>
<message>
  <ts>2020-10-07T12:19:22.192000</ts>
  <user>Bexon</user>
  <text>as for the next one  no idea</text>
</message>
<message>
  <ts>2020-10-07T12:19:26.389000</ts>
  <user>Bexon</user>
  <text>resources  https://nostarch.com/realmofracket.htm</text>
</message>
<message>
  <ts>2020-10-07T15:24:17.454000</ts>
  <user>Olvin</user>
  <text>No but it will be scoped so it's only visible inside it not outside</text>
</message>
<message>
  <ts>2020-10-07T15:24:58.016000</ts>
  <user>Olvin</user>
  <text>My guess is the teacher is saying don't do it for now until they explain scope further then you can do it</text>
</message>
<message>
  <ts>2020-10-07T15:26:04.293000</ts>
  <user>Olvin</user>
  <text>If that's the case then you might have misheard or misunderstood? I'm confused about why v7.8 would be relevant?</text>
</message>
<message>
  <ts>2020-10-07T15:30:31.095000</ts>
  <user>Olvin</user>
  <text>If he mentioned v7.8 specifically the teacher is probably referring to a different concept... idk if I can find it in the 7.8 release notes?</text>
</message>
<message>
  <ts>2020-10-07T15:36:43.405000</ts>
  <user>Olvin</user>
  <text>It's also possible the teacher is talking about a slightly different language other than Racket. When I was first learning I was told something similar but about Beginning Student Language not Racket. Then eventually we as a class moved from Beginning Student Language up to Intermediate Student Language and suddenly we got scope and we could nest function definitions</text>
</message>
<message>
  <ts>2020-10-07T15:37:43.514000</ts>
  <user>Britten</user>
  <text>@sarna chicken can just use the name because they compile scheme to C so they can use all of the preprocessor stuff</text>
</message>
<message>
  <ts>2020-10-07T15:38:09.807000</ts>
  <user>Britten</user>
  <text>It's really annoying that you cannot make your own ffi naming conventions.</text>
</message>
<message>
  <ts>2020-10-07T15:46:38.091000</ts>
  <user>Bexon</user>
  <text>@oaktownsam yeah :( I ended up using `#:cid`</text>
</message>
<message>
  <ts>2020-10-07T15:46:52.916000</ts>
  <user>Bexon</user>
  <text>if you have some time please take a look at #help</text>
</message>
<message>
  <ts>2020-10-07T15:47:01.119000</ts>
  <user>Bexon</user>
  <text>I have no idea how to solve that</text>
</message>
<message>
  <ts>2020-10-07T15:47:31.321000</ts>
  <user>Britten</user>
  <text>@beru The LISP gamejam just completed https://itch.io/jam/autumnlispgamejam2020 . I can't remember when/if they do a Spring one. It probably won't be until March/April/May. We did a Racket one last November but I don't think there are plans for one this year (yet)</text>
</message>
<message>
  <ts>2020-10-07T16:42:16.875000</ts>
  <user>Britten</user>
  <text>I have finally published a Racket package. It only took me 12 years to get enough in order to do something.https://docs.racketlang.org/keyring/index.html</text>
</message>
<message>
  <ts>2020-10-07T16:53:24.767000</ts>
  <user>Daevion</user>
  <text>https://www.youtube.com/watch?v=QbF5NUgYL4</text>
</message>
<message>
  <ts>2020-10-07T20:36:03.089000</ts>
  <user>Daevion</user>
  <text>VSCode users what extensions do you use for Racket programming?https://marketplace.visualstudio.com/search?term=Racket&amp;target=VSCode&amp;category=Programming%20Languages&amp;sortBy=RelevanceI‚Äôm updating the wiki page https://github.com/racket/racket/wiki/IDE%27sandtexteditorsbut I‚Äôm not a VSC user so I need your advice!</text>
</message>
<message>
  <ts>2020-10-07T20:54:32.241000</ts>
  <user>Bexon</user>
  <text>‚Äúracket‚Äù is just syntax highlighting it‚Äôs also kinda buggy IIRC</text>
</message>
<message>
  <ts>2020-10-07T20:54:36.387000</ts>
  <user>Bexon</user>
  <text>I used magic racket</text>
</message>
<message>
  <ts>2020-10-07T20:54:54.704000</ts>
  <user>Bexon</user>
  <text>it was.. okay but had like 10% of the features of dr racket</text>
</message>
<message>
  <ts>2020-10-09T15:24:22.454000</ts>
  <user>Daevion</user>
  <text>sorry @Dav1s I'm deleting the video  please feel free to post in #offtopic</text>
</message>
<message>
  <ts>2020-10-09T22:24:21.019000</ts>
  <user>Chara</user>
  <text>Dav1ss  functions declared inside of other functions can't tested independently. I would agree that this makes it a bad idea for code written in a class. The only way I think it is ok is to capture arguments and then call the real function that you were able to test.</text>
</message>
<message>
  <ts>2020-10-10T03:21:07.874000</ts>
  <user>Brayan</user>
  <text>as in you want the return value of a function to be a function? if so you just return a function/lambda:```lisp#lang racket(define (makeadder x) (lambda (y) (+ x y)))&gt; (define plus7 (makeadder 7))&gt; (plus7 3)=&gt; 10```</text>
</message>
<message>
  <ts>2020-10-10T03:24:36.932000</ts>
  <user>Brayan</user>
  <text>or although there are some extra caveats to be aware of you could use `curry`:```lisp&gt; (define plus7 (curry + 7))&gt; (plus7 8)15```</text>
</message>
<message>
  <ts>2020-10-10T04:58:47.850000</ts>
  <user>Olvin</user>
  <text>A curried function is a function that can be partially appliedor in other words it can take its arguments in multiple groups.This means when you apply it to the first group of arguments it produces a function that can then accept the second group of arguments.One class of these are functions with a first group of arguments as configuration options and a second group of arguments as user input. If you\'re familiar with commandline stuff this might seem familiar as the commandline arguments and the stdin input stream".For example: a searching function might take a first group of arguments as the needle to search for and the second group of arguments as the haystack to search through"```(define ((search needle) haystack) ....)```If you\'re searching for a needle in only one haystack you can call it like this```((search needle") hayneedlestack")```But the currying becomes more helpful when you might want to search for the same needle in multiple haystacks:```(define f (search needle"))(f hayneedlestack")(f hensneedleteeth")(f phoneedlethimknow")```By using the same first group partial function on many different second groups of inputs.Currying also helps when higherorder functions such as `map` take functions as input:```(map (search needle") (list hayneedlestack hensneedleteeth phoneedlethimknow"))```</text>
</message>
<message>
  <ts>2020-10-11T05:25:09.004000</ts>
  <user>Brayan</user>
  <text>well Racket doesn't have return and not all languages have the same definition of return but that Racket code is functionally equivalent to this python code that returns a lambda (which is the sense of return to which I assume you're referring):```pythondef adder(x): return lambda y: x + y```</text>
</message>
<message>
  <ts>2020-10-13T20:36:01.623000</ts>
  <user>Rynlee</user>
  <text>```scheme(define/contract (add x) (&gt; natural? natural?) (+ x 1))```</text>
</message>
<message>
  <ts>2020-10-13T20:36:09.067000</ts>
  <user>Rynlee</user>
  <text>Is it normal to write your functions with contracts?</text>
</message>
<message>
  <ts>2020-10-13T20:36:13.453000</ts>
  <user>Rynlee</user>
  <text>Like just as a general rule?</text>
</message>
<message>
  <ts>2020-10-13T20:36:32.897000</ts>
  <user>Rynlee</user>
  <text>I think I'm misunderstanding their use it looks like you can use them to check types</text>
</message>
<message>
  <ts>2020-10-13T20:42:30.091000</ts>
  <user>Olvin</user>
  <text>I think it's less encouraged to use `define/contract` and more encouraged to use `define` but export it with a contract with `provide`+`contractout` for example:```(provide (contractout [add (&gt; natural? natural?)]))(define (add x) (+ x 1))```The difference is where the contract boundary goes: with `define/contract` the boundary is between the function and the rest of the module vs with `define`+`provide`+`contractout` the boundary is between the module and whoever uses it</text>
</message>
<message>
  <ts>2020-10-13T20:53:34.763000</ts>
  <user>Kiam</user>
  <text>If you're writing code in multiple files I recommend `contractout`. If you're writing all your code in a single file I recommend `define/contract`.</text>
</message>
<message>
  <ts>2020-10-13T21:25:45.833000</ts>
  <user>Rynlee</user>
  <text>Thank you both for your answers</text>
</message>
<message>
  <ts>2020-10-14T04:06:48.029000</ts>
  <user>Yaw</user>
  <text>those answers are helpful to me too it makes sense but i'd never really thought about it before</text>
</message>
<message>
  <ts>2020-10-14T04:07:10.094000</ts>
  <user>Yaw</user>
  <text>there are a lot of features in racket i don't have that much experience with but that seem pretty neat</text>
</message>
<message>
  <ts>2020-10-14T06:01:02.479000</ts>
  <user>Britten</user>
  <text>Also remember that contracts are not free and depending on the structure of your code can make things slow</text>
</message>
<message>
  <ts>2020-10-14T06:13:41.892000</ts>
  <user>Baleigh</user>
  <text>Adding to what @oaktownsam said: always use contract profiling if you use contracts and performance is important for your application.</text>
</message>
<message>
  <ts>2020-10-14T06:45:16.585000</ts>
  <user>Bexon</user>
  <text>can I export a version of a function with and without a contract?</text>
</message>
<message>
  <ts>2020-10-14T06:45:22.854000</ts>
  <user>Bexon</user>
  <text>foo and foo/unsafe let‚Äôs say</text>
</message>
<message>
  <ts>2020-10-14T08:31:16.997000</ts>
  <user>Kiam</user>
  <text>yes `contractout` has a way to automatically do that</text>
</message>
<message>
  <ts>2020-10-14T08:31:45.691000</ts>
  <user>Kiam</user>
  <text>`#:unprotectedsubmodule`</text>
</message>
<message>
  <ts>2020-10-14T13:26:01.634000</ts>
  <user>Bexon</user>
  <text>oh neat</text>
</message>
<message>
  <ts>2020-10-15T10:38:42.601000</ts>
  <user>Rynlee</user>
  <text>Hello everyone is R5RS chez scheme?</text>
</message>
<message>
  <ts>2020-10-15T10:38:47.098000</ts>
  <user>Rynlee</user>
  <text>may be a silly question</text>
</message>
<message>
  <ts>2020-10-15T10:40:14.592000</ts>
  <user>Kiam</user>
  <text>Idle thought of the night: a much shorter notation for thunks would be nice so people stop feeling the need to create macros like this:```(definesimplemacro (withfoo foo body ...) (callwithfoo foo (lambda () body ...)))```I'd rather see a shorthand like `{body ...}` that gets turned into `(lambda () body ...)`</text>
</message>
<message>
  <ts>2020-10-15T10:41:23.110000</ts>
  <user>Kiam</user>
  <text>@Markus R5RS is a specification. It's a document that describes a bunch of rules for how scheme code is supposed to work. Chez scheme is an implementation: it's an actual program that takes scheme code and runs it.</text>
</message>
<message>
  <ts>2020-10-15T10:42:27.500000</ts>
  <user>Rynlee</user>
  <text>Thank you</text>
</message>
<message>
  <ts>2020-10-15T10:42:38.441000</ts>
  <user>Kiam</user>
  <text>chez scheme does not follow the rules of the R5RS specification. It does however follow the rules of the R6RS spec.</text>
</message>
<message>
  <ts>2020-10-15T10:42:41.282000</ts>
  <user>Rynlee</user>
  <text>Is there a module for it for Dr Racket? I know Racket is being built on top of it</text>
</message>
<message>
  <ts>2020-10-15T10:43:22.512000</ts>
  <user>Kiam</user>
  <text>like something you can import in your code with `(require chezscheme)` and use somehow?</text>
</message>
<message>
  <ts>2020-10-15T10:44:07.063000</ts>
  <user>Rynlee</user>
  <text>or like #lang chez</text>
</message>
<message>
  <ts>2020-10-15T10:44:09.094000</ts>
  <user>Rynlee</user>
  <text>yeah</text>
</message>
<message>
  <ts>2020-10-15T10:44:51.126000</ts>
  <user>Kiam</user>
  <text>Not really. Chez is being used to _implement_ racket so you don't write chez code  the Racket implementation turns your racket code into chez scheme code and then hands it off to chez scheme to compile and run.</text>
</message>
<message>
  <ts>2020-10-15T10:45:39.971000</ts>
  <user>Kiam</user>
  <text>There is a `#lang r5rs` (and I think `#lang r6rs` too) though. That lets you write R5RS scheme code and it will run as that spec says it should.</text>
</message>
<message>
  <ts>2020-10-15T10:45:54.314000</ts>
  <user>Rynlee</user>
  <text>okay thank you</text>
</message>
<message>
  <ts>2020-10-15T11:07:50.104000</ts>
  <user>Cortlin</user>
  <text>I usually try to write code that runs on Racket Chez and Guile with minimal changes.</text>
</message>
<message>
  <ts>2020-10-15T11:12:13.074000</ts>
  <user>Yaw</user>
  <text>```scheme#lang racket/base(require (forsyntax racket/base) (renamein fancyapp [#%app fancyapp]) racket/stxparam syntax/parse/define)(provide (renameout [myapp #%app]))(definesyntaxrule (thunkapp expr ...) (Œª () expr ...))(definesyntax (myapp stx) (define appstx (case (syntaxproperty stx parenshape) [(#\\{) #'thunkapp] [(#f #\\( #\\[) #'fancyapp])) (syntaxparse stx [(_ v ...) #`(#,appstx v ...)]))```</text>
</message>
<message>
  <ts>2020-10-15T11:12:36.627000</ts>
  <user>Yaw</user>
  <text>@notjack i tried to make a little thing to make `{}` make thunks and otherwise use fancyapp (:</text>
</message>
<message>
  <ts>2020-10-15T11:14:56.238000</ts>
  <user>Yaw</user>
  <text>i stole bits from your `delimitapp`!</text>
</message>
<message>
  <ts>2020-10-15T11:15:21.611000</ts>
  <user>Kiam</user>
  <text>ooooo nice :3</text>
</message>
<message>
  <ts>2020-10-15T14:37:31.722000</ts>
  <user>Slavcho</user>
  <text>Has anyone here had to decide between Common Lisp and Racket? What made you choose Racket?</text>
</message>
<message>
  <ts>2020-10-15T15:25:15.808000</ts>
  <user>Alyiah</user>
  <text>@RaycatWhoDat I started learning Lisp with CL and much prefer Racket. It's much cleaner I prefer the lisp1 direction it's got a huge standard library whereas CLs is lacking in terms of modern languages it's got a standard package management tool that ship with the language and I overall just find it easier to work with. Only thing I find easier in CL is macros</text>
</message>
<message>
  <ts>2020-10-15T15:28:21.870000</ts>
  <user>Alyiah</user>
  <text>Oh I also think CL macros are easier to debug personally</text>
</message>
<message>
  <ts>2020-10-15T15:30:33.573000</ts>
  <user>Alyiah</user>
  <text>But overall Rackrt is a much nicer language</text>
</message>
<message>
  <ts>2020-10-15T15:31:54.996000</ts>
  <user>Bexon</user>
  <text>@RaycatWhoDat yep. CL is just old in a bad way</text>
</message>
<message>
  <ts>2020-10-15T15:32:08.721000</ts>
  <user>Bexon</user>
  <text>of course it‚Äôs subjective but you asked for opinions :meow:</text>
</message>
<message>
  <ts>2020-10-15T15:32:32.298000</ts>
  <user>Daevion</user>
  <text>Racket does have a ‚Äòdefmacro‚Äô form that is like lisp macros but the core developers recommend the scheme style hygienic macros</text>
</message>
<message>
  <ts>2020-10-15T15:33:58.759000</ts>
  <user>Alyiah</user>
  <text>Like a `defmacro` that's not in the compatibility library?</text>
</message>
<message>
  <ts>2020-10-15T15:35:13.645000</ts>
  <user>Daevion</user>
  <text>That‚Äôs the one</text>
</message>
<message>
  <ts>2020-10-15T15:38:57.251000</ts>
  <user>Cortlin</user>
  <text>It's in the compatibility library.</text>
</message>
<message>
  <ts>2020-10-15T15:40:04.536000</ts>
  <user>Slavcho</user>
  <text>Thanks for the perspectives. I appreciate it.</text>
</message>
<message>
  <ts>2020-10-15T15:40:07.500000</ts>
  <user>Daevion</user>
  <text>I did have a go at Common Lisp  read On Lisp and did the ELMART online lisp tutor but Racket was more attractive. (A long time ago)</text>
</message>
<message>
  <ts>2020-10-15T15:40:27.062000</ts>
  <user>Slavcho</user>
  <text>Well maybe for a bit of specificity...</text>
</message>
<message>
  <ts>2020-10-15T15:40:40.370000</ts>
  <user>Slavcho</user>
  <text>&lt;https://gist.github.com/vindarel/c1ef5e043773921e3b11d8f4fe1ca7ac&gt;</text>
</message>
<message>
  <ts>2020-10-15T15:40:52.012000</ts>
  <user>Slavcho</user>
  <text>Could y'all chime in on the accuracy of this or if there are equivalents?</text>
</message>
<message>
  <ts>2020-10-15T15:41:01.798000</ts>
  <user>Daevion</user>
  <text>You probably need to ask on the lisp discord for balance</text>
</message>
<message>
  <ts>2020-10-15T15:41:14.496000</ts>
  <user>Slavcho</user>
  <text>I'll level with you</text>
</message>
<message>
  <ts>2020-10-15T15:41:21.637000</ts>
  <user>Slavcho</user>
  <text>I hate the Lisp discord</text>
</message>
<message>
  <ts>2020-10-15T15:41:30.499000</ts>
  <user>Cortlin</user>
  <text>Same</text>
</message>
<message>
  <ts>2020-10-15T15:41:44.278000</ts>
  <user>Cortlin</user>
  <text>It's not exactly a friendly place.</text>
</message>
<message>
  <ts>2020-10-15T15:41:44.289000</ts>
  <user>Slavcho</user>
  <text>Too :teenACTUALLY: and lol javascript bad for me</text>
</message>
<message>
  <ts>2020-10-15T15:44:21.820000</ts>
  <user>Daevion</user>
  <text>I see you have already checked the reddit</text>
</message>
<message>
  <ts>2020-10-15T15:46:01.924000</ts>
  <user>Bexon</user>
  <text>lisp discord &gt;&gt;&gt;&gt; lisp irc</text>
</message>
<message>
  <ts>2020-10-15T15:46:24.207000</ts>
  <user>Slavcho</user>
  <text>That's not exactly high regard lol.</text>
</message>
<message>
  <ts>2020-10-15T15:46:47.065000</ts>
  <user>Slavcho</user>
  <text>If I'm mildly miffed at the Lisp Discord the IRC won't even acknowledge my existence</text>
</message>
<message>
  <ts>2020-10-15T15:47:01.351000</ts>
  <user>Bexon</user>
  <text>this gist seems to be written by a hardcore CLer it‚Äôs exaggerating CL‚Äôs pros downplaying its cons and posing design decisions made by Racket designers as flaws :meow:</text>
</message>
<message>
  <ts>2020-10-15T15:47:01.565000</ts>
  <user>Slavcho</user>
  <text>Because javascript dev</text>
</message>
<message>
  <ts>2020-10-15T15:47:07.691000</ts>
  <user>Daevion</user>
  <text>I‚Äôm sure there are other communities for Common Lisp</text>
</message>
<message>
  <ts>2020-10-15T15:47:21.838000</ts>
  <user>Slavcho</user>
  <text>@sarna Oh?</text>
</message>
<message>
  <ts>2020-10-15T15:47:36.653000</ts>
  <user>Bexon</user>
  <text>yeah like ‚Äúracket bad no introspection‚Äù</text>
</message>
<message>
  <ts>2020-10-15T15:47:45.745000</ts>
  <user>Slavcho</user>
  <text>@StephenD I have to take a look.</text>
</message>
<message>
  <ts>2020-10-15T15:47:53.842000</ts>
  <user>Bexon</user>
  <text>‚ÄúCL good because CL‚Äù</text>
</message>
<message>
  <ts>2020-10-15T15:50:53.120000</ts>
  <user>Bexon</user>
  <text>@RaycatWhoDat I think fare‚Äôs post was better here https://fare.livejournal.com/188429.html</text>
</message>
<message>
  <ts>2020-10-15T15:51:07.466000</ts>
  <user>Slavcho</user>
  <text>Didn't Fare go to Gerbil Scheme? EDIT: Yes they did.</text>
</message>
<message>
  <ts>2020-10-15T15:52:31.356000</ts>
  <user>Bexon</user>
  <text>yep</text>
</message>
<message>
  <ts>2020-10-15T15:52:45.466000</ts>
  <user>Bexon</user>
  <text>but this post compares racket with CL</text>
</message>
<message>
  <ts>2020-10-15T15:52:53.340000</ts>
  <user>Slavcho</user>
  <text>ye</text>
</message>
<message>
  <ts>2020-10-15T15:52:56.340000</ts>
  <user>Bexon</user>
  <text>and it‚Äôs more honest I feel</text>
</message>
<message>
  <ts>2020-10-15T15:54:02.511000</ts>
  <user>Olvin</user>
  <text>One reason I prefer Racket over Common Lisp is that Racket makes it easier for me to think about types properly. Types like booleans symbols and lists are all disjoint in Racket where they intersect in Common Lisp with things like `t` and `nil` being both or all three. Lists being immutabe and structs being their own distinct things giving more control over mutability as well as encapsulation helps a lot as well. These things just make it easier for me reason about a program when I can't hold the whole thing in mind at once</text>
</message>
<message>
  <ts>2020-10-15T15:58:44.290000</ts>
  <user>Daevion</user>
  <text>For me it is DrRacket and the friendly community.</text>
</message>
<message>
  <ts>2020-10-15T16:00:12.671000</ts>
  <user>Daevion</user>
  <text>And the gui toolkit</text>
</message>
<message>
  <ts>2020-10-15T16:05:19.384000</ts>
  <user>Slavcho</user>
  <text>I do enjoy that GUI toolkit</text>
</message>
<message>
  <ts>2020-10-15T16:05:52.944000</ts>
  <user>Slavcho</user>
  <text>If only Raku had all of those :lytCRYA:</text>
</message>
<message>
  <ts>2020-10-15T16:06:04.216000</ts>
  <user>Slavcho</user>
  <text>I do adore that language</text>
</message>
<message>
  <ts>2020-10-15T16:09:48.018000</ts>
  <user>Slavcho</user>
  <text>But back on topic: let's say you're doing things and evaluating stuff in the REPL</text>
</message>
<message>
  <ts>2020-10-15T16:10:36.517000</ts>
  <user>Slavcho</user>
  <text>How do you get those changes back into the source? Or are you only modifying things in the source and sending the form to the REPL to evaluate?</text>
</message>
<message>
  <ts>2020-10-15T16:12:13.986000</ts>
  <user>Bexon</user>
  <text>in CL? you write in the source file and send stuff to the REPL</text>
</message>
<message>
  <ts>2020-10-15T16:12:26.484000</ts>
  <user>Bexon</user>
  <text>you can also write in the REPL of course</text>
</message>
<message>
  <ts>2020-10-15T16:12:30.937000</ts>
  <user>Bexon</user>
  <text>for experimentation n stuff</text>
</message>
<message>
  <ts>2020-10-15T16:12:49.599000</ts>
  <user>Bexon</user>
  <text>but mainly you send things to the REPL test them there repeat</text>
</message>
<message>
  <ts>2020-10-15T16:13:14.512000</ts>
  <user>Bexon</user>
  <text>when you recompile something in CL all that state accumulated in the REPL is preserved</text>
</message>
<message>
  <ts>2020-10-15T16:13:57.739000</ts>
  <user>Bexon</user>
  <text>which is both good (you don‚Äôt have to retype everything) and bad (you can have really weird bugs because of lots of accumulated state)</text>
</message>
<message>
  <ts>2020-10-15T16:14:31.887000</ts>
  <user>Bexon</user>
  <text>you can just restart your REPL therebut then we‚Äôre back to racket‚Äôs approach :)</text>
</message>
<message>
  <ts>2020-10-15T16:17:15.266000</ts>
  <user>Daevion</user>
  <text>https://blog.racketlang.org/2009/03/thedrschemereplisnttheoneinemacs.html</text>
</message>
<message>
  <ts>2020-10-15T16:17:36.014000</ts>
  <user>Daevion</user>
  <text>https://docs.racketlang.org/drracket/Keyboard_Shortcuts.html?q=keybinding#%28part._.Sending_.Program_.Fragments_to_the_.R.E.P.L%29</text>
</message>
<message>
  <ts>2020-10-15T16:19:08.266000</ts>
  <user>Slavcho</user>
  <text>Yeah I meant in Racket</text>
</message>
<message>
  <ts>2020-10-15T16:22:48.496000</ts>
  <user>Cortlin</user>
  <text>`##lisp` &gt; `#lisp`</text>
</message>
<message>
  <ts>2020-10-15T16:22:59.975000</ts>
  <user>Cortlin</user>
  <text>@sarna</text>
</message>
<message>
  <ts>2020-10-15T16:23:07.028000</ts>
  <user>Cortlin</user>
  <text>The former is for all Lisps.</text>
</message>
<message>
  <ts>2020-10-15T16:23:47.761000</ts>
  <user>Bexon</user>
  <text>my lisp &gt; your lisp</text>
</message>
<message>
  <ts>2020-10-15T16:23:52.794000</ts>
  <user>Bexon</user>
  <text>(I didn‚Äôt get the joke sorry)</text>
</message>
<message>
  <ts>2020-10-15T16:28:17.583000</ts>
  <user>Alyiah</user>
  <text>While working in the REPL in CL is great and super fun a very tight feedback loop and an experience I wish more languages had I believe it would be way nicer to work like that in Clojure rather than CL due to the approach that things should be stateless and functional. Restarting the REPL constantly in CL defeats the purpose imo so I think Clojure would probably be better</text>
</message>
<message>
  <ts>2020-10-15T16:30:31.180000</ts>
  <user>Cortlin</user>
  <text>what joke</text>
</message>
<message>
  <ts>2020-10-15T16:30:46.130000</ts>
  <user>Cortlin</user>
  <text>@sarna Weren't you talking about the IRC channel?</text>
</message>
<message>
  <ts>2020-10-15T16:31:35.869000</ts>
  <user>Alyiah</user>
  <text>The other problem with the REPL is that because of unexpected side effects all over the place you might think something is working but then you restart and realize the only reason it worked was because of some buildup of state that now you've gotten rid of by restarting you REPL and then you're figuring out how to fix another unrelated problem</text>
</message>
<message>
  <ts>2020-10-15T16:35:21.475000</ts>
  <user>Bexon</user>
  <text>@Deleted User oh. told you I didn‚Äôt get it!is there another lisp channel? I was only on #lisp</text>
</message>
<message>
  <ts>2020-10-15T16:35:31.775000</ts>
  <user>Bexon</user>
  <text>and #lispbeginners or something like that</text>
</message>
<message>
  <ts>2020-10-15T16:36:49.296000</ts>
  <user>Bexon</user>
  <text>@nixin72 yep I got into this even with small programs. I was a CL beginner but I don‚Äôt think it‚Äôd improve with time :/</text>
</message>
<message>
  <ts>2020-10-15T16:37:47.155000</ts>
  <user>Cortlin</user>
  <text>`##lisp` is for all Lisps not just CL.</text>
</message>
<message>
  <ts>2020-10-15T16:37:54.065000</ts>
  <user>Bexon</user>
  <text>oh!</text>
</message>
<message>
  <ts>2020-10-15T16:38:05.971000</ts>
  <user>Bexon</user>
  <text>now I got it</text>
</message>
<message>
  <ts>2020-10-15T16:38:51.747000</ts>
  <user>Alyiah</user>
  <text>Yea I was beginner when it happened too but I feel like it's more a fundamental problem in the design of CL than something that would be fixed by experience</text>
</message>
<message>
  <ts>2020-10-15T16:40:09.287000</ts>
  <user>Alyiah</user>
  <text>But it\'s the same problem as I have all the time in Emacs. I make some changes to my config evaluate some buffers next time I open Emacs I\'ve got errors in my config and I\'m like it worked fine 5 minutes ago</text>
</message>
<message>
  <ts>2020-10-15T16:40:27.300000</ts>
  <user>Alyiah</user>
  <text>But I forgive Emacs for that because I love Emacs</text>
</message>
<message>
  <ts>2020-10-15T16:44:54.344000</ts>
  <user>Zayne</user>
  <text>I wonder if people experience(d) that a lot in Smalltalk as well</text>
</message>
<message>
  <ts>2020-10-15T16:51:52.813000</ts>
  <user>Bexon</user>
  <text>well in Smalltalk all you have is the REPL</text>
</message>
<message>
  <ts>2020-10-15T20:40:11.459000</ts>
  <user>Daevion</user>
  <text>On Thu 15 Oct 2020 at 20:56 Asumu Takikawa wrote:On 20200803 09:35:16 0400 John Clements via Racket Users wrote:&gt; Racket version 7.8 is now available from&gt; &gt; https://racketlang.org/This is quite delayed but the Ubuntu PPA has been updated to 7.8 aswell. Ubuntu version 20.10 (Groovy) is newly supported while 19.10(Eoan) is phased out (will remain on Racket 7.7).Sorry for the delay this time. As usual please report any issues ongithub: https://github.com/takikawa/racketppaCheers,Asumu</text>
</message>
<message>
  <ts>2020-10-17T14:10:17.822000</ts>
  <user>Daevion</user>
  <text>RacketCon livestream!</text>
</message>
<message>
  <ts>2020-10-17T18:59:50.966000</ts>
  <user>Slavcho</user>
  <text>Does anyone reach for a different language for speeding things up"?</text>
</message>
<message>
  <ts>2020-10-17T19:00:19.374000</ts>
  <user>Slavcho</user>
  <text>That is to say what language do y'all normally reach for the FFI for?</text>
</message>
<message>
  <ts>2020-10-17T19:01:48.533000</ts>
  <user>Daevion</user>
  <text>I don‚Äôt but I‚Äôm pretty sure it‚Äôs c/c++</text>
</message>
<message>
  <ts>2020-10-17T19:01:51.806000</ts>
  <user>Alyiah</user>
  <text>Can you use Rust with Racket FFI?</text>
</message>
<message>
  <ts>2020-10-17T19:02:17.631000</ts>
  <user>Alyiah</user>
  <text>Cause if you can I would reach for Rust. But I've never used FFI lol</text>
</message>
<message>
  <ts>2020-10-17T19:05:40.202000</ts>
  <user>Daevion</user>
  <text>Just asked on slack</text>
</message>
<message>
  <ts>2020-10-17T19:05:51.137000</ts>
  <user>Daevion</user>
  <text>&gt; Rust exposes Clike ABI bindings iirc</text>
</message>
<message>
  <ts>2020-10-17T19:30:54.015000</ts>
  <user>Bexon</user>
  <text>yeah</text>
</message>
<message>
  <ts>2020-10-17T19:31:28.788000</ts>
  <user>Bexon</user>
  <text>you just use `extern C` and `no_mangle`</text>
</message>
<message>
  <ts>2020-10-17T19:32:24.626000</ts>
  <user>Bexon</user>
  <text>or wait is one of them for calling C code ü§î I don‚Äôt remember</text>
</message>
<message>
  <ts>2020-10-17T19:33:31.775000</ts>
  <user>Bexon</user>
  <text>https://doc.rustlang.org/book/ch1901unsaferust.html#callingrustfunctionsfromotherlanguages</text>
</message>
<message>
  <ts>2020-10-17T19:33:38.188000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-17T20:02:02.463000</ts>
  <user>Slavcho</user>
  <text>I hate that I have to learn Rust</text>
</message>
<message>
  <ts>2020-10-17T20:02:47.305000</ts>
  <user>Slavcho</user>
  <text>I want one of the other languages (Nim D Crystal) to win the race but I don't think it's gonna happen</text>
</message>
<message>
  <ts>2020-10-17T20:07:23.817000</ts>
  <user>Alyiah</user>
  <text>What do you dislike about Rust?</text>
</message>
<message>
  <ts>2020-10-17T20:08:28.600000</ts>
  <user>Bexon</user>
  <text>C already won the race I think you can stop worrying :meow:</text>
</message>
<message>
  <ts>2020-10-17T20:08:55.008000</ts>
  <user>Alyiah</user>
  <text>Yea but I'd rather write code in just about anything else</text>
</message>
<message>
  <ts>2020-10-17T20:30:42.872000</ts>
  <user>Bexon</user>
  <text>lol</text>
</message>
<message>
  <ts>2020-10-17T20:31:34.450000</ts>
  <user>Bexon</user>
  <text>I think in the no GC category you only have.. Rust C[++] D and Zig?</text>
</message>
<message>
  <ts>2020-10-17T20:32:24.265000</ts>
  <user>Bexon</user>
  <text>but if you want to just use something faster.. if it‚Äôs parsing JSON use Python :meow:</text>
</message>
<message>
  <ts>2020-10-17T20:34:53.711000</ts>
  <user>Bexon</user>
  <text>oh or maybe inline Chez? Chez is pretty fast for some tasks as fast as SBCL/Java IIRC</text>
</message>
<message>
  <ts>2020-10-17T20:35:48.089000</ts>
  <user>Bexon</user>
  <text>https://discord.com/channels/571040468092321801/618895179343986688/699699251726385283</text>
</message>
<message>
  <ts>2020-10-17T20:35:52.559000</ts>
  <user>Bexon</user>
  <text>:meowloween:</text>
</message>
<message>
  <ts>2020-10-17T20:38:11.933000</ts>
  <user>Bexon</user>
  <text>it‚Äôs even documented now! https://docs.racketlang.org/foreign/vm.html#%28def._%28%28lib._ffi%2Funsafe%2Fvm..rkt%29._vmeval%29%29</text>
</message>
<message>
  <ts>2020-10-17T20:39:06.694000</ts>
  <user>Bexon</user>
  <text>https://ecraven.github.io/r7rsbenchmarks/chez is the fastest scheme almost :meow:</text>
</message>
<message>
  <ts>2020-10-17T20:55:33.920000</ts>
  <user>Zayne</user>
  <text>another interesting language with manual memory management is ATS</text>
</message>
<message>
  <ts>2020-10-17T23:14:24.250000</ts>
  <user>Slavcho</user>
  <text>&gt; What do you dislike about Rust?@nixin72 The syntax and the feel of it.</text>
</message>
<message>
  <ts>2020-10-17T23:14:38.909000</ts>
  <user>Slavcho</user>
  <text>I don't feel productive in it at all</text>
</message>
<message>
  <ts>2020-10-17T23:15:25.841000</ts>
  <user>Slavcho</user>
  <text>D gave me the choice which was cool.</text>
</message>
<message>
  <ts>2020-10-18T09:22:26.751000</ts>
  <user>Daevion</user>
  <text>Hi Racketeers,Hope you are having a great RacketCon weekend.Typed Racket was designed by a few people to serve a broad community ‚Äîyou included.Today we are looking for feedback to guide the design going forward.Please share your thoughts and experiences (if any) regarding TypedRacket. Even if you've never used  or even heard about  TypedRacket we want to hear from you!https://tinyurl.com/typedracketsurveyFeel free to email Ben if you have more feedback or questions.The survey will remain open for 1 week. After it's closed we willshare the (anonymized) results.Thank you,Ben Greenman &amp; Shriram Krishnamurthi</text>
</message>
<message>
  <ts>2020-10-19T20:08:38.152000</ts>
  <user>Britten</user>
  <text>Missed seeing some discord racketeers at racketcon last weekend. üò¶</text>
</message>
<message>
  <ts>2020-10-19T20:16:31.495000</ts>
  <user>Kiam</user>
  <text>how was it otherwise? I wasn't able to make it</text>
</message>
<message>
  <ts>2020-10-19T20:59:40.107000</ts>
  <user>Zayne</user>
  <text>I was able to watch the YouTube stream for several talks and I tried out Gather once but was too shy</text>
</message>
<message>
  <ts>2020-10-19T21:56:28.199000</ts>
  <user>Britten</user>
  <text>Aw Stephen and I were there we're very kind üôÇ</text>
</message>
<message>
  <ts>2020-10-19T21:57:45.781000</ts>
  <user>Britten</user>
  <text>I didn't get to everything but it was convenient to attend with my kids running around in the background</text>
</message>
<message>
  <ts>2020-10-19T21:57:52.380000</ts>
  <user>Daevion</user>
  <text>it was great  got to listen in on some cool conversations üôÇ</text>
</message>
<message>
  <ts>2020-10-19T21:58:10.030000</ts>
  <user>Britten</user>
  <text>gather actually worked out pretty well I thought.</text>
</message>
<message>
  <ts>2020-10-19T21:58:34.673000</ts>
  <user>Daevion</user>
  <text>someone suggested doing the racket users meetup on gather?</text>
</message>
<message>
  <ts>2020-10-19T21:59:04.644000</ts>
  <user>Daevion</user>
  <text>(I believe it is free for &lt;20 users)</text>
</message>
<message>
  <ts>2020-10-19T21:59:11.760000</ts>
  <user>Britten</user>
  <text>I was thinking something like that would be interesting people could gravitate to what they are interested in.</text>
</message>
<message>
  <ts>2020-10-19T22:00:34.507000</ts>
  <user>Britten</user>
  <text>Having everything from rcon up on youtube nearly immediately is good too. Except they could have trimmed some of the waiting to start bits üôÇ</text>
</message>
<message>
  <ts>2020-10-19T22:01:39.864000</ts>
  <user>Britten</user>
  <text>bbiam work stuff ...</text>
</message>
<message>
  <ts>2020-10-19T22:01:48.513000</ts>
  <user>Daevion</user>
  <text>doing one person doing live video is crazy hard imho.</text>
</message>
<message>
  <ts>2020-10-19T22:02:57.462000</ts>
  <user>Daevion</user>
  <text>its normally at least a twoperson job</text>
</message>
<message>
  <ts>2020-10-19T22:08:22.429000</ts>
  <user>Daevion</user>
  <text>https://gather.town/app/wH1EDG3McffLjrs0/racketusers</text>
</message>
<message>
  <ts>2020-10-19T22:08:50.946000</ts>
  <user>Daevion</user>
  <text>only chrome</text>
</message>
<message>
  <ts>2020-10-19T22:20:00.862000</ts>
  <user>Britten</user>
  <text>I love in gather there is furniture you can walk through and some you cannot.</text>
</message>
<message>
  <ts>2020-10-19T22:30:53.956000</ts>
  <user>Daevion</user>
  <text>yeah</text>
</message>
<message>
  <ts>2020-10-19T22:31:13.089000</ts>
  <user>Daevion</user>
  <text>I don't quite understand the private area</text>
</message>
<message>
  <ts>2020-10-19T22:31:46.116000</ts>
  <user>Daevion</user>
  <text>are there rules or does gather behaviour change in private area</text>
</message>
<message>
  <ts>2020-10-19T22:38:48.864000</ts>
  <user>Britten</user>
  <text>Yeah I don\'t quite get what it means private area</text>
</message>
<message>
  <ts>2020-10-20T05:24:33.863000</ts>
  <user>Bexon</user>
  <text>&gt; only chrome:meow:</text>
</message>
<message>
  <ts>2020-10-20T05:25:02.092000</ts>
  <user>Bexon</user>
  <text>I only peeked twice :meowblush:</text>
</message>
<message>
  <ts>2020-10-20T08:16:24.629000</ts>
  <user>Daevion</user>
  <text>&gt; :meow:@sarna yeah the chrome thing is annoying  I wonder if it excludes some people</text>
</message>
<message>
  <ts>2020-10-20T08:16:51.412000</ts>
  <user>Bexon</user>
  <text>me I exclusively use firefox</text>
</message>
<message>
  <ts>2020-10-20T08:17:38.355000</ts>
  <user>Bexon</user>
  <text>say no to browser monopoly :meow:</text>
</message>
<message>
  <ts>2020-10-20T08:18:07.223000</ts>
  <user>Daevion</user>
  <text>And I have a really old Mac with not much drive space so I‚Äôm not keen on the filling it up with chrome</text>
</message>
<message>
  <ts>2020-10-20T08:18:15.949000</ts>
  <user>Bexon</user>
  <text>haha</text>
</message>
<message>
  <ts>2020-10-20T08:18:37.993000</ts>
  <user>Daevion</user>
  <text>It is huge</text>
</message>
<message>
  <ts>2020-10-20T08:18:50.225000</ts>
  <user>Bexon</user>
  <text>yeah browsers are OSs now</text>
</message>
<message>
  <ts>2020-10-20T08:21:12.983000</ts>
  <user>Daevion</user>
  <text>And chrome is the new IE46</text>
</message>
<message>
  <ts>2020-10-20T08:21:26.487000</ts>
  <user>Bexon</user>
  <text>just more privacyinvasive</text>
</message>
<message>
  <ts>2020-10-20T08:22:03.155000</ts>
  <user>Daevion</user>
  <text>What about Jitsi meet?</text>
</message>
<message>
  <ts>2020-10-20T08:22:14.591000</ts>
  <user>Daevion</user>
  <text>Have you tried that?</text>
</message>
<message>
  <ts>2020-10-20T08:22:29.249000</ts>
  <user>Bexon</user>
  <text>never used it</text>
</message>
<message>
  <ts>2020-10-20T08:22:55.699000</ts>
  <user>Daevion</user>
  <text>Open source version of zoom</text>
</message>
<message>
  <ts>2020-10-20T08:23:44.606000</ts>
  <user>Bexon</user>
  <text>oh by the way  if you‚Äôre planning to switch a platform because of me don‚Äôt do that  I don‚Äôt have that much free time :meow: I do 99% of programming stuff at work</text>
</message>
<message>
  <ts>2020-10-20T08:23:57.496000</ts>
  <user>Bexon</user>
  <text>even now I‚Äôm at work :meow:</text>
</message>
<message>
  <ts>2020-10-20T08:24:16.583000</ts>
  <user>Bexon</user>
  <text>45minute long daily meetings though y‚Äôknow</text>
</message>
<message>
  <ts>2020-10-20T08:24:28.098000</ts>
  <user>Daevion</user>
  <text>So am I</text>
</message>
<message>
  <ts>2020-10-20T08:26:35.514000</ts>
  <user>Daevion</user>
  <text>The feedback about gather is good thoughif it Means you are less likely to participate it will also affect others. I also worry that the 8 bit map interface doesn‚Äôt help people with low vision either</text>
</message>
<message>
  <ts>2020-10-20T08:32:20.000000</ts>
  <user>Daevion</user>
  <text>Racket Users virtual meetup 28 NovemberPlatform to be decided; zoom / jitsi / ?  suggestions please 30 Minutes1pm Pacific Time9pm UK time(contact me so we can work out when this is in your time zone) If this is problematic let me know  this is intended to become a regular thing  maybe every 612 weeksKind regardsStephen &amp; Sam Phillips</text>
</message>
<message>
  <ts>2020-10-20T19:46:56.718000</ts>
  <user>Miquel</user>
  <text>Do any of you use Magic Racket I don\'t understand what it is but its supposed to be better than the regular DrRacket and should make coding easier?</text>
</message>
<message>
  <ts>2020-10-20T19:57:44.705000</ts>
  <user>Cortlin</user>
  <text>Magic Racket is just the Racket plugin for VS Code loosely analogous to `racketmode` of Emacs.</text>
</message>
<message>
  <ts>2020-10-20T19:57:56.945000</ts>
  <user>Cortlin</user>
  <text>VS Code Emacs and DrRacket are all different text editors and IDEs.</text>
</message>
<message>
  <ts>2020-10-20T20:06:22.196000</ts>
  <user>Bexon</user>
  <text>:plusone: and which one‚Äôs ‚Äúbetter‚Äù is a matter of preference</text>
</message>
<message>
  <ts>2020-10-20T20:09:33.328000</ts>
  <user>Miquel</user>
  <text>Okay so I basically downloaded visual studios</text>
</message>
<message>
  <ts>2020-10-20T20:09:42.270000</ts>
  <user>Miquel</user>
  <text>and I'm completely lost with the amount of stuff on there</text>
</message>
<message>
  <ts>2020-10-20T20:09:54.692000</ts>
  <user>Miquel</user>
  <text>Have any of you downloaded magic racket before?</text>
</message>
<message>
  <ts>2020-10-20T20:14:28.488000</ts>
  <user>Miquel</user>
  <text>I'm looking for an IDE for racket that will basically help fill in brackets auto format previously defined constants. Similar to REPL.it for python or what not. Is this even possible?</text>
</message>
<message>
  <ts>2020-10-20T20:35:19.053000</ts>
  <user>Kiam</user>
  <text>I don't think anything fits those exact features but some stuff gets pretty close</text>
</message>
<message>
  <ts>2020-10-20T20:36:29.726000</ts>
  <user>Kiam</user>
  <text>drracket has an autoindenter and (kind of lousy) autocompletion and it has a little graphical thing that highlights the code enclosed by a closing bracket so it's much easier to balance parens</text>
</message>
<message>
  <ts>2020-10-20T20:44:12.307000</ts>
  <user>Yaw</user>
  <text>i've been using vi for about 25 years vim for around 20ish of those i think. and my vim config hasn't changed in a long time. i feel like the way people use vim has changed and i'm a bit behind the times lol</text>
</message>
<message>
  <ts>2020-10-20T20:46:54.064000</ts>
  <user>Kiam</user>
  <text>eh not much point building up expertise in something if you just throw it away every six months when a new thing comes along</text>
</message>
<message>
  <ts>2020-10-20T20:51:48.252000</ts>
  <user>Miquel</user>
  <text>&gt; drracket has an autoindenter and (kind of lousy) autocompletion and it has a little graphical thing that highlights the code enclosed by a closing bracket so it's much easier to balance parens@notjack Ah yes I use autoindenter and the graphical thing for brackets. But for autocompletion? I've never heard of this. Does it like fill in names of parameters already defined or...</text>
</message>
<message>
  <ts>2020-10-20T20:52:24.444000</ts>
  <user>Kiam</user>
  <text>there's a shortcut to turn it on on my mac I think it's cmd+/</text>
</message>
<message>
  <ts>2020-10-20T20:52:36.242000</ts>
  <user>Kiam</user>
  <text>so on windows it's probably ctrl+/</text>
</message>
<message>
  <ts>2020-10-20T20:52:47.124000</ts>
  <user>Miquel</user>
  <text>alright let met try</text>
</message>
<message>
  <ts>2020-10-20T20:52:51.154000</ts>
  <user>Miquel</user>
  <text>what does it do exactly?</text>
</message>
<message>
  <ts>2020-10-20T20:53:45.696000</ts>
  <user>Kiam</user>
  <text>you know the background macro expansion that happens? assuming that succeeds the autocompletion thing gives you a little popup when you're typing identifiers and the popup lists every identifier in scope (narrowed down by what you've already typed I think)</text>
</message>
<message>
  <ts>2020-10-20T20:54:23.932000</ts>
  <user>Kiam</user>
  <text>it's not exactly snappy since it depends on macro expansion and it's annoying that it's not on by default so you have to know the magic shortcut to use it but it does work</text>
</message>
<message>
  <ts>2020-10-20T20:54:43.460000</ts>
  <user>Miquel</user>
  <text>what is the macro expansion?</text>
</message>
<message>
  <ts>2020-10-20T20:55:50.149000</ts>
  <user>Daevion</user>
  <text>&gt; There are several completion framework for Racket.&gt; &gt; Quickscript Extra's dynamic completion (dynamicabbrev) autocompletes words using existing words in the current file. Using it to autocomplete an identifier however means that it will suggest invalid identifiers taken from string literals.&gt; &gt; DrRacket itself has the completion functionality via ctrl .. It does not autocomplete identifiers defined within a module.&gt; &gt; Racket Mode has its own completion functionality. In addition to supporting identifiers required from other modules it supports identifiers within a module via Check Syntax (and also other things like autocompleting require). However it only considers identifiers that appear textually in the code so identifiers generated programmatically (e.g. from the struct form) are not considered. It does not autocomplete only identifiers that would be in scope.&gt; &gt; DrComplete enhances the completion functionality in DrRacket significantly. Similar to Racket Mode it can autocomplete variety of things including identifiers defined in a module. Additionally it can discover identifiers generated programmatically. However similar to Racket Mode it does not autocomplete only identifiers that would be in scope. https://github.com/sorawee/fishycompletion</text>
</message>
<message>
  <ts>2020-10-20T20:56:40.503000</ts>
  <user>Daevion</user>
  <text>(and there is fishycompletion where I got the above text from the related work section of the readme)</text>
</message>
<message>
  <ts>2020-10-20T20:57:54.724000</ts>
  <user>Miquel</user>
  <text>Do you use this extension?</text>
</message>
<message>
  <ts>2020-10-20T20:59:27.916000</ts>
  <user>Daevion</user>
  <text>&gt; &gt; it's annoying that it's not on by default &gt; @notjack  I want to release an alternative build of DrRacket with sensible defaults</text>
</message>
<message>
  <ts>2020-10-20T21:00:07.220000</ts>
  <user>Daevion</user>
  <text>(Or what \\I think\\ are sensible defaults)</text>
</message>
<message>
  <ts>2020-10-20T21:01:25.620000</ts>
  <user>Daevion</user>
  <text>&gt; Do you use this extension?@Tictac I will  to my shame I've not done any code since the quickscript competition.</text>
</message>
<message>
  <ts>2020-10-20T21:01:41.750000</ts>
  <user>Miquel</user>
  <text>Quickscript right? not fishy completion</text>
</message>
<message>
  <ts>2020-10-20T21:02:00.957000</ts>
  <user>Daevion</user>
  <text>I use quickscript.</text>
</message>
<message>
  <ts>2020-10-20T21:02:31.254000</ts>
  <user>Daevion</user>
  <text>But I will use fishy completion when I start coding again.</text>
</message>
<message>
  <ts>2020-10-20T21:02:34.535000</ts>
  <user>Miquel</user>
  <text>nvm thats not it</text>
</message>
<message>
  <ts>2020-10-20T21:02:46.247000</ts>
  <user>Miquel</user>
  <text>How do I install it?</text>
</message>
<message>
  <ts>2020-10-20T21:02:55.199000</ts>
  <user>Miquel</user>
  <text>I want it üôè</text>
</message>
<message>
  <ts>2020-10-20T21:03:02.112000</ts>
  <user>Daevion</user>
  <text>comes with DrRacket by default</text>
</message>
<message>
  <ts>2020-10-20T21:03:07.700000</ts>
  <user>Miquel</user>
  <text>oh</text>
</message>
<message>
  <ts>2020-10-20T21:03:12.501000</ts>
  <user>Miquel</user>
  <text>how come I've never used it</text>
</message>
<message>
  <ts>2020-10-20T21:03:23.157000</ts>
  <user>Daevion</user>
  <text>but doesnt include any scripts</text>
</message>
<message>
  <ts>2020-10-20T21:03:33.692000</ts>
  <user>Miquel</user>
  <text>what does that mean</text>
</message>
<message>
  <ts>2020-10-20T21:03:59.275000</ts>
  <user>Daevion</user>
  <text>you can get a starter set with `raco pkg install quickscriptextra`</text>
</message>
<message>
  <ts>2020-10-20T21:04:14.824000</ts>
  <user>Miquel</user>
  <text>Where do I type this?</text>
</message>
<message>
  <ts>2020-10-20T21:04:37.891000</ts>
  <user>Daevion</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:04:49.023000</ts>
  <user>Daevion</user>
  <text>at the command prompt</text>
</message>
<message>
  <ts>2020-10-20T21:04:58.875000</ts>
  <user>Miquel</user>
  <text>yes</text>
</message>
<message>
  <ts>2020-10-20T21:05:08.685000</ts>
  <user>Daevion</user>
  <text>you need to set your $PATH to include racket/bin</text>
</message>
<message>
  <ts>2020-10-20T21:05:35.408000</ts>
  <user>Miquel</user>
  <text>How do I set my $PATH to include racket/bin</text>
</message>
<message>
  <ts>2020-10-20T21:06:03.228000</ts>
  <user>Daevion</user>
  <text>I'll get the link</text>
</message>
<message>
  <ts>2020-10-20T21:06:05.904000</ts>
  <user>Daevion</user>
  <text>give me a moment</text>
</message>
<message>
  <ts>2020-10-20T21:06:09.908000</ts>
  <user>Miquel</user>
  <text>okay thanks so much</text>
</message>
<message>
  <ts>2020-10-20T21:06:46.930000</ts>
  <user>Daevion</user>
  <text>https://github.com/racket/racket/wiki/SetyourPATHenvironmentvariable</text>
</message>
<message>
  <ts>2020-10-20T21:08:18.495000</ts>
  <user>Daevion</user>
  <text>https://docs.racketlang.org/quickscript/ Quickscript manual</text>
</message>
<message>
  <ts>2020-10-20T21:09:18.099000</ts>
  <user>Miquel</user>
  <text>hey so like I'm on this screen and I'm confused where to go</text>
</message>
<message>
  <ts>2020-10-20T21:09:25.692000</ts>
  <user>Daevion</user>
  <text>https://docs.racketlang.org/quickscriptextra/ Quickscriptextra collection of scripts</text>
</message>
<message>
  <ts>2020-10-20T21:09:27.822000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:10:32.769000</ts>
  <user>Daevion</user>
  <text>is racket in Path the system variables? I can't tell</text>
</message>
<message>
  <ts>2020-10-20T21:10:37.474000</ts>
  <user>Daevion</user>
  <text>click Path</text>
</message>
<message>
  <ts>2020-10-20T21:10:41.655000</ts>
  <user>Daevion</user>
  <text>then click edit</text>
</message>
<message>
  <ts>2020-10-20T21:10:43.632000</ts>
  <user>Miquel</user>
  <text>okay</text>
</message>
<message>
  <ts>2020-10-20T21:10:54.286000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:10:56.481000</ts>
  <user>Miquel</user>
  <text>It opens up this page</text>
</message>
<message>
  <ts>2020-10-20T21:11:47.794000</ts>
  <user>Daevion</user>
  <text>&gt; On Windows 10:&gt; &gt; Add the location of the racket folder to your Path(%Path%) environment variable. The default location is C:\\Program Files\\Racket\\.&gt; &gt; The follow page does a great job of showing all the steps for editing environment variables under Windows including the Path: https://www.hows.tech/2019/03/howtosetenvironmentvariablesinwindows10.html.</text>
</message>
<message>
  <ts>2020-10-20T21:12:03.872000</ts>
  <user>Miquel</user>
  <text>I don't understand what thats supposed to mean lol...</text>
</message>
<message>
  <ts>2020-10-20T21:13:18.371000</ts>
  <user>Miquel</user>
  <text>wait I think I might have got it</text>
</message>
<message>
  <ts>2020-10-20T21:13:18.471000</ts>
  <user>Daevion</user>
  <text>Sorry I should explain</text>
</message>
<message>
  <ts>2020-10-20T21:13:33.532000</ts>
  <user>Miquel</user>
  <text>yeah</text>
</message>
<message>
  <ts>2020-10-20T21:13:36.120000</ts>
  <user>Miquel</user>
  <text>idk</text>
</message>
<message>
  <ts>2020-10-20T21:14:03.009000</ts>
  <user>Daevion</user>
  <text>if you type `raco` in the command prompt it should show you a list of options</text>
</message>
<message>
  <ts>2020-10-20T21:14:14.080000</ts>
  <user>Miquel</user>
  <text>ohh comand prompt</text>
</message>
<message>
  <ts>2020-10-20T21:14:16.936000</ts>
  <user>Miquel</user>
  <text>like cmd</text>
</message>
<message>
  <ts>2020-10-20T21:14:27.986000</ts>
  <user>Miquel</user>
  <text>yes I see</text>
</message>
<message>
  <ts>2020-10-20T21:14:38.285000</ts>
  <user>Daevion</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:14:42.233000</ts>
  <user>Miquel</user>
  <text>I was typing that into the terminal</text>
</message>
<message>
  <ts>2020-10-20T21:14:45.844000</ts>
  <user>Miquel</user>
  <text>of drracket</text>
</message>
<message>
  <ts>2020-10-20T21:14:47.233000</ts>
  <user>Daevion</user>
  <text>yes cmd is correct</text>
</message>
<message>
  <ts>2020-10-20T21:14:55.349000</ts>
  <user>Miquel</user>
  <text>okay</text>
</message>
<message>
  <ts>2020-10-20T21:15:01.244000</ts>
  <user>Daevion</user>
  <text>sorry I should have been clear</text>
</message>
<message>
  <ts>2020-10-20T21:15:14.193000</ts>
  <user>Miquel</user>
  <text>thats okay I'm new to this stuff</text>
</message>
<message>
  <ts>2020-10-20T21:15:37.185000</ts>
  <user>Miquel</user>
  <text>So do I then type `raco pkg install quickscriptextra`</text>
</message>
<message>
  <ts>2020-10-20T21:15:42.081000</ts>
  <user>Miquel</user>
  <text>I didn't install anything yet</text>
</message>
<message>
  <ts>2020-10-20T21:16:07.058000</ts>
  <user>Daevion</user>
  <text>you can also use drracket package manager</text>
</message>
<message>
  <ts>2020-10-20T21:17:01.728000</ts>
  <user>Daevion</user>
  <text>&gt; So do I then type `raco pkg install quickscriptextra`@Tictac a bunch of text should scroll by ? üò¶</text>
</message>
<message>
  <ts>2020-10-20T21:17:13.347000</ts>
  <user>Daevion</user>
  <text>yes</text>
</message>
<message>
  <ts>2020-10-20T21:17:22.215000</ts>
  <user>Miquel</user>
  <text>oh yeah</text>
</message>
<message>
  <ts>2020-10-20T21:17:26.439000</ts>
  <user>Miquel</user>
  <text>its downloading something</text>
</message>
<message>
  <ts>2020-10-20T21:17:47.449000</ts>
  <user>Daevion</user>
  <text>üòÅ</text>
</message>
<message>
  <ts>2020-10-20T21:17:53.547000</ts>
  <user>Daevion</user>
  <text>takes a minute</text>
</message>
<message>
  <ts>2020-10-20T21:17:58.909000</ts>
  <user>Miquel</user>
  <text>its done</text>
</message>
<message>
  <ts>2020-10-20T21:18:08.221000</ts>
  <user>Miquel</user>
  <text>so now what XD</text>
</message>
<message>
  <ts>2020-10-20T21:19:14.946000</ts>
  <user>Daevion</user>
  <text>If DrRacket is already running click on `Scripts`|`Manage scripts`|`Compile scripts and reload` in the menu bar.</text>
</message>
<message>
  <ts>2020-10-20T21:20:16.255000</ts>
  <user>Miquel</user>
  <text>alright</text>
</message>
<message>
  <ts>2020-10-20T21:20:40.100000</ts>
  <user>Miquel</user>
  <text>I did that</text>
</message>
<message>
  <ts>2020-10-20T21:20:51.366000</ts>
  <user>Daevion</user>
  <text>do you see https://media.discordapp.net/attachments/618895179343986688/768218139267432468/unknown.png?width=559&amp;height=505</text>
</message>
<message>
  <ts>2020-10-20T21:21:30.639000</ts>
  <user>Miquel</user>
  <text>I see a bunch of stuff</text>
</message>
<message>
  <ts>2020-10-20T21:21:39.168000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:22:38.360000</ts>
  <user>Daevion</user>
  <text>these are documented at https://docs.racketlang.org/quickscriptextra/</text>
</message>
<message>
  <ts>2020-10-20T21:22:54.408000</ts>
  <user>Miquel</user>
  <text>oh interesting</text>
</message>
<message>
  <ts>2020-10-20T21:24:29.923000</ts>
  <user>Miquel</user>
  <text>which one is to complete a constant name or something when I am writing constants?</text>
</message>
<message>
  <ts>2020-10-20T21:27:02.139000</ts>
  <user>Daevion</user>
  <text>&gt; &gt; Quickscript Extra's dynamic completion (dynamicabbrev) autocompletes words using existing words in the current file. Using it to autocomplete an identifier however means that it will suggest invalid identifiers taken from string literals.&gt;  https://github.com/sorawee/fishycompletion</text>
</message>
<message>
  <ts>2020-10-20T21:27:50.759000</ts>
  <user>Miquel</user>
  <text>I see</text>
</message>
<message>
  <ts>2020-10-20T21:28:06.909000</ts>
  <user>Daevion</user>
  <text>I think you might want `fishycomplete` to get that you need to install `raco pkg install quickscriptcompetition2020`</text>
</message>
<message>
  <ts>2020-10-20T21:28:51.623000</ts>
  <user>Miquel</user>
  <text>It says that its similar to dynamic autocomplete</text>
</message>
<message>
  <ts>2020-10-20T21:29:52.407000</ts>
  <user>Daevion</user>
  <text>the readme has details https://github.com/sorawee/fishycompletion/blob/master/README.md</text>
</message>
<message>
  <ts>2020-10-20T21:31:17.411000</ts>
  <user>Daevion</user>
  <text>Sorry I've got to go now. You might like DrComplete</text>
</message>
<message>
  <ts>2020-10-20T21:31:18.648000</ts>
  <user>Daevion</user>
  <text>https://github.com/yjqww6/drcomplete/blob/master/README.md</text>
</message>
<message>
  <ts>2020-10-20T21:31:39.624000</ts>
  <user>Daevion</user>
  <text>`raco pkg install drcomplete`</text>
</message>
<message>
  <ts>2020-10-20T21:33:16.544000</ts>
  <user>Daevion</user>
  <text>if you don't like it you can remove with</text>
</message>
<message>
  <ts>2020-10-20T21:33:26.188000</ts>
  <user>Daevion</user>
  <text>`raco pkg remove drcomplete`</text>
</message>
<message>
  <ts>2020-10-20T21:33:33.536000</ts>
  <user>Daevion</user>
  <text>and restart drracket</text>
</message>
<message>
  <ts>2020-10-20T21:34:27.068000</ts>
  <user>Miquel</user>
  <text>okay</text>
</message>
<message>
  <ts>2020-10-20T21:34:37.597000</ts>
  <user>Miquel</user>
  <text>I reloaded DrRacket and my scripts from before aren't there anymore</text>
</message>
<message>
  <ts>2020-10-20T21:34:54.865000</ts>
  <user>Miquel</user>
  <text>does that mean I have to like redo the raco thing every single time?</text>
</message>
<message>
  <ts>2020-10-20T21:35:04.316000</ts>
  <user>Daevion</user>
  <text>no</text>
</message>
<message>
  <ts>2020-10-20T21:35:22.571000</ts>
  <user>Daevion</user>
  <text>If DrRacket is already running click on Scripts|Manage scripts|Compile scripts and reload in the menu bar.</text>
</message>
<message>
  <ts>2020-10-20T21:35:43.027000</ts>
  <user>Miquel</user>
  <text>yeah I did that</text>
</message>
<message>
  <ts>2020-10-20T21:35:47.281000</ts>
  <user>Miquel</user>
  <text>but I have this</text>
</message>
<message>
  <ts>2020-10-20T21:35:48.844000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:36:02.410000</ts>
  <user>Daevion</user>
  <text>click library in that menu</text>
</message>
<message>
  <ts>2020-10-20T21:36:20.668000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:36:59.217000</ts>
  <user>Daevion</user>
  <text>thats odd It looks like the quickscriptextra package has been removed</text>
</message>
<message>
  <ts>2020-10-20T21:37:05.068000</ts>
  <user>Miquel</user>
  <text>yeah</text>
</message>
<message>
  <ts>2020-10-20T21:37:10.490000</ts>
  <user>Miquel</user>
  <text>I should redownload it right</text>
</message>
<message>
  <ts>2020-10-20T21:37:25.224000</ts>
  <user>Daevion</user>
  <text>go into the drracket package manager and see if it is still installed?</text>
</message>
<message>
  <ts>2020-10-20T21:37:42.344000</ts>
  <user>Miquel</user>
  <text>how do I access that?</text>
</message>
<message>
  <ts>2020-10-20T21:37:42.622000</ts>
  <user>Daevion</user>
  <text>(check first)</text>
</message>
<message>
  <ts>2020-10-20T21:38:13.259000</ts>
  <user>Miquel</user>
  <text>where can I check the drracket package manager?</text>
</message>
<message>
  <ts>2020-10-20T21:38:18.193000</ts>
  <user>Daevion</user>
  <text>in the file menu</text>
</message>
<message>
  <ts>2020-10-20T21:38:24.363000</ts>
  <user>Miquel</user>
  <text>alright thanks</text>
</message>
<message>
  <ts>2020-10-20T21:38:56.573000</ts>
  <user>Miquel</user>
  <text>I think it says its installed</text>
</message>
<message>
  <ts>2020-10-20T21:38:59.540000</ts>
  <user>Miquel</user>
  <text>None</text>
</message>
<message>
  <ts>2020-10-20T21:40:31.176000</ts>
  <user>Daevion</user>
  <text>sorry close that</text>
</message>
<message>
  <ts>2020-10-20T21:40:50.572000</ts>
  <user>Daevion</user>
  <text>in the interactions do ` (require quickscriptextra/register)`</text>
</message>
<message>
  <ts>2020-10-20T21:40:59.066000</ts>
  <user>Miquel</user>
  <text>alright</text>
</message>
<message>
  <ts>2020-10-20T21:41:10.840000</ts>
  <user>Daevion</user>
  <text>Then click on Scripts|Manage scripts|Compile scripts and reload. (There is no need to restart DrRacket.)</text>
</message>
<message>
  <ts>2020-10-20T21:41:14.485000</ts>
  <user>Miquel</user>
  <text>okay</text>
</message>
<message>
  <ts>2020-10-20T21:41:38.175000</ts>
  <user>Miquel</user>
  <text>ye I got it now thanks!</text>
</message>
<message>
  <ts>2020-10-20T21:41:43.189000</ts>
  <user>Daevion</user>
  <text>it takes a moment or two to reload the menu but they should appear there</text>
</message>
<message>
  <ts>2020-10-20T21:41:55.339000</ts>
  <user>Miquel</user>
  <text>cool nice</text>
</message>
<message>
  <ts>2020-10-20T21:42:36.167000</ts>
  <user>Daevion</user>
  <text>instructions here: https://docs.racketlang.org/quickscript/index.html#%28part._.Quickscript_.Extra%29</text>
</message>
<message>
  <ts>2020-10-20T21:42:54.192000</ts>
  <user>Daevion</user>
  <text>sorry I have to go  I just got back from football and I need a shower.</text>
</message>
<message>
  <ts>2020-10-20T21:43:15.153000</ts>
  <user>Miquel</user>
  <text>oh yeah thank you so muchhhhh</text>
</message>
<message>
  <ts>2020-10-20T21:43:15.351000</ts>
  <user>Daevion</user>
  <text>are you OK? I dont want to leave you in a state were you cant code</text>
</message>
<message>
  <ts>2020-10-20T21:43:17.045000</ts>
  <user>Daevion</user>
  <text>?</text>
</message>
<message>
  <ts>2020-10-20T21:43:18.018000</ts>
  <user>Miquel</user>
  <text>I'm good</text>
</message>
<message>
  <ts>2020-10-20T21:43:19.615000</ts>
  <user>Miquel</user>
  <text>I'm good</text>
</message>
<message>
  <ts>2020-10-20T21:43:23.784000</ts>
  <user>Miquel</user>
  <text>thanks!</text>
</message>
<message>
  <ts>2020-10-20T21:43:27.189000</ts>
  <user>Miquel</user>
  <text>you helped a lot</text>
</message>
<message>
  <ts>2020-10-20T21:43:55.131000</ts>
  <user>Daevion</user>
  <text>its good you set the %Path%</text>
</message>
<message>
  <ts>2020-10-20T21:44:01.247000</ts>
  <user>Miquel</user>
  <text>Thanks for all your help this was a very confusing process so I'm lucky you came to help</text>
</message>
<message>
  <ts>2020-10-20T21:44:24.248000</ts>
  <user>Daevion</user>
  <text>now you can use `raco exe` to compile your code for more speed!</text>
</message>
<message>
  <ts>2020-10-20T21:45:01.539000</ts>
  <user>Miquel</user>
  <text>Compile code with raco exe?</text>
</message>
<message>
  <ts>2020-10-20T21:45:02.960000</ts>
  <user>Daevion</user>
  <text>its good for me to find out what new users find confusing. It helps with documentation</text>
</message>
<message>
  <ts>2020-10-20T21:45:16.262000</ts>
  <user>Miquel</user>
  <text>oo</text>
</message>
<message>
  <ts>2020-10-20T21:45:21.283000</ts>
  <user>Miquel</user>
  <text>wait are you a developer?</text>
</message>
<message>
  <ts>2020-10-20T21:45:25.169000</ts>
  <user>Miquel</user>
  <text>for drracket?</text>
</message>
<message>
  <ts>2020-10-20T21:46:27.149000</ts>
  <user>Daevion</user>
  <text>not a core one but I make small contributions sometimes.</text>
</message>
<message>
  <ts>2020-10-20T21:46:30.014000</ts>
  <user>Daevion</user>
  <text>https://github.com/rackettemplates/clicommand/blob/master/README.md</text>
</message>
<message>
  <ts>2020-10-20T21:47:09.513000</ts>
  <user>Daevion</user>
  <text>the readme and github repo has instructions to compile a small command line utility</text>
</message>
<message>
  <ts>2020-10-20T21:47:55.340000</ts>
  <user>Daevion</user>
  <text>try it out and let me know if you run into any problems  I can help tomorrow.</text>
</message>
<message>
  <ts>2020-10-20T22:14:32.696000</ts>
  <user>Miquel</user>
  <text>Alright cool I'll need to first try to get fishy completion to work</text>
</message>
<message>
  <ts>2020-10-21T07:47:54.735000</ts>
  <user>Bexon</user>
  <text>racketmode broke on me again :meow:</text>
</message>
<message>
  <ts>2020-10-21T07:58:14.623000</ts>
  <user>Bexon</user>
  <text>https://github.com/greghendershott/racketmode/issues/488</text>
</message>
<message>
  <ts>2020-10-21T07:58:17.866000</ts>
  <user>Bexon</user>
  <text>‚Äúclosed‚Äù</text>
</message>
<message>
  <ts>2020-10-21T08:00:50.304000</ts>
  <user>Daevion</user>
  <text>@sarna it was closed because they couldnt reproduce the issue. If you know how to reproduce add the details and reopen the issue üôÇ</text>
</message>
<message>
  <ts>2020-10-21T08:01:50.632000</ts>
  <user>Bexon</user>
  <text>@StephenD the worst thing is that it appears and disappears randomly</text>
</message>
<message>
  <ts>2020-10-21T08:02:01.167000</ts>
  <user>Bexon</user>
  <text>now it appeared two days after installing emacs</text>
</message>
<message>
  <ts>2020-10-21T08:02:26.418000</ts>
  <user>Bexon</user>
  <text>I nuked .emacs.d will see if it helps</text>
</message>
<message>
  <ts>2020-10-21T08:02:34.637000</ts>
  <user>Bexon</user>
  <text>but if I get it again I‚Äôll reopen this issue</text>
</message>
<message>
  <ts>2020-10-21T08:02:36.260000</ts>
  <user>Bexon</user>
  <text>:meow:</text>
</message>
<message>
  <ts>2020-10-21T08:06:55.859000</ts>
  <user>Daevion</user>
  <text>The %252F is part of the query. Maybe an encodign mismatch where the query is sendign UTF16 but racketmode is expecting UTF8</text>
</message>
<message>
  <ts>2020-10-21T08:07:06.677000</ts>
  <user>Daevion</user>
  <text>Only guessing though.</text>
</message>
<message>
  <ts>2020-10-21T08:08:50.027000</ts>
  <user>Bexon</user>
  <text>I had a normallooking path..</text>
</message>
<message>
  <ts>2020-10-21T08:09:12.399000</ts>
  <user>Bexon</user>
  <text>like `/home/me/code/foo.rkt`</text>
</message>
<message>
  <ts>2020-10-21T08:11:16.788000</ts>
  <user>Daevion</user>
  <text>did you try &gt; Move point to the for/fold and press Cu Cx =. In the resulting Help buffer where it describes text properties is there a racketxpdoc property and if so what is its value?</text>
</message>
<message>
  <ts>2020-10-21T08:12:07.293000</ts>
  <user>Daevion</user>
  <text>Include that when you reopen.</text>
</message>
<message>
  <ts>2020-10-21T08:24:25.298000</ts>
  <user>Bexon</user>
  <text>these bindings don‚Äôt work for me</text>
</message>
<message>
  <ts>2020-10-21T08:24:30.366000</ts>
  <user>Bexon</user>
  <text>as I have doom emacs</text>
</message>
<message>
  <ts>2020-10-21T08:24:58.664000</ts>
  <user>Bexon</user>
  <text>I commented on the issue :/</text>
</message>
<message>
  <ts>2020-10-21T08:25:34.027000</ts>
  <user>Daevion</user>
  <text>Ahh  there are lots of doom users on the slack  if you dont use slack I can ask there what hte equivalent bindings in doom are?</text>
</message>
<message>
  <ts>2020-10-21T08:27:06.710000</ts>
  <user>Bexon</user>
  <text>just the command would be enough</text>
</message>
<message>
  <ts>2020-10-21T08:27:07.764000</ts>
  <user>Daevion</user>
  <text>PS Good report  hoping that will help Greg identify the issue.</text>
</message>
<message>
  <ts>2020-10-21T08:27:16.275000</ts>
  <user>Bexon</user>
  <text>I tried :meowblush:</text>
</message>
<message>
  <ts>2020-10-21T08:27:27.554000</ts>
  <user>Bexon</user>
  <text>and you can ask if it‚Äôs not much of a hassle thanks</text>
</message>
<message>
  <ts>2020-10-21T08:27:39.438000</ts>
  <user>Daevion</user>
  <text>I will do it now.</text>
</message>
<message>
  <ts>2020-10-21T08:28:39.992000</ts>
  <user>Daevion</user>
  <text>(You should probably note in your update that you are usign doom as it might be relevant)</text>
</message>
<message>
  <ts>2020-10-21T08:29:19.386000</ts>
  <user>Bexon</user>
  <text>I try not to do that at least at first I had really unpleasant backandforth when using spacemacs</text>
</message>
<message>
  <ts>2020-10-21T08:30:09.493000</ts>
  <user>Bexon</user>
  <text>(asking on #emacs  ‚Äúspacemacs is not emacs ask on their channel!‚Äùasking on #spacemacs  ‚Äúit‚Äôs an emacs problem please try on #emacs‚Äù)</text>
</message>
<message>
  <ts>2020-10-21T08:30:39.727000</ts>
  <user>Daevion</user>
  <text>Greg is not like that.</text>
</message>
<message>
  <ts>2020-10-21T08:30:50.927000</ts>
  <user>Bexon</user>
  <text>I‚Äôll update the issue then</text>
</message>
<message>
  <ts>2020-10-21T08:32:50.020000</ts>
  <user>Akshar</user>
  <text>Is anyone interested in nitpicks on Lisp syntax? Wrote some observations and would be interested in counterarguments</text>
</message>
<message>
  <ts>2020-10-21T08:33:09.527000</ts>
  <user>Bexon</user>
  <text>too many parens huh?</text>
</message>
<message>
  <ts>2020-10-21T08:33:14.959000</ts>
  <user>Akshar</user>
  <text>Oh not that üôÇ</text>
</message>
<message>
  <ts>2020-10-21T08:33:28.610000</ts>
  <user>Bexon</user>
  <text>oh then please go ahead</text>
</message>
<message>
  <ts>2020-10-21T08:33:59.103000</ts>
  <user>Akshar</user>
  <text>First one is about the concept of homoiconicity which is arguably underdefined. What I'm critiquing may not be what other people think about: https://mitranim.com/posts/langhomoiconic</text>
</message>
<message>
  <ts>2020-10-21T08:35:25.121000</ts>
  <user>Daevion</user>
  <text>FWIW the many in the racket community recognise that `(+ 2 ( 3 4))` is a barrier for learners and are actively looking at supporting more familiar infix notations `2+(34)`</text>
</message>
<message>
  <ts>2020-10-21T08:36:10.772000</ts>
  <user>Akshar</user>
  <text>Funny because personally I think that\'s a feature we should never look to fix</text>
</message>
<message>
  <ts>2020-10-21T08:36:25.401000</ts>
  <user>Akshar</user>
  <text>There are other things to fix though such as silly indentation conventions</text>
</message>
<message>
  <ts>2020-10-21T08:36:43.404000</ts>
  <user>Daevion</user>
  <text>you are not alone. lots of different opinions here. that is fine.</text>
</message>
<message>
  <ts>2020-10-21T08:36:46.019000</ts>
  <user>Bexon</user>
  <text>wouldn‚Äôt `(2 . + . (3 .  . 4))` work?</text>
</message>
<message>
  <ts>2020-10-21T08:36:59.204000</ts>
  <user>Akshar</user>
  <text>That's the topic for the next post I was gonna link to discuss...</text>
</message>
<message>
  <ts>2020-10-21T08:37:16.707000</ts>
  <user>Daevion</user>
  <text>yeah but you gotta admit it is unweildly</text>
</message>
<message>
  <ts>2020-10-21T08:37:42.451000</ts>
  <user>Daevion</user>
  <text>I'm going to read your post @Mitranim !</text>
</message>
<message>
  <ts>2020-10-21T08:38:09.795000</ts>
  <user>Daevion</user>
  <text>I'm over at the racket taiwan discord!</text>
</message>
<message>
  <ts>2020-10-21T08:39:11.374000</ts>
  <user>Akshar</user>
  <text>The other one is just observing how much Lisp users _don't_ want to write Sexpressions and hack their way around them: https://mitranim.com/posts/lispsexprhacks</text>
</message>
<message>
  <ts>2020-10-21T08:39:26.403000</ts>
  <user>Akshar</user>
  <text>Doesn't include indentbased conventions but probably should have</text>
</message>
<message>
  <ts>2020-10-21T08:40:01.354000</ts>
  <user>Akshar</user>
  <text>It's all coming from a fan mind you</text>
</message>
<message>
  <ts>2020-10-21T08:40:38.301000</ts>
  <user>Akshar</user>
  <text>There's probably a lot more hacks in obscure dialects</text>
</message>
<message>
  <ts>2020-10-21T08:43:39.528000</ts>
  <user>Bexon</user>
  <text>have you heard of Rhombus?</text>
</message>
<message>
  <ts>2020-10-21T08:44:53.793000</ts>
  <user>Bexon</user>
  <text>but yeah  my biggest issue is that while there‚Äôs virtually no entry barrier (first thing is a function rest is arguments) lisp is still annoyingly hard for me to read</text>
</message>
<message>
  <ts>2020-10-21T08:46:12.092000</ts>
  <user>Daevion</user>
  <text>Have you tried Reading Perl ? ü§£ üò≠ üò±</text>
</message>
<message>
  <ts>2020-10-21T08:46:47.640000</ts>
  <user>Bexon</user>
  <text>I tried Raku and it‚Äôs still more readable to me than Racket :meow:</text>
</message>
<message>
  <ts>2020-10-21T08:47:00.287000</ts>
  <user>Bexon</user>
  <text>Perl is harder</text>
</message>
<message>
  <ts>2020-10-21T08:47:18.183000</ts>
  <user>Daevion</user>
  <text>I've only read perl I've never tried raku</text>
</message>
<message>
  <ts>2020-10-21T08:47:34.501000</ts>
  <user>Bexon</user>
  <text>Raku can read like a human language</text>
</message>
<message>
  <ts>2020-10-21T08:47:38.889000</ts>
  <user>Bexon</user>
  <text>Racket never will</text>
</message>
<message>
  <ts>2020-10-21T08:47:47.757000</ts>
  <user>Bexon</user>
  <text>unless you use a different #lang</text>
</message>
<message>
  <ts>2020-10-21T08:50:32.911000</ts>
  <user>Bexon</user>
  <text>like take a look at how prime numbers are defined here https://github.com/Raku/examples/blob/8d106ca066d6d827d4727b8d78c37b71f4409171/categories/bestofrosettacode/primedecomposition.pl#L28</text>
</message>
<message>
  <ts>2020-10-21T08:51:27.750000</ts>
  <user>Daevion</user>
  <text>There is now a Racket Taiwan Discord at https://discord.gg/xpwzAcx  it accepts several languages: English Chinese and many languages in Taiwan! üíØüòÉüëç</text>
</message>
<message>
  <ts>2020-10-21T08:57:23.098000</ts>
  <user>Akshar</user>
  <text>I guess nitpicks on Lisp syntax was poor phrasing. Makes people talk about syntax _in general_. The observations in the posts above are very specific and more about the implementation</text>
</message>
<message>
  <ts>2020-10-21T08:58:14.112000</ts>
  <user>Daevion</user>
  <text>&gt; like take a look at how prime numbers are defined here https://github.com/Raku/examples/blob/8d106ca066d6d827d4727b8d78c37b71f4409171/categories/bestofrosettacode/primedecomposition.pl#L28@sarna wow! reminds me a lot of Applescript</text>
</message>
<message>
  <ts>2020-10-21T08:58:41.395000</ts>
  <user>Daevion</user>
  <text>(I need to be clear that is not a criticsm)</text>
</message>
<message>
  <ts>2020-10-21T08:58:59.503000</ts>
  <user>Bexon</user>
  <text>never heard of it</text>
</message>
<message>
  <ts>2020-10-21T08:59:06.186000</ts>
  <user>Bexon</user>
  <text>I‚Äôve never had a mac :meow:</text>
</message>
<message>
  <ts>2020-10-21T08:59:59.776000</ts>
  <user>Akshar</user>
  <text>‚Üë Requires a lot of special knowledge just to read</text>
</message>
<message>
  <ts>2020-10-21T09:00:10.554000</ts>
  <user>Akshar</user>
  <text>Needlessly high barrier</text>
</message>
<message>
  <ts>2020-10-21T09:10:47.822000</ts>
  <user>Bexon</user>
  <text>yeah but there‚Äôs a trade off there</text>
</message>
<message>
  <ts>2020-10-21T09:11:03.275000</ts>
  <user>Bexon</user>
  <text>you have to learn quite a lot to read it fluently</text>
</message>
<message>
  <ts>2020-10-21T09:11:08.941000</ts>
  <user>Bexon</user>
  <text>but when you do it‚Äôs grand</text>
</message>
<message>
  <ts>2020-10-21T09:11:39.554000</ts>
  <user>Bexon</user>
  <text>lisps still have that ‚Äúeverything is secondclass‚Äù feeling for me</text>
</message>
<message>
  <ts>2020-10-21T12:12:45.164000</ts>
  <user>Daevion</user>
  <text>[ANN] fastsequence (by Anna Bolotina copied from Racketusers)Hi,I'm pleased to announce fastsequence a package providing a set of efficient and expressive macros for fast sequences.The provided macros have high performance when used in a for (or its variants) clause. The best performance is provided when the macros are applied to fast sequences such as applications of inlist inrange etc. The aim of the package is to make it easier to define new fast sequence forms.Here is the documentation:https://docs.racketlang.org/fastsequence/index.htmlPlease write to me if operations from this package are useful for your work. Feedback is welcome!</text>
</message>
<message>
  <ts>2020-10-21T12:22:00.401000</ts>
  <user>Bexon</user>
  <text>oh that‚Äôs a cool little package</text>
</message>
<message>
  <ts>2020-10-21T12:22:33.139000</ts>
  <user>Daevion</user>
  <text>(by Anna Bolotina copied from Racketusers)</text>
</message>
<message>
  <ts>2020-10-21T12:23:29.457000</ts>
  <user>Daevion</user>
  <text>nothing to do with me  I just thought it was a cool thing that should be shared</text>
</message>
<message>
  <ts>2020-10-21T12:43:25.643000</ts>
  <user>Slavcho</user>
  <text>dammit did I miss the Raku conversation</text>
</message>
<message>
  <ts>2020-10-21T12:46:49.773000</ts>
  <user>Daevion</user>
  <text>You didn't miss much. Someone said lisp syntax is hard to read I responded haha have tried perl someone else said raku is good and gave and example I saw the example and said it reminded me of applescript in a good way then someone else said whats applescript?</text>
</message>
<message>
  <ts>2020-10-21T12:47:42.000000</ts>
  <user>Slavcho</user>
  <text>ah</text>
</message>
<message>
  <ts>2020-10-21T12:48:14.784000</ts>
  <user>Slavcho</user>
  <text>Raku causes me to flipflop language stacks more than I care to admit</text>
</message>
<message>
  <ts>2020-10-21T12:48:34.156000</ts>
  <user>Slavcho</user>
  <text>Sometimes I just get tired of parens</text>
</message>
<message>
  <ts>2020-10-21T14:07:19.299000</ts>
  <user>Yaw</user>
  <text>a long time ago i was a professional perl programmer. it's not my favorite language for various reasons but i still kind of have a soft spot for it because it's so easy to get a lot of things done in it. or maybe because i've put enough time into it to be able to work quickly in it</text>
</message>
<message>
  <ts>2020-10-21T14:07:48.519000</ts>
  <user>Yaw</user>
  <text>i'll still use it for rather small things here and there</text>
</message>
<message>
  <ts>2020-10-21T15:17:00.724000</ts>
  <user>Bexon</user>
  <text>I wanted to use it at work but it got deprecated in favor of Python before I managed to actually write anything in it :meow:</text>
</message>
<message>
  <ts>2020-10-21T17:45:02.896000</ts>
  <user>Adelio</user>
  <text>Hello I wanna to know about how do the cartesian plane with Plot or an any information about 2D renders of this library... Thank u</text>
</message>
<message>
  <ts>2020-10-21T18:07:44.705000</ts>
  <user>Brayan</user>
  <text>have you seen &lt;https://docs.racketlang.org/plot/intro.html#%28part._.Plotting_2.D_.Graphs%29&gt;?</text>
</message>
<message>
  <ts>2020-10-21T19:20:29.507000</ts>
  <user>Adelio</user>
  <text>Yes but i don't understand anything... I'm a beginner :c</text>
</message>
<message>
  <ts>2020-10-21T19:31:47.741000</ts>
  <user>Brayan</user>
  <text>In that case could you ask a more specific question about something you don't understand?</text>
</message>
<message>
  <ts>2020-10-21T19:37:22.126000</ts>
  <user>Adelio</user>
  <text>how do u make a cartesian plane with plot? specifically with points https://docs.racketlang.org/plot/renderer2d.html?q=plot"The first item in the #3.2... Sorry for the english but I am colombian xd</text>
</message>
<message>
  <ts>2020-10-21T20:02:32.423000</ts>
  <user>Zayne</user>
  <text>@Mitranim Both those blog posts were fantastic. I've come to a lot of the same conclusions in the designs of my languages eventually preferring to consider strings and symbols to be the same thing preferring readers that preserve formatting information and preferring syntaxes that completely avoid infix (even in small quantities). I also avoid letting nonparenthesized prefix operations be applied to parenthesized arguments because it messes with indentation style and paren visibility. Traditional Lispy syntax has a lot of room for improvement even with regard to some of the very principles that have supported it this far.</text>
</message>
<message>
  <ts>2020-10-21T20:07:06.113000</ts>
  <user>Zayne</user>
  <text>@KirbySlayer A more specific question would make it easier to help. That section you linked gives two complete examples of using `points`. Do they work for you?</text>
</message>
<message>
  <ts>2020-10-21T20:39:00.559000</ts>
  <user>Brayan</user>
  <text>Kirby if you just want a grid with nothing plotted on it I would probably make `hrule`s and `vrule`s for the ranges and then plot them</text>
</message>
<message>
  <ts>2020-10-21T20:40:57.420000</ts>
  <user>Brayan</user>
  <text>if you do that you'll need to specify the bounds as arguments to the plot function because otherwise plot won't be able to decide what the bounds should be</text>
</message>
<message>
  <ts>2020-10-22T10:23:21.694000</ts>
  <user>Akshar</user>
  <text>&gt; lisps still have that ‚Äúeverything is secondclass‚Äù feeling for meInteresting way to phrase it. Might put this as a slogan on the next language because that's sort of by design</text>
</message>
<message>
  <ts>2020-10-22T10:24:16.442000</ts>
  <user>Akshar</user>
  <text>Allocating special syntax to make `ref` or `[]arr` firstclass has the massive cost of overfitting the language to a particular subset of problems/programs</text>
</message>
<message>
  <ts>2020-10-22T10:26:25.926000</ts>
  <user>Akshar</user>
  <text>I believe we should stop overfitting languages and start designing languages that can be fitted for any problem/program. Been trying to phrase this well enough for a post</text>
</message>
<message>
  <ts>2020-10-22T10:26:48.817000</ts>
  <user>Akshar</user>
  <text>Lisps are overfit too you have to start from scratch from C level and build a full stack language from there</text>
</message>
<message>
  <ts>2020-10-22T10:28:53.338000</ts>
  <user>Akshar</user>
  <text>Might be incendiary to say this in a Racket channel but from my perspective people implementing Lisp in C don't love Lisp enough</text>
</message>
<message>
  <ts>2020-10-22T10:29:14.218000</ts>
  <user>Akshar</user>
  <text>Bad phrasing here assumes too much about people and what they want from languages. Arguably a projection.</text>
</message>
<message>
  <ts>2020-10-22T10:29:43.584000</ts>
  <user>Akshar</user>
  <text>Better suggestions are welcome</text>
</message>
<message>
  <ts>2020-10-22T10:31:42.929000</ts>
  <user>Akshar</user>
  <text>The idea is that we shouldn't confine good qualities of Lisps to the implementation and execution model that prevents them from being selfhosted</text>
</message>
<message>
  <ts>2020-10-22T10:39:49.376000</ts>
  <user>Akshar</user>
  <text>That level requires types and the syntax for types is kind of hard to fit into a Lisp especially when generics are involved. Can create syntactic ambiguities too. I can see why they don't usually bother. But it seems solvable</text>
</message>
<message>
  <ts>2020-10-22T10:46:08.470000</ts>
  <user>Akshar</user>
  <text>Anyway one consequence is that to make the language fittable for the full range of problems from C level to abstract business or scientific logic expressed in a DSL you can't afford to allocate special syntax for _any_ of them so _everything_ must be secondclass which is a useful insight</text>
</message>
<message>
  <ts>2020-10-22T15:08:54.040000</ts>
  <user>Zayne</user>
  <text>I don't think there's a special difficulty with fitting the syntax of types to sexpressions.Within the Racket ecosystem see the contract system the FFI Typed Racket Hackett (a proofofconcept `#lang` with a type system like Haskell's) and Magnolisp (a `#lang` which compiles to C++).Outside the Racket ecosystem see BitC (back when it used sexpressions)... and... I'm sure I've seen at least a couple of lowlevel Schemes meant to be selfhostable intermediate languages but I can't think of what they were called.</text>
</message>
<message>
  <ts>2020-10-22T15:16:29.895000</ts>
  <user>Zayne</user>
  <text>.Scopes is a systems language with a syntax inspired by sexpressions: https://scopes.readthedocs.io/en/latest/dataformat/A lot of these make choices that do give them some specialized syntax aside from sexpressions but I think these can usually be brought back to sexpressions through a series of superficial tweaks to the syntax.</text>
</message>
<message>
  <ts>2020-10-22T15:17:45.338000</ts>
  <user>Akshar</user>
  <text>Oh yes just started reading about Typed Racket today and placing type declarations separately from definitions really helps alleviate the difficulties I thought we'd have</text>
</message>
<message>
  <ts>2020-10-22T15:20:06.343000</ts>
  <user>Akshar</user>
  <text>&gt; I'm sure I've seen at least a couple of lowlevel Schemes meant to be selfhostable intermediate languages but I can't think of what they were called.Would be curious to find truly selfhosted Lisps</text>
</message>
<message>
  <ts>2020-10-22T15:20:53.794000</ts>
  <user>Akshar</user>
  <text>In the sense that it compiles to assembly. I wrote a LisptoJS at some point and it's _technically_ selfhosted but that's not quite as useful</text>
</message>
<message>
  <ts>2020-10-22T15:21:27.154000</ts>
  <user>Britten</user>
  <text>Chez and ikarus do. (Ikarus may have been abandoned I can't keep track of all of those schemes anymore)</text>
</message>
<message>
  <ts>2020-10-22T15:22:53.733000</ts>
  <user>Akshar</user>
  <text>Interesting! Didn't know checking Chez now thanks</text>
</message>
<message>
  <ts>2020-10-22T15:24:24.590000</ts>
  <user>Akshar</user>
  <text>Unsurprisingly Chez source includes C code for allocations GC etc...</text>
</message>
<message>
  <ts>2020-10-22T15:26:07.783000</ts>
  <user>Gianah</user>
  <text>what was the problem? your system using C</text>
</message>
<message>
  <ts>2020-10-22T15:26:18.906000</ts>
  <user>Gianah</user>
  <text>You can use Sexpression write a C</text>
</message>
<message>
  <ts>2020-10-22T15:26:24.104000</ts>
  <user>Gianah</user>
  <text>but that still a C</text>
</message>
<message>
  <ts>2020-10-22T15:27:49.846000</ts>
  <user>Akshar</user>
  <text>Could you please rephrase that? Hard to understand</text>
</message>
<message>
  <ts>2020-10-22T15:28:28.854000</ts>
  <user>Gianah</user>
  <text>`(define a (malloc ( Int)))`</text>
</message>
<message>
  <ts>2020-10-22T15:28:36.702000</ts>
  <user>Gianah</user>
  <text>so this is C or racket?</text>
</message>
<message>
  <ts>2020-10-22T15:29:37.468000</ts>
  <user>Gianah</user>
  <text>You have to interact with your abstract computation model</text>
</message>
<message>
  <ts>2020-10-22T15:29:47.835000</ts>
  <user>Akshar</user>
  <text>Oh yes you could define a typed language using Sexpressions for syntax. It could start Clike but could also have higherlevel supersets all the way up to dynamic typing if desired. That's precisely my point. This could be far more useful than dynamic languages that depend on C instead of competing with it while bereaving their users of this power</text>
</message>
<message>
  <ts>2020-10-22T15:31:06.992000</ts>
  <user>Gianah</user>
  <text>You didn't lose your power: https://github.com/rjnw/sham</text>
</message>
<message>
  <ts>2020-10-22T15:31:32.209000</ts>
  <user>Gianah</user>
  <text>Anyone can make something like this maybe not that easy but possible</text>
</message>
<message>
  <ts>2020-10-22T15:32:14.627000</ts>
  <user>Gianah</user>
  <text>If you build on Clike something then users would like to interact with if they can't they would argue that</text>
</message>
<message>
  <ts>2020-10-22T15:32:34.178000</ts>
  <user>Gianah</user>
  <text>And what was the problem of FFI?</text>
</message>
<message>
  <ts>2020-10-22T15:32:47.171000</ts>
  <user>Gianah</user>
  <text>Maybe you would like to learn PLT? üôÇ</text>
</message>
<message>
  <ts>2020-10-22T15:34:24.529000</ts>
  <user>Akshar</user>
  <text>Hmm would you care to explain the link above? It seems to have no documentation and I don't magically know what it's supposed to do...</text>
</message>
<message>
  <ts>2020-10-22T15:34:29.577000</ts>
  <user>Akshar</user>
  <text>By PLT are you referring to Racket?</text>
</message>
<message>
  <ts>2020-10-22T15:35:24.095000</ts>
  <user>Gianah</user>
  <text>Programming Language Theory</text>
</message>
<message>
  <ts>2020-10-22T15:36:14.622000</ts>
  <user>Akshar</user>
  <text>Maybe I should üôÇ It's about time</text>
</message>
<message>
  <ts>2020-10-22T15:36:19.816000</ts>
  <user>Gianah</user>
  <text>I think they have a paper</text>
</message>
<message>
  <ts>2020-10-22T15:36:44.012000</ts>
  <user>Gianah</user>
  <text>https://arxiv.org/pdf/2005.09028.pdf</text>
</message>
<message>
  <ts>2020-10-22T15:37:33.406000</ts>
  <user>Gianah</user>
  <text>basically you can do code generation via reader macro and control link via something like require or something else or you make a runtime for startup. Then you get what you want.</text>
</message>
<message>
  <ts>2020-10-22T15:38:19.140000</ts>
  <user>Akshar</user>
  <text>Hmm curious</text>
</message>
<message>
  <ts>2020-10-22T15:38:46.236000</ts>
  <user>Akshar</user>
  <text>I'll check the paper will take a while to grok</text>
</message>
<message>
  <ts>2020-10-22T15:42:22.531000</ts>
  <user>Akshar</user>
  <text>So you could start with a dynamic language hosted by C then write code that outputs assembly (Sham DSL or not) and theoretically replace the C code with that code? Sounds suspiciously similar to making a language that uses Sexpressions for syntax to the point that I lose track of the distinction</text>
</message>
<message>
  <ts>2020-10-22T15:43:33.648000</ts>
  <user>Akshar</user>
  <text>Although I should read the paper first they probably have different uses in mind</text>
</message>
<message>
  <ts>2020-10-22T15:43:55.652000</ts>
  <user>Akshar</user>
  <text>Such as linking the generated assembly into the currently running program</text>
</message>
<message>
  <ts>2020-10-22T15:50:13.880000</ts>
  <user>Akshar</user>
  <text>Pretty exciting stuff thanks for linking it</text>
</message>
<message>
  <ts>2020-10-22T16:02:53.693000</ts>
  <user>Akshar</user>
  <text>Curious how easy or hard it would be to take the last logical step and turn this into executable binaries replacing C instead of going C ‚Üí Scheme ‚Üí macros ‚Üí LLVM ‚Üí execution generating that code every time at runtime</text>
</message>
<message>
  <ts>2020-10-22T16:09:42.679000</ts>
  <user>Gianah</user>
  <text>We would have a computation model compiler make an executable format of that model whole stuff. So a macro generate `.o` file as compiler why not? üôÇ</text>
</message>
<message>
  <ts>2020-10-22T16:16:32.050000</ts>
  <user>Akshar</user>
  <text>That was sort of my plan for bootstrapping a language haven't gotten around to learning how to yet</text>
</message>
<message>
  <ts>2020-10-22T16:17:37.937000</ts>
  <user>Akshar</user>
  <text>But I\'ll challenge your claim you didn\'t lose that power because it\'s true in a _technical_ sense but not a _practical_ sense since most users of a dynamic language are indeed locked out of the option to compile to an efficient executable while benefitting from type checking sans writing a compiler themselves by using Sham or somesuch...</text>
</message>
<message>
  <ts>2020-10-22T16:21:26.307000</ts>
  <user>Akshar</user>
  <text>On my system `raco` takes 250ms to print help so something must have gone wrong somewhere ü§∑\u200d‚ôÄÔ∏è</text>
</message>
<message>
  <ts>2020-10-22T16:22:00.559000</ts>
  <user>Akshar</user>
  <text>Apologies I'm not here to offer critique</text>
</message>
<message>
  <ts>2020-10-22T16:22:16.615000</ts>
  <user>Gianah</user>
  <text>Hope chez can save that www</text>
</message>
<message>
  <ts>2020-10-22T16:25:30.915000</ts>
  <user>Gianah</user>
  <text>I understand your point but that kind of language would be really hard limitation removes flexibility. A different layer usually can't work well together then you still have to unify them together</text>
</message>
<message>
  <ts>2020-10-22T16:27:15.161000</ts>
  <user>Gianah</user>
  <text>I think https://github.com/SharkLang/Documentations/blob/main/doc.md trying to do what you thought but they use Chinese... I tell them use English...</text>
</message>
<message>
  <ts>2020-10-22T16:48:03.530000</ts>
  <user>Daevion</user>
  <text>https://translate.google.co.uk/translate?sl=zhCN&amp;tl=en&amp;u=https%3A%2F%2Fgithub.com%2FSharkLang%2FDocumentations%2Fblob%2Fmain%2Fdoc.md</text>
</message>
<message>
  <ts>2020-10-22T16:48:12.218000</ts>
  <user>Daevion</user>
  <text>(seems passable)</text>
</message>
<message>
  <ts>2020-10-22T17:35:45.940000</ts>
  <user>Britten</user>
  <text>@StephenD Thank you for sharing Leif's paper. It's given me more to digest.</text>
</message>
<message>
  <ts>2020-10-22T19:50:28.540000</ts>
  <user>Daevion</user>
  <text>Thank Leif !</text>
</message>
<message>
  <ts>2020-10-27T22:15:39.306000</ts>
  <user>Daevion</user>
  <text>https://youtu.be/Pk3c9XarfHU</text>
</message>
<message>
  <ts>2020-10-30T12:08:38.728000</ts>
  <user>Abdenacer</user>
  <text>hi everyone! how hard do you think it will be to compile the `pollen` to `js` using racketscript (https://github.com/vishesh/racketscript) or whalesong (https://planet.racketlang.org/packagesource/dyoo/whalesong.plt/1/8/planetdocs/manual/index.html) ? or maybe to `wasm`?</text>
</message>
<message>
  <ts>2020-10-30T12:09:08.923000</ts>
  <user>Abdenacer</user>
  <text>the idea is to make fully clientside pollen webeditor</text>
</message>
<message>
  <ts>2020-10-30T12:34:13.698000</ts>
  <user>Daevion</user>
  <text>Welcome @kilomeow Do you mean a pollen editor or a pollen compiler? (or both?)Notes:  RacketScript is currently not working as it is being updated to support the linklets changes in Racket. (vishesh has a new job and while he is still contributing he can't allocate as much time so has handed leadership over to Stephen Chang who is working on the update effort) I dont think whalesong will do this. We currently have wasm backend. The switch to the Chez Scheme backend will eventually make this possibly but I'm not aware of anyone working on wasm yet.</text>
</message>
<message>
  <ts>2020-10-30T12:36:15.421000</ts>
  <user>Abdenacer</user>
  <text>I'm talking more about pollen compiler. I want to do transformation from pollen markup/markdown to html on the clientside.</text>
</message>
<message>
  <ts>2020-10-30T12:37:00.451000</ts>
  <user>Abdenacer</user>
  <text>thank you for information on current state of `js` compilers. Wasm backend seems very interesting</text>
</message>
<message>
  <ts>2020-10-30T12:39:16.333000</ts>
  <user>Daevion</user>
  <text>I don't know your constraints but I'd suggest having a web based editor with compiling happening on a server being much more achievable and would provide a stepping stone towards doing it all on the client.</text>
</message>
<message>
  <ts>2020-10-30T12:41:56.519000</ts>
  <user>Abdenacer</user>
  <text>yeah it's already done with `pollenrock` and it rocks üòâ</text>
</message>
<message>
  <ts>2020-10-30T12:42:54.189000</ts>
  <user>Daevion</user>
  <text>I didn't know about that  can you share the link?</text>
</message>
<message>
  <ts>2020-10-30T12:43:25.485000</ts>
  <user>Abdenacer</user>
  <text>https://docs.racketlang.org/pollenrock/index.html</text>
</message>
<message>
  <ts>2020-10-30T12:44:19.247000</ts>
  <user>Abdenacer</user>
  <text>There is a deep difficulty in the fact that pollen is dsl for a racket and it seems that it's not so easy to compile to js/wasm. There is need to add some parts of the racket interpreter to js code üôÇ</text>
</message>
<message>
  <ts>2020-10-30T12:45:26.761000</ts>
  <user>Abdenacer</user>
  <text>but there is a real profit of doing this because fully clientside pollen webeditor would be much cooler</text>
</message>
<message>
  <ts>2020-10-30T12:45:55.989000</ts>
  <user>Abdenacer</user>
  <text>and it would be possible to add multiuser collaboration on the level of source editor</text>
</message>
<message>
  <ts>2020-10-30T12:54:47.490000</ts>
  <user>Daevion</user>
  <text>&gt; and it would be possible to add multiuser collaboration on the level of source editor@kilomeow that could be added to pollenrock.</text>
</message>
<message>
  <ts>2020-10-30T12:56:13.386000</ts>
  <user>Daevion</user>
  <text>I think multiuser collaboration is harder sansserver  I think there have been some projects to do it (not in racket)</text>
</message>
<message>
  <ts>2020-10-30T12:57:41.955000</ts>
  <user>Daevion</user>
  <text>Two people editing the same document onscreen at the same time probably also has disadvantages.</text>
</message>
<message>
  <ts>2020-10-30T12:58:07.458000</ts>
  <user>Daevion</user>
  <text>(It certainly has technical challenges)</text>
</message>
<message>
  <ts>2020-10-30T12:58:54.492000</ts>
  <user>Daevion</user>
  <text>Can I suggest an alternative? Set up a github action that compiles a pollen repository on commits.</text>
</message>
<message>
  <ts>2020-10-30T13:12:33.546000</ts>
  <user>Abdenacer</user>
  <text>oh that's cool idea</text>
</message>
<message>
  <ts>2020-10-30T15:44:56.440000</ts>
  <user>Daevion</user>
  <text>I can't recall one. would be fun. 2htdp/universe &amp; 2htdp/image</text>
</message>
<message>
  <ts>2020-10-30T15:45:15.367000</ts>
  <user>Daevion</user>
  <text>or a console version!</text>
</message>
</discord>