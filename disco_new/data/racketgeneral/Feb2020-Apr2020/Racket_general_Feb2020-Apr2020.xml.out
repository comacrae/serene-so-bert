<discord>
<team_domain>Racket</team_domain>
<channel_name>general</channel_name>
<start_date>2020-02-03T08:10:31.436000</start_date>
<end_date>2020-04-30T17:32:34.142000</end_date>
<message conversation_id="1">
  <ts>2020-02-03T08:10:31.436000</ts>
  <user>Shaiel</user>
  <text>inspired by https://apos.itch.io/binaryinput i made a way to enter text using only `a` and `d`</text>
</message>
<message conversation_id="1">
  <ts>2020-02-03T08:11:13.376000</ts>
  <user>Shaiel</user>
  <text>https://shawsumma.com/vuhicarasi.scm</text>
</message>
<message conversation_id="2">
  <ts>2020-02-12T01:47:53.501000</ts>
  <user>Reeyansh</user>
  <text>anyone here have experience with and/or feelings about Racket concurrency?</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T02:34:39.882000</ts>
  <user>Karanveer</user>
  <text>I like the CML system myself.</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T02:53:42.752000</ts>
  <user>Thaleia</user>
  <text>I want to learn `racket/places` sometime.</text>
</message>
<message conversation_id="2">
  <ts>2020-02-12T03:40:29.136000</ts>
  <user>Reeyansh</user>
  <text>I like the CML system but wish there was also something for cooperative concurrency</text>
</message>
<message conversation_id="2">
  <ts>2020-02-12T03:41:06.404000</ts>
  <user>Reeyansh</user>
  <text>noncooperative concurrency is painful to write programs in because you need to make sure all mutable state is thread safe</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T04:25:31.387000</ts>
  <user>Karanveer</user>
  <text>That's reasonable</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T04:26:17.465000</ts>
  <user>Karanveer</user>
  <text>Unfortunately I think the preemption is baked into the runtime</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T04:27:29.705000</ts>
  <user>Karanveer</user>
  <text>Although you could build a lang that probably did cooperative but it would probably have interfacing trickyness</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T04:28:08.910000</ts>
  <user>Karanveer</user>
  <text>At least where it interfaced with the current runtime threads</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T04:32:44.776000</ts>
  <user>Karanveer</user>
  <text>Doesn't disabling breaks get you a limited sort of atomicity?</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T06:11:36.337000</ts>
  <user>Reeyansh</user>
  <text>you can build a cooperative concurrency framework on top of noncooperative threading (and I do want both anyway)</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T06:12:11.393000</ts>
  <user>Reeyansh</user>
  <text>there's this really _really_ cool cooperative async programming framework at my day job called Promise Graph</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T06:13:45.735000</ts>
  <user>Reeyansh</user>
  <text>it's basically javascript Promises/A+ but with this added `PromiseRunner` thing that you use like this:```Future&lt;Foo&gt; result = runner.run(() &gt; ... some code returning a Promise&lt;Foo&gt; ...)```</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T06:19:28.784000</ts>
  <user>Reeyansh</user>
  <text>the semantics are basically this:1. everything in the lambda given to `run` makes up one _graph_2. within a graph all concurrency is cooperative3. across graphs it's noncooperative4. there's a shared thread pool for running all graphs and there's never any parallel execution within a graph (only singlethreaded concurrent execution)</text>
</message>
<message conversation_id="1">
  <ts>2020-02-12T06:22:42.224000</ts>
  <user>Reeyansh</user>
  <text>That way you can use the runner to decide when you want to insert a noncooperative execution boundary letting you express how cooperative you want different pieces of code to be. For instance a webserver might want to wrap the code handling each request in a call to run() so that a problem in that graph (like a CPUhogging block of code that interferes with the cooperative concurrency system) doesn't prevent the handling of other requests. But within a single request handler there wouldn't be much point to use run() because it's kind of an allornothing deal anyway. No need to worry about fairness among the different pieces of code used to handle a single request.</text>
</message>
<message conversation_id="1">
  <ts>2020-02-13T02:00:33.575000</ts>
  <user>Reeyansh</user>
  <text>I took an experimental stab at the nonsense above: https://github.com/jackfirth/fiberweb</text>
</message>
<message conversation_id="3">
  <ts>2020-02-13T02:30:24.419000</ts>
  <user>Thaleia</user>
  <text>Ooh!</text>
</message>
<message conversation_id="1">
  <ts>2020-02-13T02:32:16.986000</ts>
  <user>Reeyansh</user>
  <text>it doesn't even come close to working yet but the basic shape of the API is there</text>
</message>
<message conversation_id="3">
  <ts>2020-02-13T02:33:13.645000</ts>
  <user>Thaleia</user>
  <text>I like the topdown approach the DSL design.</text>
</message>
<message conversation_id="3">
  <ts>2020-02-13T02:33:31.350000</ts>
  <user>Thaleia</user>
  <text>ie First write the language you want then write the actual implementation.</text>
</message>
<message conversation_id="4">
  <ts>2020-02-14T13:55:13.339000</ts>
  <user>Thaleia</user>
  <text>None</text>
</message>
<message conversation_id="3">
  <ts>2020-02-14T21:05:57.766000</ts>
  <user>Macia</user>
  <text>Blog post: https://www.greghendershott.com/2020/02/usingdrracketchecksyntaxinracketmode.html</text>
</message>
<message conversation_id="3">
  <ts>2020-02-14T21:21:15.487000</ts>
  <user>Thaleia</user>
  <text>I'm so glad to see Hendershott still working on Racket.</text>
</message>
<message conversation_id="4">
  <ts>2020-02-15T17:12:24.793000</ts>
  <user>Macia</user>
  <text>https://pkgd.racketlang.org/pkgn/package/draculatheme</text>
</message>
<message conversation_id="4">
  <ts>2020-02-16T04:14:56.581000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam whatcha think? https://github.com/jackfirth/rebellion/issues/418</text>
</message>
<message conversation_id="5">
  <ts>2020-02-16T04:28:21.796000</ts>
  <user>Karanveer</user>
  <text>An enum would be a distinct type backed by a bitstring?</text>
</message>
<message conversation_id="5">
  <ts>2020-02-16T04:28:40.462000</ts>
  <user>Karanveer</user>
  <text>Oh an enum set</text>
</message>
<message conversation_id="5">
  <ts>2020-02-16T04:28:50.647000</ts>
  <user>Karanveer</user>
  <text>Yes that sounds good</text>
</message>
<message conversation_id="5">
  <ts>2020-02-16T04:31:59.085000</ts>
  <user>Reeyansh</user>
  <text>yeah so like given an enum for northeastsouthwest `(enumset north west)` would be represented by whatever fixnum corresponds to the bits `1001`</text>
</message>
<message conversation_id="5">
  <ts>2020-02-16T04:47:00.740000</ts>
  <user>Karanveer</user>
  <text>Got it</text>
</message>
<message conversation_id="6">
  <ts>2020-02-16T23:01:01.198000</ts>
  <user>Karanveer</user>
  <text>Hey @notjack just skimming fiberweb... what is the operation to yield control back to the scheduler?</text>
</message>
<message conversation_id="7">
  <ts>2020-02-17T01:02:07.522000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam `syncfiber` is the only way to pause execution</text>
</message>
<message conversation_id="7">
  <ts>2020-02-17T01:04:07.295000</ts>
  <user>Reeyansh</user>
  <text>the idea being that the scheduler will keep track of all `syncfiber` fibers and simultaneously `sync` on their events then once one of the events is ready the engine will stop `sync`ing the other events in order to run any chained fibers that were waiting for the chosen sync fiber</text>
</message>
<message conversation_id="7">
  <ts>2020-02-17T01:04:42.288000</ts>
  <user>Reeyansh</user>
  <text>once there's no more fiber transforms to run the engine goes back to `sync`ing on external events and waiting for something to be ready</text>
</message>
<message conversation_id="7">
  <ts>2020-02-17T01:09:42.776000</ts>
  <user>Karanveer</user>
  <text>Ah I see</text>
</message>
<message conversation_id="7">
  <ts>2020-02-17T21:31:16.427000</ts>
  <user>Reeyansh</user>
  <text>thinking about fiberweb more</text>
</message>
<message conversation_id="7">
  <ts>2020-02-17T21:31:34.011000</ts>
  <user>Reeyansh</user>
  <text>it needs some way to support cancellation</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T09:42:37.093000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam ended up designing an async task thing that\'s like a long running operation that can be sync\'d on multiple times and can be cancelled https://github.com/jackfirth/rebellion/pull/423</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T09:42:51.337000</ts>
  <user>Reeyansh</user>
  <text>I'm thinking fiberweb would build on top of that</text>
</message>
<message conversation_id="8">
  <ts>2020-02-20T17:59:13.248000</ts>
  <user>Karanveer</user>
  <text>So I ended up needing something like run a bunch of threads in parallel and get their results last week this is the simple solution I rolled (which works fine for a throwaway script situation.)https://gist.github.com/samdphillips/a45586488e0f632a9b1acc240e835830</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T19:11:47.563000</ts>
  <user>Reeyansh</user>
  <text>Interesting it gives me Java `Executor` vibes</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T19:12:30.256000</ts>
  <user>Reeyansh</user>
  <text>Hmm I can't think of a good way to rewrite that example in a `define`style notation</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T19:12:54.047000</ts>
  <user>Reeyansh</user>
  <text>since it uses the binders for the result after blocking</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T19:31:26.329000</ts>
  <user>Karanveer</user>
  <text>The binders are mostly because I didn't want to have to write `(futureref v)` :p</text>
</message>
<message conversation_id="8">
  <ts>2020-02-20T19:32:13.328000</ts>
  <user>Karanveer</user>
  <text>Also the API is fairly naive</text>
</message>
<message conversation_id="8">
  <ts>2020-02-20T19:35:45.461000</ts>
  <user>Karanveer</user>
  <text>In the actual script I pulled that out of I was pulling from multiple HTTP APIs some data and in the body doing a comparison.</text>
</message>
<message conversation_id="7">
  <ts>2020-02-20T19:55:20.296000</ts>
  <user>Reeyansh</user>
  <text>Makes total sense</text>
</message>
<message conversation_id="8">
  <ts>2020-02-24T16:25:40.381000</ts>
  <user>Macia</user>
  <text>Racket editor usage survey results</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:04:01.247000</ts>
  <user>Gonzaga</user>
  <text>I aspire to be as productive as that one guy using DrRacket Emacs and Vim all at the same time.</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:05:17.296000</ts>
  <user>Kire</user>
  <text>😂</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:10:53.511000</ts>
  <user>Kire</user>
  <text>@WillBAnders  I guess would be appropriate for here then. I haven't played around with typed racket too much yet what are your concerns with it?</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:12:17.275000</ts>
  <user>Gonzaga</user>
  <text>In my case largely lack of familiarity making it difficult to get started and then macros.</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:21:45.036000</ts>
  <user>Kire</user>
  <text>I mean just at surface level it doesn't look too different from OCaml to me?```scheme(: functionname (&gt; param1 param2 output))```Looks like it's missing ADTs which sucks but there's union types and recursive types which is nice.</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:31:46.611000</ts>
  <user>Gonzaga</user>
  <text>I mean I really don't like OCaml so yeah :p</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:32:47.755000</ts>
  <user>Kire</user>
  <text>Lol I actually don't know OCaml at all I just know it's popular among language people 😂</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:32:57.687000</ts>
  <user>Gonzaga</user>
  <text>It's something that takes getting used to but for me the main limitation is that it can't cover macros. And I learned how to create languages almost entirely using macros.</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:33:16.121000</ts>
  <user>Gonzaga</user>
  <text>I mean I'm not the typical language person. But that sounds more like a popular among theory people.</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:36:49.368000</ts>
  <user>Kire</user>
  <text>Isn't the input to any macro just a symbol or list though? I'm not as familiar with Racket macros as Common Lisp macros so I don't know how Racket differs. But since macros are evaluated at compile time there won't be any resolution of the types yet so it's all just symbols or lists of symbols isn't it?</text>
</message>
<message conversation_id="7">
  <ts>2020-02-24T17:37:40.725000</ts>
  <user>Kire</user>
  <text>And yea OCaml is definetely more academic. I've never really gone near it but I'm interested in it only cause it has official bindings in LLVM and I really hate C++ which is the only other one with official bindings.</text>
</message>
<message conversation_id="9">
  <ts>2020-02-24T18:13:28.399000</ts>
  <user>Gonzaga</user>
  <text>With typed macros there doesn't need to be contextual information and such. To an extent you build the syntax. But doing things effectively is a bit of a mess to integrate in with a program. I'd like to be able to say something like `x: Expr&lt;Boolean&gt;` to identify something that produces a boolean when executed.</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:25:40.966000</ts>
  <user>Kire</user>
  <text>So what are you using for language development now?</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:27:05.927000</ts>
  <user>Kire</user>
  <text>And you're not the first person I've talked to who's mentioned a desire for typed macros  I wonder if it's something that would be worth making an issue/proposal for on the typed racket github repo? At least have a conversation with some of the devs about it?</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:34:27.104000</ts>
  <user>Karanveer</user>
  <text>You mean macros that expand to typed code?</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:35:18.674000</ts>
  <user>Karanveer</user>
  <text>Normally in TR at syntax time you are using `racket/base`</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:35:32.474000</ts>
  <user>Karanveer</user>
  <text>And you can expand to any TR code.</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:35:35.659000</ts>
  <user>Karanveer</user>
  <text>IIRC</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:43:51.810000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam I think they mean macros where the syntax transforming function that `definesyntax` is bound to is typed.</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:45:47.673000</ts>
  <user>Reeyansh</user>
  <text>e.g `(: myor (Macro&gt; (Expression A) ... (Expression (U A #f)))`</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:46:35.717000</ts>
  <user>Karanveer</user>
  <text>That was my second guess</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:47:09.870000</ts>
  <user>Karanveer</user>
  <text>You can use TR at expand time but everything is Syntax iirc</text>
</message>
<message conversation_id="10">
  <ts>2020-02-24T18:48:15.623000</ts>
  <user>Reeyansh</user>
  <text>Would need to implement chaperones and impersonators for syntax objects first. Then contracts then types.</text>
</message>
<message conversation_id="11">
  <ts>2020-02-24T19:19:39.493000</ts>
  <user>Karanveer</user>
  <text>Ah I was thinking of just liberal use of `ann` and `cast`</text>
</message>
<message conversation_id="11">
  <ts>2020-02-24T19:25:57.749000</ts>
  <user>Karanveer</user>
  <text>But yeah you'd need some new type and all of the interacting with untyped machinery</text>
</message>
<message conversation_id="11">
  <ts>2020-02-24T19:29:19.709000</ts>
  <user>Karanveer</user>
  <text>I kinda wish there were more industrial experiments with Turnstile. If you don\'t need full blown gradual typing this seems like a good use case as an extension to one of their typed core languages.</text>
</message>
<message conversation_id="12">
  <ts>2020-02-24T20:50:37.386000</ts>
  <user>Reeyansh</user>
  <text>Unrelatedly I have a survey question for you all. How would you summarize the behaviour of the `equal?` function?</text>
</message>
<message conversation_id="11">
  <ts>2020-02-24T21:34:43.614000</ts>
  <user>Karanveer</user>
  <text>Structural equivalence</text>
</message>
<message conversation_id="12">
  <ts>2020-02-24T21:39:40.696000</ts>
  <user>Reeyansh</user>
  <text>but `gensym`? also structural equivalence often isn't what you want with mutable data because it ignores whether updates will be reflected by both values</text>
</message>
<message conversation_id="12">
  <ts>2020-02-24T21:50:41.868000</ts>
  <user>Macia</user>
  <text>Racket LONDON meetup AprilProposed date: Thursday 9th April 12pm, probably at a cafe near St Pancras station. (suggestions appreciated?)Please let me know if you are interested even if you can’t confirm attendance. I’ll take the afternoon out of my holiday leave so I can get there.(If the numbers get too big and I need to book a meeting room I think the best I can get is an hour at kingscross.impacthub.net for £5.70 pp)It will be casual introductions and chat though if someone wants to do a short talk or demo that would be most welcome.Kind regards,Stephen</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T21:50:55.934000</ts>
  <user>Macia</user>
  <text>Pinned a message.</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T21:53:24.452000</ts>
  <user>Kire</user>
  <text>If anyone ends up doing any talks would you stream it?</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T21:56:07.778000</ts>
  <user>Macia</user>
  <text>@nixin72 could try with OBS?</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T21:56:34.849000</ts>
  <user>Macia</user>
  <text>Are you too far away to attend?</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T21:57:01.821000</ts>
  <user>Kire</user>
  <text>Hahah I'm in North America.</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T22:11:10.860000</ts>
  <user>Gonzaga</user>
  <text>@nixin72 Self implemented. Recursive descent parser and standard treewalk interpreter. Will eventually get to an actual compiler but yeah.</text>
</message>
<message conversation_id="13">
  <ts>2020-02-24T23:24:26.036000</ts>
  <user>Karanveer</user>
  <text>@notjack equivalence is hard.</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:04:14.928000</ts>
  <user>Adelynne</user>
  <text>@notjackPessimistically I suppose I\'d say `equal?` is a procedurally defined cyclecapable and hashcapable equality decision procedure over nonimpersonator non`eq?` values which inherit their relevant structure type property implementation from the same structure type. It\'s susceptible to abstraction leaks arising from illbehaved userdefined implementations.Optimistically most implementations of `equal?` are wellbehaved in ways that make them consistent with intuitive notions of Racket code equivalence: Racket code that\'s in functional style usually takes `equal?` inputs to `equal?` outputs. In order to play well with functional style Racket\'s contract projections are `equal?` to the original value when possible (even going so far as to use impersonators and chaperones which `equal?` automatically unwraps). If two values `write` or `print` to the same representation they\'re usually `equal?` when possible.The `equal?` behaviors generally traverse into the contents of mutable containers. This is a convention which meshes well with the idea that `equal?` is capable of comparing reference cycles: It means we can tell a story of data that has a short lifetime of mutability during which we wire up its cycles followed by a lifetime of immutabilitybyconvention during which we make comparisons using `equal?`. More broadly immutable by convention data has historically been pretty common in Lisp and Scheme with cons cells being mutable and many userdesigned data formats being represented as cons cells.</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:35:37.451000</ts>
  <user>Kire</user>
  <text>Here I am like `equal?` checks if two values are equal</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:36:11.700000</ts>
  <user>Kire</user>
  <text>https://media.tenor.com/images/b1dbbc375b3e65cf0d2a1729c894762d/tenor.gif</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:41:14.720000</ts>
  <user>Karanveer</user>
  <text>😛</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:41:47.946000</ts>
  <user>Karanveer</user>
  <text>@rocketnia that is a very good Rackety answer.</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:44:49.724000</ts>
  <user>Karanveer</user>
  <text>`eq?` vs. `eqv?` vs. `equal?` is always a big think.</text>
</message>
<message conversation_id="14">
  <ts>2020-02-25T00:52:17.497000</ts>
  <user>Gonzaga</user>
  <text>`.EQV.`</text>
</message>
<message conversation_id="15">
  <ts>2020-02-25T01:04:03.476000</ts>
  <user>Adelynne</user>
  <text>There are a lot of different factors involved and I\'ve had to split a lot of these hairs \'cause I\'ve pursued: A notion of equality for Interconfection that\'s more trustworthy even at the price of not allowing quite as many different kinds of custom behavior to be defined. Essentially every custom equality behavior in this system has to be cobbled out of some knowngood pieces to ensure that it\'s wellbehaved. Another notion of equality for Lathe Morphisms that has a different kind of customizable operation. Namely if a user has a certain kind of value they can derive a contract from it that recognizes other values that are close enough.</text>
</message>
<message conversation_id="15">
  <ts>2020-02-25T01:12:49.447000</ts>
  <user>Reeyansh</user>
  <text>I actually don't think the behaviour of `equal?` on mutable lists and other containers is a good precedent to follow. New mutable collection types _shouldn't_ compare their contents like that.</text>
</message>
<message conversation_id="15">
  <ts>2020-02-25T01:15:00.564000</ts>
  <user>Reeyansh</user>
  <text>It makes it impossible to answer the question are these the same mutable collection</text>
</message>
<message conversation_id="15">
  <ts>2020-02-25T01:16:52.198000</ts>
  <user>Reeyansh</user>
  <text>We shouldn't really just describe what `equal?` does for various standard types we should try to describe a philosophy that helps people figure out how to design equality for new types.</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:40:00.650000</ts>
  <user>Karanveer</user>
  <text>For mutable containers wouldn't you just use `eq?` then?</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:40:53.222000</ts>
  <user>Karanveer</user>
  <text>Of course impersonators et al. break that ...</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:41:12.655000</ts>
  <user>Adelynne</user>
  <text>In programs that use two mutable collections is it really common to need to check whether two given collections are the same one? And why not check that by carrying it in a container whose `equal?` compares it by `eq?`? It's not like `equal?` actually enforces that the two values have the same behavior. (That's why I took the approach I've taken in Interconfection to really guarantee that two values are the same.)</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:44:12.475000</ts>
  <user>Reeyansh</user>
  <text>`eq?` doesn't work because contracts insert chaperones and impersonators</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:47:30.511000</ts>
  <user>Reeyansh</user>
  <text>use case for testing whether two mutable collections are the same: a function that creates a copy of a mutable collection. You could write a contact that verifies it really is returning a fresh copy that doesn't reflect changes to the original.</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:47:40.945000</ts>
  <user>Karanveer</user>
  <text>`eqbutworksonindirects?`</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:49:51.781000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam that could work but like... why? When mutable collections are involved in my experience structural equality stops being a useful default. If I really wanted to check for structural equality between mutable collections I'd just do `(equal? (&gt;myimmutablecollection xs) (&gt;myimmutablecollection ys))`</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T01:50:33.866000</ts>
  <user>Reeyansh</user>
  <text>I'm way more likely to remember that than to remember the name of `eqbutworksonindirects?`</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T02:10:57.417000</ts>
  <user>Karanveer</user>
  <text>Honestly this sort of problem hasn't bitten me much in Racket.</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T02:14:00.155000</ts>
  <user>Reeyansh</user>
  <text>I blame that on the lack of generic collection interfaces</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T02:20:45.312000</ts>
  <user>Adelynne</user>
  <text>I think of mutable vector that\'s compared by present contents which are likely to be stable by the time we compare them and mutable vector that\'s compared by potential future behavior ignoring its present contents altogether as two types that can coexist. So although I summarized `equal?` as traversing into mutable collections to find cycles I think that\'s not a really essential factor in the design and I probably wouldn\'t think twice if future collections were designed to have the other kind of equality.</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T03:57:00.096000</ts>
  <user>Reeyansh</user>
  <text>agreed I don't think it's essential either</text>
</message>
<message conversation_id="17">
  <ts>2020-02-25T15:57:25.454000</ts>
  <user>Karanveer</user>
  <text>I had some thought yesterday about what if there was some opaque value that you could interrogate a value for that you could use as a proxy for equivalence I just realized that I invented hash codes.</text>
</message>
<message conversation_id="18">
  <ts>2020-02-25T17:43:47.677000</ts>
  <user>Kire</user>
  <text>Is there a way to pretty print lists the same way as in SBCL? Like if you print a big nested tree in SBCL it'll format it properly for you but this isn't the default behaviour in Racket. Is there a way to do this?</text>
</message>
<message conversation_id="18">
  <ts>2020-02-25T17:46:42.004000</ts>
  <user>Kire</user>
  <text>I'm trying to play around with the `prettyprint` function but can't figure out how to get it to behave the way I want.</text>
</message>
<message conversation_id="18">
  <ts>2020-02-25T17:47:05.464000</ts>
  <user>Kire</user>
  <text>It's not printing any differently than just `print` or `println`</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T18:17:04.706000</ts>
  <user>Reeyansh</user>
  <text>@nixin72 does messing with `prettyprintcolumns` do what you want? also if some of the lists are fixed size you could replace them with structs or record types (https://docs.racketlang.org/rebellion/Record_Types.html) which will have more useful printed representations than lists</text>
</message>
<message conversation_id="17">
  <ts>2020-02-25T21:34:27.741000</ts>
  <user>Karanveer</user>
  <text>I\'m trying to fix a python script so that it properly gracefully exits on SIGINT and all I can think about is this Mike Sperber video about CML https://www.youtube.com/watch?v=pf4VbP5q3P0</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T23:29:32.615000</ts>
  <user>Reeyansh</user>
  <text>Events are amazing</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T23:33:47.676000</ts>
  <user>Reeyansh</user>
  <text>They're frustratingly lowlevel but that's not really their fault. Locks are frustratingly lowlevel too. Code usually wants to be using something built on top of events or locks or what have you.</text>
</message>
<message conversation_id="16">
  <ts>2020-02-25T23:34:10.584000</ts>
  <user>Reeyansh</user>
  <text>and that stuff is way easier to build on top of events than locks</text>
</message>
<message conversation_id="19">
  <ts>2020-02-26T15:45:26.435000</ts>
  <user>Macia</user>
  <text>At 62 response sadly the histogram doesn't show\xa0how many people use two or even three editors. https://www.surveymonkey.com/results/SMGBD6J7ST7/</text>
</message>
<message conversation_id="20">
  <ts>2020-02-26T16:03:26.393000</ts>
  <user>Thaleia</user>
  <text>Is the poll still open?</text>
</message>
<message conversation_id="19">
  <ts>2020-02-26T16:05:09.367000</ts>
  <user>Macia</user>
  <text>Yes</text>
</message>
<message conversation_id="20">
  <ts>2020-02-26T16:05:17.607000</ts>
  <user>Thaleia</user>
  <text>Where can I vote?</text>
</message>
<message conversation_id="19">
  <ts>2020-02-26T18:21:41.677000</ts>
  <user>Macia</user>
  <text>Hi quick racket editor survey: https://www.surveymonkey.co.uk/r/H23ZTDW</text>
</message>
<message conversation_id="20">
  <ts>2020-02-27T12:30:28.089000</ts>
  <user>Thaleia</user>
  <text>Emacs</text>
</message>
<message conversation_id="19">
  <ts>2020-02-28T21:20:21.133000</ts>
  <user>Macia</user>
  <text>&gt; PLT @ Northwestern is seeking out programs to help us understand the performance of Racket in the wild".&gt; If you have any Racket applications that you use and care about how it performs please let us know about them in the following survey: https://forms.gle/b2eKMZdvXjpRHKL38</text>
</message>
<message conversation_id="19">
  <ts>2020-02-28T21:23:52.604000</ts>
  <user>Thaleia</user>
  <text>How game make racket 🤔</text>
</message>
<message conversation_id="19">
  <ts>2020-02-28T21:26:31.669000</ts>
  <user>Macia</user>
  <text>You could start with Realm of Racket</text>
</message>
<message conversation_id="19">
  <ts>2020-02-28T21:29:00.086000</ts>
  <user>Macia</user>
  <text>Or https://docs.racketlang.org/teachpack/2htdpuniverse.html</text>
</message>
<message conversation_id="19">
  <ts>2020-02-28T21:35:56.434000</ts>
  <user>Macia</user>
  <text>https://github.com/racket/racket/wiki/GameDevelopment</text>
</message>
<message conversation_id="19">
  <ts>2020-02-28T21:40:12.942000</ts>
  <user>Macia</user>
  <text>https://itch.io/jam/racket2019gamejam</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:24:32.949000</ts>
  <user>Thaleia</user>
  <text>Is there a naming convention guide in Racket docs?</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:24:56.657000</ts>
  <user>Thaleia</user>
  <text>eg `foo%` is a class `#%bar` is a lowlevel procedure etc</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:25:22.627000</ts>
  <user>Reeyansh</user>
  <text>There might be some suggestions in the style guide</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:27:07.418000</ts>
  <user>Reeyansh</user>
  <text>See also https://github.com/racket/rhombusbrainstorming/issues/49</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:37:25.416000</ts>
  <user>Thaleia</user>
  <text>That's a good one. I'll put it all in a single page for future reference.</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:45:42.744000</ts>
  <user>Thaleia</user>
  <text>It's missing `the` and `current`</text>
</message>
<message conversation_id="21">
  <ts>2020-02-28T22:47:14.824000</ts>
  <user>Thaleia</user>
  <text>nvm `current` is there.</text>
</message>
<message conversation_id="21">
  <ts>2020-02-29T03:46:06.256000</ts>
  <user>Thaleia</user>
  <text>@StephenD thanks</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:13:00.385000</ts>
  <user>Mysha</user>
  <text>hey!</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:15:45.433000</ts>
  <user>Mysha</user>
  <text>i need a help for a problem  im confused if i've done it right</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:16:17.129000</ts>
  <user>Mysha</user>
  <text>None</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:16:42.193000</ts>
  <user>Mysha</user>
  <text>@oaktownsam</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:17:21.924000</ts>
  <user>Karanveer</user>
  <text>`i` should be the position not the character</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:17:54.912000</ts>
  <user>Mysha</user>
  <text>😦</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:18:20.912000</ts>
  <user>Mysha</user>
  <text>but i got the result right</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:19:11.610000</ts>
  <user>Karanveer</user>
  <text>The idea is that you could change `i` to a different number and it would change where the character would be inserted</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:19:28.036000</ts>
  <user>Mysha</user>
  <text>and they've not shown about positioning of strings at i</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:19:51.565000</ts>
  <user>Karanveer</user>
  <text>the text says at position i</text>
</message>
<message conversation_id="22">
  <ts>2020-03-01T18:21:12.476000</ts>
  <user>Karanveer</user>
  <text>define `i` as 5 and replace all of the 5\'s in the expression with `i` (and change the inserting string to `"_"`) then it would be correct</text>
</message>
<message conversation_id="23">
  <ts>2020-03-02T10:54:58.057000</ts>
  <user>Mysha</user>
  <text>replace all of the 5's in the expression?</text>
</message>
<message conversation_id="23">
  <ts>2020-03-02T11:03:15.392000</ts>
  <user>Mysha</user>
  <text>i dont understand 😦</text>
</message>
<message conversation_id="24">
  <ts>2020-03-02T17:41:57.648000</ts>
  <user>Aviahna</user>
  <text>Is anyone willing to help me out with my hw? I’m so lost 🥺</text>
</message>
<message conversation_id="25">
  <ts>2020-03-02T20:41:18.414000</ts>
  <user>Reeyansh</user>
  <text>@bub @GmaAnders I can't help now and I'm not sure if anyone else will have time to but for future reference please use the #help channel when asking for help especially for homework problems or school projects</text>
</message>
<message conversation_id="25">
  <ts>2020-03-02T20:51:51.073000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam btw thanks again for sharing your `binarylib` adventures in the Racket slack people seem to keep coming back to that thread</text>
</message>
<message conversation_id="26">
  <ts>2020-03-02T21:07:57.610000</ts>
  <user>Karanveer</user>
  <text>I saw that. I wish I had some free time to work on package server stuff. It'd be nice to have a 12 revs back of binary libs.</text>
</message>
<message conversation_id="25">
  <ts>2020-03-02T21:58:56.139000</ts>
  <user>Reeyansh</user>
  <text>Same and agreed</text>
</message>
<message conversation_id="25">
  <ts>2020-03-02T22:01:06.022000</ts>
  <user>Reeyansh</user>
  <text>Even just one version back would be a huge improvement because people's CI builds that use my docker images and the builtpackage catalog would stop breaking during the few days to weeks between when a new version is released and when I get around to updating `jackfirth/racket:latest` to point to it</text>
</message>
<message conversation_id="27">
  <ts>2020-03-03T19:03:44.019000</ts>
  <user>Karanveer</user>
  <text>https://weinholt.se/articles/driverslokoscheme/</text>
</message>
<message conversation_id="27">
  <ts>2020-03-04T05:11:16.249000</ts>
  <user>Karanveer</user>
  <text>This is fascinating CML at the driver level in an R6RS scheme</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T14:28:43.168000</ts>
  <user>Thaleia</user>
  <text>Ya guys use racket at work?</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T18:48:32.255000</ts>
  <user>Reeyansh</user>
  <text>Alas no</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T18:49:57.332000</ts>
  <user>Reeyansh</user>
  <text>but it's useful to get some cross pollination from other ecosystems so I'm not too sad about it yet</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T18:58:25.902000</ts>
  <user>Thaleia</user>
  <text>Oh</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:01:17.094000</ts>
  <user>Reeyansh</user>
  <text>Mostly I use Java at work</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:06:34.781000</ts>
  <user>Karanveer</user>
  <text>I do but it's mostly to replace my day to day python/bash usage.</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:11:31.942000</ts>
  <user>Kire</user>
  <text>Looking through public Racket repos on GitHub I've never found an organization using Racket except for Racket itself and a handful of orgs made to host Racket libs or frameworks  like Nanopass for example.</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:16:04.287000</ts>
  <user>Reeyansh</user>
  <text>It's not widely used</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:16:23.835000</ts>
  <user>Reeyansh</user>
  <text>Relative to lisp and scheme in general it is but not nearly as much as Clojure</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:16:33.046000</ts>
  <user>Kire</user>
  <text>Yea for sure</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:16:57.893000</ts>
  <user>Kire</user>
  <text>Is there any organizations using Scheme either for real world work?</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:17:34.241000</ts>
  <user>Kire</user>
  <text>I know there's a small handful using CL never seen Scheme though I think</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:23:44.178000</ts>
  <user>Reeyansh</user>
  <text>There's a small bioinformatics company using racket one of the folks there gave a talk about it at racketcon last year</text>
</message>
<message conversation_id="27">
  <ts>2020-03-05T19:24:44.478000</ts>
  <user>Kire</user>
  <text>Oh neat! Any idea if Naughty Dog still uses Racket? I know they were a few years back can't find anything recent though</text>
</message>
<message conversation_id="28">
  <ts>2020-03-05T20:19:11.955000</ts>
  <user>Thaleia</user>
  <text>I use racket text processing and some scripting stuff</text>
</message>
<message conversation_id="28">
  <ts>2020-03-05T20:32:42.924000</ts>
  <user>Macia</user>
  <text>I use it secretly at work. Don't tell.</text>
</message>
<message conversation_id="28">
  <ts>2020-03-05T20:32:48.130000</ts>
  <user>Macia</user>
  <text>London Racket Meetup Thursday 9th April 12pmMeet at 1pm at ‘The Last Word’ (cafe)[1] and after introductions we will move to The Alan Turing Institute[2].[1] The Last Word (cafe in front of British Library)96 Euston Rd London NW1 2DB Google maps: https://goo.gl/maps/SbUeExYddSnWPQbz6 [2] The Alan Turing Institute https://www.turing.ac.uk/It will be casual introductions and chat though if someone wants to do a short talk or demo that would be most welcome.Please register at https://forms.gle/XDvr5gtGKb6K2DXh8 (required for access to Turing Institute meeting room)Please let me know if you are interested even if you can’t confirm attendance. Many thanks to Dr James Geddes and The Alan Turing Institute for hosting this event.Kind regards,Stephen</text>
</message>
<message conversation_id="28">
  <ts>2020-03-05T20:33:22.044000</ts>
  <user>Macia</user>
  <text>Pinned a message.</text>
</message>
<message conversation_id="29">
  <ts>2020-03-06T07:03:16.335000</ts>
  <user>Thaleia</user>
  <text>None</text>
</message>
<message conversation_id="28">
  <ts>2020-03-06T19:08:43.282000</ts>
  <user>Macia</user>
  <text>https://stackoverflow.blog/2020/02/05/the2020developersurveyisnowopen/</text>
</message>
<message conversation_id="28">
  <ts>2020-03-06T19:08:51.549000</ts>
  <user>Macia</user>
  <text>Represent!</text>
</message>
<message conversation_id="29">
  <ts>2020-03-07T23:35:07.839000</ts>
  <user>Karanveer</user>
  <text>Weird. The link for the survey has already expired.</text>
</message>
<message conversation_id="29">
  <ts>2020-03-07T23:42:38.215000</ts>
  <user>Gonzaga</user>
  <text>It's from February</text>
</message>
<message conversation_id="29">
  <ts>2020-03-07T23:44:09.310000</ts>
  <user>Karanveer</user>
  <text>doh</text>
</message>
<message conversation_id="28">
  <ts>2020-03-08T10:40:43.368000</ts>
  <user>Macia</user>
  <text>Oops</text>
</message>
<message conversation_id="29">
  <ts>2020-03-09T19:56:36.142000</ts>
  <user>Shaiel</user>
  <text>lua is causing me a headache!</text>
</message>
<message conversation_id="30">
  <ts>2020-03-09T20:28:29.210000</ts>
  <user>Thaleia</user>
  <text>Are there forms of `cond` with different fallthroughs?</text>
</message>
<message conversation_id="30">
  <ts>2020-03-09T20:29:34.150000</ts>
  <user>Thaleia</user>
  <text>eg try all cases and cons the results of successful predicates or try all cases and cons the results of successful predicates until you hit the first case that fails</text>
</message>
<message conversation_id="28">
  <ts>2020-03-09T21:53:30.528000</ts>
  <user>Macia</user>
  <text>I might be missing the point but sounds like a `(filter pred lst)`?</text>
</message>
<message conversation_id="28">
  <ts>2020-03-09T21:57:38.296000</ts>
  <user>Macia</user>
  <text>There is also things like `andmap` but I suspect you want to write a macro `(conscond? ...`😃</text>
</message>
<message conversation_id="30">
  <ts>2020-03-09T22:09:41.424000</ts>
  <user>Thaleia</user>
  <text>I suppose it could be procedurally implemented like```Racket(define (cond preds) (filter values (map (λ (p) (and ((car p)) ((cdr p)))) preds)))(cond `((,(thunk (zero? n)) . (thunk n is zero")) (,(thunk (string=? foo fnord")) . (thunk (runprocess! \'foo))) (,(thunk #t) . (thunk \'fallthrough))))```</text>
</message>
<message conversation_id="30">
  <ts>2020-03-09T22:12:59.798000</ts>
  <user>Thaleia</user>
  <text>Feels very Common Lispy.</text>
</message>
<message conversation_id="31">
  <ts>2020-03-09T22:51:14.688000</ts>
  <user>Gonzaga</user>
  <text>that seems like a lot of unnecessary thunks</text>
</message>
<message conversation_id="30">
  <ts>2020-03-09T23:03:30.623000</ts>
  <user>Thaleia</user>
  <text>How else would you do it without a macro?</text>
</message>
<message conversation_id="31">
  <ts>2020-03-09T23:17:34.083000</ts>
  <user>Gonzaga</user>
  <text>I would use a macro.</text>
</message>
<message conversation_id="30">
  <ts>2020-03-09T23:17:47.587000</ts>
  <user>Thaleia</user>
  <text>That's my point.</text>
</message>
<message conversation_id="31">
  <ts>2020-03-09T23:19:21.019000</ts>
  <user>Gonzaga</user>
  <text>Looks like `(eval (+ 1 2))` is good.</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:13:36.618000</ts>
  <user>Karanveer</user>
  <text>@Deleted User `conde` in Kanren is kinda like that in a way.</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:14:16.794000</ts>
  <user>Thaleia</user>
  <text>Ooh</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:14:27.615000</ts>
  <user>Thaleia</user>
  <text>Apparently I was thinking of `cond{e,a,u}`.</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:15:09.314000</ts>
  <user>Karanveer</user>
  <text>Of course then you are in the Kanren cinematic universe</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:16:50.364000</ts>
  <user>Thaleia</user>
  <text>oh no</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:19:04.309000</ts>
  <user>Karanveer</user>
  <text>Get yourself a copy of The Reasoned Schemer". It\'s a nice bit of Logic programming integrated into Scheme.</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:20:12.080000</ts>
  <user>Karanveer</user>
  <text>I just found a 67 line file with about 5 macros that I never remember having written</text>
</message>
<message conversation_id="31">
  <ts>2020-03-10T01:20:33.171000</ts>
  <user>Karanveer</user>
  <text>And it is terse so I'm not even sure what I was trying to do.</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T02:08:00.447000</ts>
  <user>Thaleia</user>
  <text>Hahah</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T02:08:24.415000</ts>
  <user>Thaleia</user>
  <text>I've got copies of all The \\ Schemers but I don't have much time to read lately.</text>
</message>
<message conversation_id="33">
  <ts>2020-03-10T04:56:36.462000</ts>
  <user>Shaiel</user>
  <text>i realize i have no clue how to write a parser</text>
</message>
<message conversation_id="33">
  <ts>2020-03-10T05:01:54.356000</ts>
  <user>Shaiel</user>
  <text>im tired of making languages for a bit</text>
</message>
<message conversation_id="33">
  <ts>2020-03-10T05:02:19.827000</ts>
  <user>Shaiel</user>
  <text>time to learn scribble? anyone need some docs rewriten</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T08:06:09.761000</ts>
  <user>Thaleia</user>
  <text>Make a docs that detaily explains Android tv api</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T08:06:16.823000</ts>
  <user>Thaleia</user>
  <text>I bet you can't</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T08:22:33.601000</ts>
  <user>Shaiel</user>
  <text>is it because its hard or because i dont know enough</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T09:08:17.024000</ts>
  <user>Thaleia</user>
  <text>@4984 it's hard af</text>
</message>
<message conversation_id="34">
  <ts>2020-03-10T10:40:47.963000</ts>
  <user>Macia</user>
  <text>@4984 I don’t know how many of these are still active  the page is a little old https://github.com/racket/racket/wiki/DocumentationImprovements</text>
</message>
<message conversation_id="32">
  <ts>2020-03-10T10:42:27.783000</ts>
  <user>Macia</user>
  <text>It’s a wiki so you can remove completed tasks and add any new ones you identify.</text>
</message>
<message conversation_id="34">
  <ts>2020-03-10T10:44:33.389000</ts>
  <user>Macia</user>
  <text>Maybe https://github.com/racket/racket/issues?q=is%3Aopen+is%3Aissue+scribble</text>
</message>
<message conversation_id="35">
  <ts>2020-03-11T05:52:37.508000</ts>
  <user>Shaiel</user>
  <text>its easy to make something neat in js because nobody knows what they are doing</text>
</message>
<message conversation_id="35">
  <ts>2020-03-11T05:52:47.500000</ts>
  <user>Shaiel</user>
  <text>unlike racket where yall too smart</text>
</message>
<message conversation_id="36">
  <ts>2020-03-11T19:35:09.081000</ts>
  <user>Kire</user>
  <text>So a while back when I was working on my own programming language one thing that I really wanted was a type of comment that would span for only a single token. I've never seen another language that has a comment like that where you can just dump it inline but TIL that in Racket you can do it with `#;comment` and I think that's awesome!</text>
</message>
<message conversation_id="34">
  <ts>2020-03-11T21:29:52.099000</ts>
  <user>Macia</user>
  <text>`#;` is awesome  I use it _all the time_</text>
</message>
<message conversation_id="36">
  <ts>2020-03-11T23:01:08.903000</ts>
  <user>Kire</user>
  <text>Yea plus since it reads until the end of the next sexpr you can do `#;(this is a comment) thisisasymbol` to comment out specfic expressions and stuff which is super dope</text>
</message>
<message conversation_id="35">
  <ts>2020-03-12T04:12:26.429000</ts>
  <user>Shaiel</user>
  <text>just like some versions of tcl!</text>
</message>
<message conversation_id="35">
  <ts>2020-03-12T04:12:45.531000</ts>
  <user>Shaiel</user>
  <text>ooooh tcl + racket</text>
</message>
<message conversation_id="37">
  <ts>2020-03-13T01:20:47.251000</ts>
  <user>Karanveer</user>
  <text>I think I used to know this but now I forget: is there a way to turn off blue boxes in DrRacket?</text>
</message>
<message conversation_id="37">
  <ts>2020-03-13T01:27:43.328000</ts>
  <user>Karanveer</user>
  <text>I think this does it but there is still a big lag right after I type in an identifier</text>
</message>
<message conversation_id="38">
  <ts>2020-03-13T21:49:29.249000</ts>
  <user>Macia</user>
  <text>Hi All,\xa0While I haven't yet I'm expecting it will be appropriate to cancel the meet up on 9 April.\xa0Now the good news: I'm planning an After Work Racket London Picnic Tuesday 16 June in\xa0Kensington GardensProbably start at 5pm sunset is around 9:20pm\xa0Stephen</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T04:57:55.006000</ts>
  <user>Thaleia</user>
  <text>Is there a way to change the Datalog backend to something that isn't `hasheq` without modifying the language?</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T04:59:16.267000</ts>
  <user>Thaleia</user>
  <text>I'm thinking about the feasibility of implementing a Datomicesque toy DB in Racket.</text>
</message>
<message conversation_id="40">
  <ts>2020-03-15T07:21:34.962000</ts>
  <user>Reeyansh</user>
  <text>It's `hasheq`??? _why_</text>
</message>
<message conversation_id="40">
  <ts>2020-03-15T07:22:16.202000</ts>
  <user>Reeyansh</user>
  <text>Honestly I'd file a bug for that and just go fix it to be a regular `equal?`based hash</text>
</message>
<message conversation_id="41">
  <ts>2020-03-15T16:26:53.742000</ts>
  <user>Karanveer</user>
  <text>I think it is `equal?` based hashes already. https://github.com/racket/datalog/blob/master/runtime.rkt#L33</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T16:30:37.169000</ts>
  <user>Karanveer</user>
  <text>I think to make it work with a different kind of storage the existing runtime would need to be factored into a `theory` interface and then put together implementations for `hash` and persistent storage backends. Classic refactoring stuff.</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T16:31:36.588000</ts>
  <user>Karanveer</user>
  <text>The language side will probably need to be extended in some way to handle whatever additional configuration needed to use a different storage.</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T16:43:52.230000</ts>
  <user>Karanveer</user>
  <text>Oh! You could do a trick with external queries it looks like.</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T16:44:25.063000</ts>
  <user>Karanveer</user>
  <text>That would be easier probably.</text>
</message>
<message conversation_id="39">
  <ts>2020-03-15T18:42:51.060000</ts>
  <user>Karanveer</user>
  <text>External queries are probably not the right way. It would probably be a huge hack. Without recursion it looks tough.</text>
</message>
<message conversation_id="42">
  <ts>2020-03-16T04:27:01.467000</ts>
  <user>Gonzaga</user>
  <text>Is there a name for a group operation like `(group 3.4)`? I know it's not needed in lips but figured Racket might have something along those lines.</text>
</message>
<message conversation_id="42">
  <ts>2020-03-16T04:30:38.069000</ts>
  <user>Gonzaga</user>
  <text>There's `(identity x)`. Guess that's probably the closest I'd get.</text>
</message>
<message conversation_id="43">
  <ts>2020-03-18T20:08:00.162000</ts>
  <user>Shaiel</user>
  <text>i thought someone was in voice</text>
</message>
<message conversation_id="43">
  <ts>2020-03-18T20:08:09.755000</ts>
  <user>Shaiel</user>
  <text>but i was fooled tricked and even possibly bamboosled</text>
</message>
<message conversation_id="43">
  <ts>2020-03-18T20:11:14.392000</ts>
  <user>Karanveer</user>
  <text>We were for a minute testing some stuff.</text>
</message>
<message conversation_id="44">
  <ts>2020-03-20T02:40:12.368000</ts>
  <user>Kire</user>
  <text>Is there a way to use the Racket reader to transform a string into a list? Like just to read in the code as a string but don\'t evaluate any of it. So you can do```scheme(read (println (if cond then (list 1 2 3)))"); \'(println (if cond then (list 1 2 3)))```To get the string as a racket syntax tree?</text>
</message>
<message conversation_id="42">
  <ts>2020-03-20T03:25:55.021000</ts>
  <user>Karanveer</user>
  <text>yes</text>
</message>
<message conversation_id="42">
  <ts>2020-03-20T03:26:21.911000</ts>
  <user>Karanveer</user>
  <text>```(callwithinputstring (car (cons 1 2)) read)```</text>
</message>
<message conversation_id="44">
  <ts>2020-03-20T17:42:14.613000</ts>
  <user>Kire</user>
  <text>Thank you!</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:53:45.204000</ts>
  <user>Mathias</user>
  <text>is anyone active i need help on a for loop</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:54:12.546000</ts>
  <user>Mathias</user>
  <text>nothing to complex</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:56:10.215000</ts>
  <user>Kire</user>
  <text>What's up?</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:56:27.278000</ts>
  <user>Mathias</user>
  <text>basically i have this as a question</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:56:29.281000</ts>
  <user>Mathias</user>
  <text>write a for loop that iterates over a list reverses it and subtracts 2 from each element</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:56:44.487000</ts>
  <user>Mathias</user>
  <text>and i've never been confused</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:56:53.666000</ts>
  <user>Mathias</user>
  <text>i know it's basic but im really bad at coding atm</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T17:59:59.952000</ts>
  <user>Kire</user>
  <text>Hmm you have to reverse it with the loop? Or can you do that separately? You're not able to loop over lists backwards in Racket as they're singly linked lists</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T18:01:23.412000</ts>
  <user>Mathias</user>
  <text>i guess separately then</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T18:06:33.830000</ts>
  <user>Kire</user>
  <text>Okay what you could do to map the list is ```scheme(for/list ([n lst]) ( n 2))```Which would return a new list with each element subtracted by two. Then you could write a reverse function by recursively iterating over a list and appending the head to the tail</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T18:08:52.885000</ts>
  <user>Mathias</user>
  <text>(define lst (1 2 3 4))(for/list ([n lst]) ( n 2))'(1 0 1 2)this is what i get in return</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T19:05:28.824000</ts>
  <user>Temperance</user>
  <text>now reverse it</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T19:06:00.826000</ts>
  <user>Kire</user>
  <text>Yea they got it in #help</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T19:06:32.368000</ts>
  <user>Temperance</user>
  <text>o true my bad</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T19:06:41.939000</ts>
  <user>Kire</user>
  <text>No problem!</text>
</message>
<message conversation_id="43">
  <ts>2020-03-20T19:10:43.759000</ts>
  <user>Mathias</user>
  <text>thanks everyone 😢</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T19:10:51.805000</ts>
  <user>Mathias</user>
  <text>you came through nixin and jack</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T19:12:22.580000</ts>
  <user>Kire</user>
  <text>Anytime 👍</text>
</message>
<message conversation_id="45">
  <ts>2020-03-20T22:40:45.656000</ts>
  <user>Shaiel</user>
  <text>welcome user!!</text>
</message>
<message conversation_id="46">
  <ts>2020-03-20T23:02:24.331000</ts>
  <user>Anvi</user>
  <text>thanks!</text>
</message>
<message conversation_id="47">
  <ts>2020-03-21T03:20:53.631000</ts>
  <user>Shaiel</user>
  <text>hello all today!</text>
</message>
<message conversation_id="47">
  <ts>2020-03-21T03:21:08.075000</ts>
  <user>Shaiel</user>
  <text>i am thinking of starting a website!</text>
</message>
<message conversation_id="47">
  <ts>2020-03-21T03:23:29.527000</ts>
  <user>Shaiel</user>
  <text>i found a really good domain name</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T14:57:13.419000</ts>
  <user>Thaleia</user>
  <text>I'm planning to make a DSL for knitting.</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T14:57:22.953000</ts>
  <user>Thaleia</user>
  <text>It's a good opportunity to study Racklog.</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T14:57:53.029000</ts>
  <user>Thaleia</user>
  <text>Or maybe miniKanren.</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T15:08:38.257000</ts>
  <user>Macia</user>
  <text>&gt; i am thinking of starting a website!@4984 are you going to try Polyglot? https://sagegerard.com/racketpowered.html</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T15:54:10.733000</ts>
  <user>Thaleia</user>
  <text>Since Racket doesn't implement `condexpand` is it possible to tell whether the Scheme implementation running a script (say `#lang r6rs`) is Racket in a way that doesn't break the script for other implementations?</text>
</message>
<message conversation_id="48">
  <ts>2020-03-22T16:01:43.365000</ts>
  <user>Temperance</user>
  <text>dejavu</text>
</message>
<message conversation_id="49">
  <ts>2020-03-22T16:32:14.356000</ts>
  <user>Karanveer</user>
  <text>Isn't there a defacto standard for R6RS module loading that tries to load implementation specific modules?</text>
</message>
<message conversation_id="49">
  <ts>2020-03-22T16:36:03.861000</ts>
  <user>Karanveer</user>
  <text>https://docs.racketlang.org/r6rs/libpaths.html&gt; In addition when an R6RS library path is converted a file extension is selected at compile time based on installed files. The search order for file extensions is .mzscheme.ss .mzscheme.sls .ss .sls and .rkt". When resolving version constraints these extensions are all tried when looking for matches.</text>
</message>
<message conversation_id="49">
  <ts>2020-03-22T16:36:49.269000</ts>
  <user>Karanveer</user>
  <text>Make a library that just has `(define (implementation) racket)` (similarly for other schemes)</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:21:17.427000</ts>
  <user>Thaleia</user>
  <text>I think that defeats the point of writing a portable script.</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:21:42.517000</ts>
  <user>Thaleia</user>
  <text>I'd need to assume everyone running the script on Racket has that library.</text>
</message>
<message conversation_id="49">
  <ts>2020-03-22T18:37:32.052000</ts>
  <user>Karanveer</user>
  <text>No other R6RS have similar conventions</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:39:19.757000</ts>
  <user>Thaleia</user>
  <text>Most of them just use `condexpand`. Chez and Racket are the only exceptions I know of.</text>
</message>
<message conversation_id="49">
  <ts>2020-03-22T18:42:07.439000</ts>
  <user>Karanveer</user>
  <text>Well here's how they handle it on pffi https://github.com/ktakashi/r6rspffi/tree/master/src/pffi</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:42:31.443000</ts>
  <user>Thaleia</user>
  <text>Ugh</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:42:39.624000</ts>
  <user>Thaleia</user>
  <text>That's so ugly.</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:43:02.188000</ts>
  <user>Karanveer</user>
  <text>At least it allows you to split of the platform specific ish</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T18:43:29.090000</ts>
  <user>Thaleia</user>
  <text>That's true.</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T23:26:17.007000</ts>
  <user>Huxlee</user>
  <text>@StephenD that website is mind blowing! :D</text>
</message>
<message conversation_id="47">
  <ts>2020-03-22T23:26:28.010000</ts>
  <user>Huxlee</user>
  <text>it looks like the future of web dev</text>
</message>
<message conversation_id="47">
  <ts>2020-03-26T23:41:14.295000</ts>
  <user>Macia</user>
  <text>Nice: https://www.luisquintanilla.me/2020/03/21/serverlessracketazurefunctionscustomhandlers/</text>
</message>
<message conversation_id="47">
  <ts>2020-03-26T23:59:36.770000</ts>
  <user>Thaleia</user>
  <text>Ooh!</text>
</message>
<message conversation_id="50">
  <ts>2020-03-27T00:38:09.009000</ts>
  <user>Huxlee</user>
  <text>@StephenD how does your status say playing DrRacket"?</text>
</message>
<message conversation_id="47">
  <ts>2020-03-27T00:38:11.765000</ts>
  <user>Huxlee</user>
  <text>black magic</text>
</message>
<message conversation_id="51">
  <ts>2020-03-27T08:54:19.450000</ts>
  <user>Remiel</user>
  <text>He used the custom status it’s different to the actual playing status if you compare it with another person</text>
</message>
<message conversation_id="51">
  <ts>2020-03-27T11:09:19.245000</ts>
  <user>Macia</user>
  <text>I'd love to do a basic discord integration with DrRacket as a game https://discordapp.com/developers/docs/richpresence/howto</text>
</message>
<message conversation_id="47">
  <ts>2020-03-27T14:21:06.566000</ts>
  <user>Thaleia</user>
  <text>Emacs does it this way: https://github.com/Mstrodl/elcord</text>
</message>
<message conversation_id="47">
  <ts>2020-03-27T16:24:09.584000</ts>
  <user>Macia</user>
  <text>ooh only 500 lines of elisp. Might be able to do this as a quickscript</text>
</message>
<message conversation_id="52">
  <ts>2020-03-27T18:03:45.685000</ts>
  <user>Thaleia</user>
  <text>It uses a fifo file and comes with a C# script to simulate it on Windows.</text>
</message>
<message conversation_id="51">
  <ts>2020-03-28T00:31:05.166000</ts>
  <user>Karanveer</user>
  <text>@StephenD maybe we should have a homework flair on Reddit</text>
</message>
<message conversation_id="52">
  <ts>2020-03-28T02:39:03.696000</ts>
  <user>Thaleia</user>
  <text>Which one is more legible?```Racket(begin (foo) (bar) var)```or```Racket(begin0 var (foo) (bar))```where `var` is a static value.</text>
</message>
<message conversation_id="52">
  <ts>2020-03-28T02:41:27.423000</ts>
  <user>Thaleia</user>
  <text>I've seen the latter used like```Racket(begin0 var [...] (set! var foo))```although this sounds like a good usecase for Clojure's `doto` macro:```Racket(begin [...] (doto var (set! foo)))```</text>
</message>
<message conversation_id="52">
  <ts>2020-03-28T02:42:47.850000</ts>
  <user>Thaleia</user>
  <text>(`doto` is like `&gt;` for sideeffects — it keeps passing the original object that gets mutated through the pipeline.)</text>
</message>
<message conversation_id="52">
  <ts>2020-03-28T02:44:37.534000</ts>
  <user>Macia</user>
  <text>&gt; @StephenD maybe we should have a homework flair on Reddit@oaktownsam DONE</text>
</message>
<message conversation_id="52">
  <ts>2020-03-28T02:45:42.835000</ts>
  <user>Thaleia</user>
  <text>ie```Clojure(&gt; foo (bar) (baz))```expands to```Clojure(baz (bar foo))```whereas```Clojure(doto foo (bar) (baz))```expands to```Clojure(do ; Clojure's `begin' (bar foo) (baz foo) foo)```</text>
</message>
<message conversation_id="52">
  <ts>2020-03-28T03:01:52.169000</ts>
  <user>Macia</user>
  <text>I don’t know the clojure `doto` macro.Not a fan of `begin0`  I don’t remember ever seeing it used and  in my opinion  I believe it is confusing/counterintuitive. I should be asleep but is that a Clojure `&gt;` ? Not sure I understand.I sorta like the `doto`  but I’m not keen on the syntax. Should be ```lisp(doto! foo bar baz)```More rackety.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:12:33.156000</ts>
  <user>Macia</user>
  <text>@oaktownsam I’m keen to push the homework questions (both on reddit and here) to `racketusers` &gt; the best place to ask hw questions is on https://groups.google.com/forum/m/#!forum/racketusers On reddit I’ve noticed what I believe is poor advice  and many students are using the teaching languages not Racket or Scheme.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:13:17.088000</ts>
  <user>Macia</user>
  <text>They are better off on racketusers.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:13:18.500000</ts>
  <user>Karanveer</user>
  <text>Yes. I was brainstorming some ideas around that.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:13:34.732000</ts>
  <user>Karanveer</user>
  <text>Like how to ask homework questions advice</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:13:47.592000</ts>
  <user>Karanveer</user>
  <text>Like did you ask your prof/TA first</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:14:23.031000</ts>
  <user>Karanveer</user>
  <text>Or require more before we help. What do you have that is working so far?</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:14:37.723000</ts>
  <user>Karanveer</user>
  <text>etc.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:15:51.218000</ts>
  <user>Macia</user>
  <text>I asked samt if it was appropriate to kick or ban;&gt; I would prefer to be willing to help people but not to write their code for them similar to the response people get on the mailing list.&gt; For someone who explicitly wants someone else to do the assignment,&gt; I'm fine with saying no to that. I wouldn't want to ban people unless it's a repeat thing.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:17:27.148000</ts>
  <user>Karanveer</user>
  <text>It would be good if we got better quality questions maybe?</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:18:06.323000</ts>
  <user>Macia</user>
  <text>&gt; Or require more before we help. What do you have that is working so far?@oaktownsam my latest experiences have been the just want the answer. I was even offered payment</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:18:38.663000</ts>
  <user>Karanveer</user>
  <text>There was a recent post about how it is depressing that pretty much all of the traffic is students asking for homework help. And I can see how we want to be a helpful welcoming community.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:19:06.224000</ts>
  <user>Macia</user>
  <text>‘question’ flair for actual question</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:19:28.426000</ts>
  <user>Karanveer</user>
  <text>I saw that. I was going to ask you not to publicly shame a person but then they appeared to be doing it repeatedly</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:19:29.595000</ts>
  <user>Macia</user>
  <text>‘’homework’ flair for homework</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:20:16.094000</ts>
  <user>Macia</user>
  <text>&gt; I saw that. I was going to ask you not to publicly shame a person but then they appeared to be doing it repeatedly@oaktownsam does applying the homework flair count as shaming?</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:25:08.993000</ts>
  <user>Karanveer</user>
  <text>No. I meant when you called someone out on what they said in private. My preferred stance would be to tell them privately that it is inappropriate etc. And not to call them out on a public forum unless it is repeated behavior. Without threads in Discord I catch up on hours of convo and then try not to derail back several hours.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:26:39.032000</ts>
  <user>Macia</user>
  <text>Good point.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:27:10.541000</ts>
  <user>Karanveer</user>
  <text>Also one of my frustrations around this is that I am not a CS Teacher.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:27:30.442000</ts>
  <user>Macia</user>
  <text>Me neither</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:27:49.546000</ts>
  <user>Karanveer</user>
  <text>And it's slightly not fair to our community in a way.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:28:14.601000</ts>
  <user>Karanveer</user>
  <text>To provide free tech support. Not sure how Python chats handle it.</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:28:37.130000</ts>
  <user>Macia</user>
  <text>Python has a separate reddit I believe</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:29:38.234000</ts>
  <user>Karanveer</user>
  <text>Also somewhat hard to compare because the Python community is a lot larger</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:31:12.016000</ts>
  <user>Macia</user>
  <text>They are very clear r/python is news and questions are for learnpython</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:31:30.862000</ts>
  <user>Macia</user>
  <text>I think it’s a good idea</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:32:43.946000</ts>
  <user>Shaiel</user>
  <text>it has its benifits</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:32:54.925000</ts>
  <user>Shaiel</user>
  <text>also hello all 👋</text>
</message>
<message conversation_id="53">
  <ts>2020-03-28T03:34:06.816000</ts>
  <user>Karanveer</user>
  <text>Yeah that does sound better.</text>
</message>
<message conversation_id="54">
  <ts>2020-03-28T03:38:31.791000</ts>
  <user>Anvi</user>
  <text>👋</text>
</message>
<message conversation_id="54">
  <ts>2020-03-28T03:54:44.991000</ts>
  <user>Reeyansh</user>
  <text>@Deleted User in general don\'t use `begin0` if it doesn\'t let you get rid of a variable. So this usage would be fine:```scheme(begin0 (getfoo) (println Got the foo!"))```because the alternative is this:```scheme(begin (define foo (getfoo)) (println Got the foo!") foo)```</text>
</message>
<message conversation_id="54">
  <ts>2020-03-28T03:57:11.293000</ts>
  <user>Thaleia</user>
  <text>That's a good guideline.</text>
</message>
<message conversation_id="55">
  <ts>2020-03-28T04:03:52.706000</ts>
  <user>Huxlee</user>
  <text>Hi @4984 ! :D</text>
</message>
<message conversation_id="55">
  <ts>2020-03-28T04:04:01.708000</ts>
  <user>Shaiel</user>
  <text>hi!</text>
</message>
<message conversation_id="55">
  <ts>2020-03-28T04:04:21.957000</ts>
  <user>Shaiel</user>
  <text>im doing programming but not racket 🙈</text>
</message>
<message conversation_id="55">
  <ts>2020-03-28T16:05:55.012000</ts>
  <user>Huxlee</user>
  <text>Oh sweet what language?</text>
</message>
<message conversation_id="56">
  <ts>2020-03-29T02:38:22.591000</ts>
  <user>Mikkel</user>
  <text>Racket is pretty neat.</text>
</message>
<message conversation_id="56">
  <ts>2020-03-29T09:30:55.172000</ts>
  <user>Macia</user>
  <text>@thisisausername we all have different reasons for liking racket  why do you think it is neat?</text>
</message>
<message conversation_id="56">
  <ts>2020-03-29T13:52:13.612000</ts>
  <user>Mikkel</user>
  <text>I've been learning it for my programming paradigms class I just think it's a neat new way to program</text>
</message>
<message conversation_id="56">
  <ts>2020-03-29T13:52:25.390000</ts>
  <user>Mikkel</user>
  <text>Infinitely better than logic programming with prolog</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T15:43:49.276000</ts>
  <user>Kire</user>
  <text>Logic programming with Prolog is really hard</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T15:44:02.163000</ts>
  <user>Kire</user>
  <text>Fun and rewarding when you get on a roll or get things right</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T15:44:04.489000</ts>
  <user>Kire</user>
  <text>But hard</text>
</message>
<message conversation_id="56">
  <ts>2020-03-29T16:13:26.396000</ts>
  <user>Thaleia</user>
  <text>You can mix both with Racklog!</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T16:17:00.852000</ts>
  <user>Kire</user>
  <text>I've never tried Racklog  the only time I ever use Prolog is when I'm teaching it 😂 Never found a practical usecase where Prolog/Racklog is better than some other tool</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T16:18:34.689000</ts>
  <user>Karanveer</user>
  <text>Kanren &gt; Prolog 😛</text>
</message>
<message conversation_id="56">
  <ts>2020-03-29T16:22:20.427000</ts>
  <user>Mikkel</user>
  <text>Yeah in my class we start with concurrent programming w/ golang then logic w/ prolog now functional w/ scheme/racket/whatever it's called</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T16:25:08.550000</ts>
  <user>Kire</user>
  <text>In the one I TA for we do logic programming with Prolog functional with Common Lisp imperative with C OOP with Ruby and then aspectoriented programming with AspectJ. It\'s a lot for one class... I\'ve tried getting it slimmed down but unfortunately I have no real control over the class... It\'s kinda fun for some students but mostly useless since we can\'t spend enough time on anything for them to really learn much.</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T16:26:34.667000</ts>
  <user>Mikkel</user>
  <text>My class technically includes Java for OOP but we've already learned that in the past so it's just one assignment worth 3% of our mark and it's not even included on exams</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T16:26:52.216000</ts>
  <user>Mikkel</user>
  <text>Since we skip over that though we basically get one language/paradigm per month which isn't great but not horrible either</text>
</message>
<message conversation_id="57">
  <ts>2020-03-29T16:27:26.730000</ts>
  <user>Mikkel</user>
  <text>Although Racket is being basically selftaught since COVID19</text>
</message>
<message conversation_id="58">
  <ts>2020-03-29T20:47:04.986000</ts>
  <user>Karanveer</user>
  <text>https://twitter.com/whitequark/status/1239800500301836289?s=19</text>
</message>
<message conversation_id="59">
  <ts>2020-03-29T22:58:31.329000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam do you have any opinions on this feature? https://github.com/racket/racket/pull/3076</text>
</message>
<message conversation_id="59">
  <ts>2020-03-29T22:58:38.755000</ts>
  <user>Reeyansh</user>
  <text>asking you since you've used transducers+reducers</text>
</message>
<message conversation_id="59">
  <ts>2020-03-29T23:00:45.002000</ts>
  <user>Karanveer</user>
  <text>I'll take a look in a few.</text>
</message>
<message conversation_id="58">
  <ts>2020-03-29T23:55:56.401000</ts>
  <user>Karanveer</user>
  <text>I have a opinions about many of those things! Racket should be avoiding monomorphic functions (in general) especially when it's obvious you need one for lists and then vectors and then streams etc. Where is the line for what should obviously go into the core and what should go in an external package?</text>
</message>
<message conversation_id="58">
  <ts>2020-03-29T23:59:38.453000</ts>
  <user>Reeyansh</user>
  <text>I honestly don't think whether it's in an external package matters much here. If it's not useful enough to be in the core it's probably not useful enough for most racketeers to bother using at all. As a personal utility for an idiosyncratic style a package makes sense... but most of the time people put code like this into packages fully expecting they're useful enough for everyone and that being external and separate from the core API the utility is for is in of itself a benefit. Which it's not.</text>
</message>
<message conversation_id="58">
  <ts>2020-03-30T00:02:48.029000</ts>
  <user>Karanveer</user>
  <text>I think I specifically was looking for argmax over streams/sequences and just ended up rolling my own bespoke version.</text>
</message>
<message conversation_id="59">
  <ts>2020-03-30T00:15:06.351000</ts>
  <user>Reeyansh</user>
  <text>yeah 😦</text>
</message>
<message conversation_id="58">
  <ts>2020-03-30T00:15:29.340000</ts>
  <user>Reeyansh</user>
  <text>on the bright side Rebellion has `intomax` and `intomin` and they support `argmax`like features as well as custom comparators</text>
</message>
<message conversation_id="60">
  <ts>2020-04-02T00:24:03.493000</ts>
  <user>Thaleia</user>
  <text>Hi is it possiblo to bind two .exes in one using racket?</text>
</message>
<message conversation_id="60">
  <ts>2020-04-02T01:45:11.487000</ts>
  <user>Thaleia</user>
  <text>Bind?</text>
</message>
<message conversation_id="60">
  <ts>2020-04-02T01:46:59.699000</ts>
  <user>Thaleia</user>
  <text>yep</text>
</message>
<message conversation_id="61">
  <ts>2020-04-02T03:28:50.326000</ts>
  <user>Huxlee</user>
  <text>I think erkin is asking what you mean by bind :)</text>
</message>
<message conversation_id="60">
  <ts>2020-04-02T10:47:47.040000</ts>
  <user>Thaleia</user>
  <text>Put two execuable files together</text>
</message>
<message conversation_id="60">
  <ts>2020-04-02T10:50:52.288000</ts>
  <user>Thaleia</user>
  <text>I don't think that's something you can do at all. At least not in the way I'm guessing you mean.</text>
</message>
<message conversation_id="61">
  <ts>2020-04-02T15:19:59.492000</ts>
  <user>Xari</user>
  <text>`cat 1.exe 2.exe &gt; 1+2.exe` duh 😅</text>
</message>
<message conversation_id="61">
  <ts>2020-04-02T15:21:21.134000</ts>
  <user>Kire</user>
  <text>https://tenor.com/view/bigbrainmarkipliergif14835823</text>
</message>
<message conversation_id="60">
  <ts>2020-04-02T16:16:02.910000</ts>
  <user>Macia</user>
  <text>&gt; Put two execuable files together@Deleted User do you mean a linker?(Edit)My mistake there are tools that do that but not in Racket.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:44:11.301000</ts>
  <user>Temperance</user>
  <text>i wanted to make a DAW proof of concept and i made minor progress in that but i kind of want to put that on hold and make a music control DSL or soemthing</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:44:38.185000</ts>
  <user>Temperance</user>
  <text>I want to explore some concepts in just intonation</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:45:01.616000</ts>
  <user>Temperance</user>
  <text>in the past i used a parser and created a grammar that handled divisive rhythm and interpreting the symbols however i wanted (so i made different interpretations one being a pitch notation for equal temperemant another being a pitch notation for just intonation etc)</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:47:13.624000</ts>
  <user>Temperance</user>
  <text>and then i would make functions that worked with those parsed units allowing me to combine them and operate on them but i remember it felt clunky and wrong</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:47:53.296000</ts>
  <user>Macia</user>
  <text>Sounds good (sorry bad pun)</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:48:03.196000</ts>
  <user>Temperance</user>
  <text>i'm wondering now if i could just make the language part more powerful</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:48:07.391000</ts>
  <user>Temperance</user>
  <text>but i'm not sure how</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:48:50.116000</ts>
  <user>Temperance</user>
  <text>something's telling me to just have some sort of symbol naming strategy so i can abstract entire chunks of music and then use that symbol but i feel like that's similar to what i was already doing.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:49:29.278000</ts>
  <user>Temperance</user>
  <text>i really hate that my hard drive broke and i lost all my work</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:49:40.190000</ts>
  <user>Temperance</user>
  <text>and i'm an idiot i just never put the effort into learning how to use git properly</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:50:03.945000</ts>
  <user>Temperance</user>
  <text>i used git but in this weird way where only when i was sure i liked what i had would i upload it so the stuff i have on there is grossly outdated</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:51:03.073000</ts>
  <user>Temperance</user>
  <text>but anyways that's the past. I remember the problem being that i always felt like i had to define a new function brute force in order to handle new concepts.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:51:37.796000</ts>
  <user>Temperance</user>
  <text>for example appending one chunk to another was easy but what if i wanted to stretch times exponentially or something</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:51:50.483000</ts>
  <user>Macia</user>
  <text>Make your life easier and just start off with the GitHub desktop software and github  at least you won’t lose your work</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:52:12.823000</ts>
  <user>Temperance</user>
  <text>yes i learned my mistake haha</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:53:12.419000</ts>
  <user>Temperance</user>
  <text>can i get normal programming amidst the music notation 🤔</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:53:53.141000</ts>
  <user>Macia</user>
  <text>There are some music packages https://pkgd.racketlang.org/pkgn/search?q=Music</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:54:08.101000</ts>
  <user>Temperance</user>
  <text>unlikely they will help</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:54:14.946000</ts>
  <user>Temperance</user>
  <text>unless by some chance someone else is as esoteric as me</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:54:17.644000</ts>
  <user>Temperance</user>
  <text>but i will check it out</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:54:40.136000</ts>
  <user>Macia</user>
  <text>I’ve been playing a little with puredata</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:54:46.871000</ts>
  <user>Temperance</user>
  <text>i used puredata for a long time</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:55:01.851000</ts>
  <user>Temperance</user>
  <text>save yourself the pain buy Max it's just 10$ a month</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:55:08.696000</ts>
  <user>Temperance</user>
  <text>you can subscribe and unscubsribe at will</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:55:29.137000</ts>
  <user>Macia</user>
  <text>I have an Organelle</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:55:33.082000</ts>
  <user>Macia</user>
  <text>M</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:56:24.902000</ts>
  <user>Temperance</user>
  <text>what's that now?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:57:18.454000</ts>
  <user>Temperance</user>
  <text>damn</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:57:50.517000</ts>
  <user>Temperance</user>
  <text>come to think about it what i had in the past was essentially complete nowadays i'd remake in racket and have the parsing more integrated</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:57:53.554000</ts>
  <user>Temperance</user>
  <text>am i wrong to think that?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:58:34.412000</ts>
  <user>Temperance</user>
  <text>being able to delineate the music parsing at any given point in the code and have it work would be ideal</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:58:51.228000</ts>
  <user>Temperance</user>
  <text>hmm but also ways of deconstructing those musical objects 😩</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:58:57.820000</ts>
  <user>Temperance</user>
  <text>this is going to be a lot of work 😔</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:59:03.134000</ts>
  <user>Temperance</user>
  <text>idk if it's worth it</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:59:15.516000</ts>
  <user>Temperance</user>
  <text>maybe i'm making it out to be more work than it really is i think i'm gonna go for it</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T20:59:47.320000</ts>
  <user>Temperance</user>
  <text>so i guess my real first question though google probably will suffice: where do i turn for Racket parsing?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:05:48.074000</ts>
  <user>Temperance</user>
  <text>aha before i go any further to what extent can i have analysis built in? it would be awesome if while i'm coding i can check the values of certain things or listen to musical chunk is that an impossibility?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:08:14.687000</ts>
  <user>Macia</user>
  <text>There is the REPL</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:09:24.379000</ts>
  <user>Temperance</user>
  <text>that works. is that my only option?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:09:24.715000</ts>
  <user>Macia</user>
  <text>https://github.com/racket/racket/wiki/CreatingLanguages</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:09:32.551000</ts>
  <user>Temperance</user>
  <text>thanks</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:12:03.358000</ts>
  <user>Temperance</user>
  <text>many times i can't tell if it's my own stupidity or if the tools just don't work with me,in the past i found myself getting lost in the REPL all the time. it always felt disorganized. but i'm sure i only felt that way becuase i never learned REPL functions/commands for figuring out what variables you have stored or whatever other functions that helps you stay grounded and organized</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:12:29.552000</ts>
  <user>Temperance</user>
  <text>or is it that i should get better at quickly integrated text and REPL?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:12:54.039000</ts>
  <user>Temperance</user>
  <text>tbh one text file and one REPL with the file opened would probably suffice for a single musical work or experiment</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:12:58.181000</ts>
  <user>Temperance</user>
  <text>i'm so dumb</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:13:10.697000</ts>
  <user>Temperance</user>
  <text>in the past i caused my own pain i'm done with that now</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:13:12.796000</ts>
  <user>Temperance</user>
  <text>this should be easy</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:16:07.568000</ts>
  <user>Temperance</user>
  <text>I jsut need to parse something like [ [ a a ] a a ] as a tree with \'a\ just as a placeholder symbol but there are also questions of efficiency.So the tree ultimately represents divisions of rhythm but in the past I would parse the entire tree then run a function that traverses the tree and essentially counts the branches and applies rhythmic values to the symbols within the tree.but i\'m thinking it would be more efficient that as it parses out the tree itself it keeps track of the numbers and applies them correctly</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:16:11.293000</ts>
  <user>Temperance</user>
  <text>o wait that can't work</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:16:15.756000</ts>
  <user>Temperance</user>
  <text>anyway let me not spam in here</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:22:15.713000</ts>
  <user>Macia</user>
  <text>&gt; I jsut need to parse something like [ [ a a ] a a ] as a tree,Using racket lists will do that</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:24:17.977000</ts>
  <user>Macia</user>
  <text>No need for a parser just plain racket</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:26:33.645000</ts>
  <user>Macia</user>
  <text>I think the pattern matching functionality will do what you need : https://docs.racketlang.org/reference/match.html</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:27:26.860000</ts>
  <user>Macia</user>
  <text>This is just plain racket  no need for a parser  it is part of rackets own parser</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:27:50.559000</ts>
  <user>Temperance</user>
  <text>hmmm</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:27:58.648000</ts>
  <user>Temperance</user>
  <text>not sure how to accomplish what i want</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:28:09.854000</ts>
  <user>Macia</user>
  <text>Start simple</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:28:22.819000</ts>
  <user>Temperance</user>
  <text>can i count the number of open parenthesis and count the number of symbols within a parenthesized group?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:28:22.865000</ts>
  <user>Macia</user>
  <text>Building blocks first</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:28:38.920000</ts>
  <user>Macia</user>
  <text>Yes</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:30:16.427000</ts>
  <user>Macia</user>
  <text>The data structure is called ‘list’ but it is a poor name because it is a syntax for building trees</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:30:51.344000</ts>
  <user>Temperance</user>
  <text>true</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:30:57.898000</ts>
  <user>Temperance</user>
  <text>so i just run recursive length functions</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:31:04.226000</ts>
  <user>Temperance</user>
  <text>kek this will be easy</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:31:35.698000</ts>
  <user>Temperance</user>
  <text>can i have my symbols unquoted inside?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:32:01.762000</ts>
  <user>Temperance</user>
  <text>agh what does quote mean again</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:32:05.526000</ts>
  <user>Temperance</user>
  <text>quote is the symbol itself</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:32:16.885000</ts>
  <user>Temperance</user>
  <text>not quoted is it evaluated</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:32:19.370000</ts>
  <user>Temperance</user>
  <text>?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:33:16.661000</ts>
  <user>Macia</user>
  <text>&gt; can i have my symbols unquoted inside?@giftfromgod yes it’s called quasiquote`\\`</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:33:25.929000</ts>
  <user>Temperance</user>
  <text>quasiquote o yes</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:33:38.073000</ts>
  <user>Temperance</user>
  <text>i remember reading but didnt get the usage so it didnt stick</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:33:41.090000</ts>
  <user>Temperance</user>
  <text>now i understand</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:33:53.307000</ts>
  <user>Macia</user>
  <text>Backtick is the shorthand</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:34:23.387000</ts>
  <user>Temperance</user>
  <text>bruh</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:34:27.035000</ts>
  <user>Macia</user>
  <text>Then commas to unquote</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:34:30.668000</ts>
  <user>Temperance</user>
  <text>racket is awesome</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:34:36.154000</ts>
  <user>Temperance</user>
  <text>or lisp</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:34:42.296000</ts>
  <user>Temperance</user>
  <text>or whatever whoever thought of that</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:34:44.506000</ts>
  <user>Temperance</user>
  <text>theyre a genius</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:35:00.197000</ts>
  <user>Macia</user>
  <text>Lisp can do that too as can Scheme</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:35:26.307000</ts>
  <user>Macia</user>
  <text>I don’t know who invented quasiquote</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:37:06.407000</ts>
  <user>Macia</user>
  <text>Sounds like you have a good understanding of what you want to achieve and Racket has some helpful features. Do you have a plan?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:37:48.558000</ts>
  <user>Temperance</user>
  <text>i think so.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:37:52.159000</ts>
  <user>Temperance</user>
  <text>not the details just yet</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:38:35.694000</ts>
  <user>Temperance</user>
  <text>like when i get what i want out of the list it should be remembered</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:39:30.908000</ts>
  <user>Macia</user>
  <text>Maybe start with some small things and build up?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:39:49.137000</ts>
  <user>Temperance</user>
  <text>yes</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:40:11.410000</ts>
  <user>Macia</user>
  <text>What are the first three things you want to do?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:40:46.883000</ts>
  <user>Temperance</user>
  <text>but i’m thinking about when all is said and done the rhythm and notes are decoded from the list representation do i make a datatype to store them</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:41:32.363000</ts>
  <user>Temperance</user>
  <text>i like to see big picture before i start that way i realize stupid things earlier on so i dont waste time</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:41:51.093000</ts>
  <user>Macia</user>
  <text>How will you specify rhythm ?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:41:57.817000</ts>
  <user>Temperance</user>
  <text>the tree</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:42:09.156000</ts>
  <user>Temperance</user>
  <text>the tree is the rhythm lol</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:42:45.372000</ts>
  <user>Macia</user>
  <text>`(1/4 1/4 1/2)`?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:42:55.468000</ts>
  <user>Temperance</user>
  <text>what is that</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:43:23.232000</ts>
  <user>Temperance</user>
  <text>so for like (a a)each a is 1/2</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:43:32.509000</ts>
  <user>Temperance</user>
  <text>(a a a) each one is 1/3</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:44:14.932000</ts>
  <user>Temperance</user>
  <text>((a a) a a)the first two are each halves of a third or in other words 1/6th each,then the two remaining a’s are 1/3</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:44:18.492000</ts>
  <user>Temperance</user>
  <text>and so on and so forth</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:45:54.781000</ts>
  <user>Macia</user>
  <text>I see</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:45:57.756000</ts>
  <user>Temperance</user>
  <text>yup</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:46:12.293000</ts>
  <user>Temperance</user>
  <text>there are arbitrary choices involved im pretty aware of them</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:46:56.471000</ts>
  <user>Temperance</user>
  <text>like i can store them as consecutive intervals or i can store them as relative to the first element of the chunk,that choice determines how other functions work to concatenate and whatnot</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:47:25.691000</ts>
  <user>Temperance</user>
  <text>im worried</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:48:08.629000</ts>
  <user>Macia</user>
  <text>( 2 (c b a))(((a a a)(b b b)(c c c)))</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:48:13.974000</ts>
  <user>Temperance</user>
  <text>im worried this isnt good enough. something about the rigidity of the divisions rubs me the wrong way,even if i have functions to loosen it up (a function to introduce random deviations for example)</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:48:44.737000</ts>
  <user>Temperance</user>
  <text>@StephenD whats that?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:48:44.935000</ts>
  <user>Macia</user>
  <text>Repeat ( c b a ) twice</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:49:21.209000</ts>
  <user>Macia</user>
  <text>I’m not a musician but your description is hood</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:49:28.360000</ts>
  <user>Macia</user>
  <text>Good</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:49:34.682000</ts>
  <user>Temperance</user>
  <text>its good</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:49:36.381000</ts>
  <user>Temperance</user>
  <text>but like</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:49:42.705000</ts>
  <user>Temperance</user>
  <text>i also worry about parameters</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:49:54.522000</ts>
  <user>Temperance</user>
  <text>at somepoint you just want knobs and sliders</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:15.848000</ts>
  <user>Temperance</user>
  <text>or other means of gui control</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:21.104000</ts>
  <user>Temperance</user>
  <text>but i dont want to overwhelm myself</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:31.878000</ts>
  <user>Temperance</user>
  <text>but idk what if theres a smarter way of accomplishing what i want to accomplish</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:35.230000</ts>
  <user>Macia</user>
  <text>There is a gui toolkit</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:40.677000</ts>
  <user>Temperance</user>
  <text>yes</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:49.314000</ts>
  <user>Temperance</user>
  <text>i got fairly good at it already 😂</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:50:55.220000</ts>
  <user>Temperance</user>
  <text>its pretty awesome and straightforward</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:09.846000</ts>
  <user>Temperance</user>
  <text>the docs are fantastic with how they show you the layout of the</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:13.282000</ts>
  <user>Temperance</user>
  <text>idk what word to use</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:14.926000</ts>
  <user>Macia</user>
  <text>How do you generate the sound? Supercollider ?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:25.555000</ts>
  <user>Temperance</user>
  <text>doesnt matter</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:32.255000</ts>
  <user>Temperance</user>
  <text>even outputting midi could work 🤷\u200d♀️</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:37.888000</ts>
  <user>Temperance</user>
  <text>rsound seemed cool 🤷\u200d♀️</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:48.505000</ts>
  <user>Temperance</user>
  <text>actually outputting midi couldnt really work 😔</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:51:58.975000</ts>
  <user>Macia</user>
  <text>&gt; even outputting midi could work 🤷\u200d♀️@giftfromgod OSC better</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:52:13.159000</ts>
  <user>Temperance</user>
  <text>OSC is a lot better but barely anything accepts it</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:52:21.651000</ts>
  <user>Temperance</user>
  <text>at that point i should just generate the sound myself</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:52:33.238000</ts>
  <user>Temperance</user>
  <text>rsound supercollider csound anything like that</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:52:58.668000</ts>
  <user>Macia</user>
  <text>I think there already bindings</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:00.356000</ts>
  <user>Temperance</user>
  <text>and since i want to work with just intonation thats looking like what i’ll have to do but no worries</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:11.206000</ts>
  <user>Temperance</user>
  <text>ye that doesnt scare me</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:22.739000</ts>
  <user>Temperance</user>
  <text>i do basic modal synthesis instruments everytime 😂</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:33.350000</ts>
  <user>Temperance</user>
  <text>i need to learn how to make sophisticated resonators 🤔</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:49.867000</ts>
  <user>Macia</user>
  <text>(I’m out if my depth here(</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:50.903000</ts>
  <user>Temperance</user>
  <text>idk if i should just fuck with delays until i intuitively figure it out</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:53:55.506000</ts>
  <user>Temperance</user>
  <text>ye lol ur good</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:54:06.669000</ts>
  <user>Temperance</user>
  <text>so whats my plan</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:54:10.450000</ts>
  <user>Temperance</user>
  <text>i gotta go soon</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:54:23.814000</ts>
  <user>Macia</user>
  <text>Good luck</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:54:47.687000</ts>
  <user>Macia</user>
  <text>&amp; welcome to racket discord come back any time</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:54:56.772000</ts>
  <user>Macia</user>
  <text>😁</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:55:48.639000</ts>
  <user>Temperance</user>
  <text>plan:1. make functions to figure out the rhythm from the list2. figure out a pitch representation for the kind of just intonation work i want to do3. make a shitton of helper functions for working with the pitch and rhythm4. think about the big picture again</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:56:35.627000</ts>
  <user>Temperance</user>
  <text>something tells me i should start with 4 and just keep thinking. rigidity hurts. but like there is no continuum with programming right?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:57:01.381000</ts>
  <user>Temperance</user>
  <text>approximating a continuum 🤷\u200d♀️</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:57:14.611000</ts>
  <user>Temperance</user>
  <text>i think i really just want to make the DAW 😂😂😂</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:57:25.090000</ts>
  <user>Macia</user>
  <text>♫</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:57:31.770000</ts>
  <user>Temperance</user>
  <text>i could never make it more than a proof of concept though 😔</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:57:42.358000</ts>
  <user>Temperance</user>
  <text>not by myself. i would need a team or help otherwise</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:57:53.503000</ts>
  <user>Macia</user>
  <text>Everything started as a prototype</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:58:25.498000</ts>
  <user>Macia</user>
  <text>With a working prototype you might be able to attract a team</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:58:30.404000</ts>
  <user>Macia</user>
  <text>OSS</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:58:51.827000</ts>
  <user>Temperance</user>
  <text>that was my original plan 😂i’d love to have a visual approximation of continuum and then have a lot of freedom power and control with overlaying grids.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:59:32.026000</ts>
  <user>Macia</user>
  <text>But racketeers like to help  here(discord) Racket users mailing list/google group &amp; the racket slack</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:59:33.952000</ts>
  <user>Temperance</user>
  <text>but since i want to rxperiment with just intonation now i wanted to take an easy route out but the mathematician and programmer within me wanta me to keep generalizing and actually get the tool that i want</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T21:59:47.235000</ts>
  <user>Temperance</user>
  <text>which requires more work</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:00.517000</ts>
  <user>Temperance</user>
  <text>i guess i’ll keep wrestling with what i want to work on first 🤷\u200d♀️</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:09.111000</ts>
  <user>Temperance</user>
  <text>thansk so much and goodbye</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:23.508000</ts>
  <user>Macia</user>
  <text>Have you seen the new sonic pi yet?</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:29.734000</ts>
  <user>Temperance</user>
  <text>no whats that</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:31.353000</ts>
  <user>Macia</user>
  <text>♫bye</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:58.644000</ts>
  <user>Macia</user>
  <text>Programmatic DAW for education /live coding</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:00:59.667000</ts>
  <user>Temperance</user>
  <text>OMG</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:01:03.402000</ts>
  <user>Temperance</user>
  <text>OMGGG</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:01:23.952000</ts>
  <user>Macia</user>
  <text>Good fun! I recommend</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:01:26.083000</ts>
  <user>Temperance</user>
  <text>dude that looks amazing</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:01:31.534000</ts>
  <user>Temperance</user>
  <text>it just came out</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:01:33.126000</ts>
  <user>Temperance</user>
  <text>wow</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:02:41.084000</ts>
  <user>Macia</user>
  <text>Have a good evening</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:02:43.555000</ts>
  <user>Temperance</user>
  <text>same</text>
</message>
<message conversation_id="62">
  <ts>2020-04-02T22:02:49.880000</ts>
  <user>Macia</user>
  <text>Come back soon😁</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T03:32:53.814000</ts>
  <user>Thaleia</user>
  <text>Wow `definevalues` is surprisingly difficult to implement.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T03:33:05.872000</ts>
  <user>Thaleia</user>
  <text>It keeps accidentally capturing the forms...</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T03:33:53.078000</ts>
  <user>Thaleia</user>
  <text>At times like this I appreciate the simplicity of `definemacro`...</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T03:35:39.350000</ts>
  <user>Thaleia</user>
  <text>Honestly never actually had to use `generatetemporaries` before.</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T03:45:41.281000</ts>
  <user>Thaleia</user>
  <text>oh my god I misspelt `expr` as `exp` and it thought I was trying to get the exponential function the whole time</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T03:45:52.250000</ts>
  <user>Thaleia</user>
  <text>🤦</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T04:38:08.360000</ts>
  <user>Thaleia</user>
  <text>```Scheme (definesyntax definevalues (syntaxrules () ((_ () body) (callwithvalues (thunk body) void)) ((_ (var . vars) body) (begin (define var (callwithvalues (thunk body) list)) (definevalues vars (apply values (cdr var))) (set! var (car var)))) ((_ var body) (define var (callwithvalues (thunk body) list)))))``` in the end</text>
</message>
<message conversation_id="63">
  <ts>2020-04-03T05:00:49.016000</ts>
  <user>Karanveer</user>
  <text>ewww</text>
</message>
<message conversation_id="63">
  <ts>2020-04-03T05:01:33.668000</ts>
  <user>Karanveer</user>
  <text>iirc `definevalues` is a core/kernel form in racket</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T05:10:56.337000</ts>
  <user>Temperance</user>
  <text>what is going on there lol</text>
</message>
<message conversation_id="62">
  <ts>2020-04-03T05:27:06.182000</ts>
  <user>Thaleia</user>
  <text>Bad news: The expansion violates the definitions before expression rule some implementations obsess with.</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T16:26:54.491000</ts>
  <user>Temperance</user>
  <text>are there text editors where you can click and drag numbers or something to change them</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T16:32:30.156000</ts>
  <user>Temperance</user>
  <text>@StephenD sonic pi is not what i thought it was doesn't really interest me but i respect live coders</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T16:40:44.857000</ts>
  <user>Macia</user>
  <text>‘Light table’ I think. Based on Bret victor presentation</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T16:41:01.523000</ts>
  <user>Macia</user>
  <text>&gt; are there text editors where you can click and drag numbers or something to change them@giftfromgod 👆</text>
</message>
<message conversation_id="65">
  <ts>2020-04-03T17:58:35.191000</ts>
  <user>Reeyansh</user>
  <text>@Deleted User do those implementations have something like `splicinglet`? if not I don't see how it's possible to implement `definevalues` with only `syntaxrules`</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T18:05:10.107000</ts>
  <user>Temperance</user>
  <text>@StephenD thanks</text>
</message>
<message conversation_id="66">
  <ts>2020-04-03T20:02:38.827000</ts>
  <user>Temperance</user>
  <text>where could i look to get some ideas of the ways of handling zooming?i have a window that i'll need control over both dimensions together and individually but i always hate the implementations i tend to see of that sort of thing</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T21:51:22.885000</ts>
  <user>Macia</user>
  <text>I believe there are a bunch of HCI/CHI papers on zoomable user interfaces maybe check the acm digital library while it’s free</text>
</message>
<message conversation_id="64">
  <ts>2020-04-03T22:00:15.480000</ts>
  <user>Macia</user>
  <text>\u202a Good PL design papers for Racket language designers ? While the acm digital library is free what papers (&amp; dissertations) in Programming Language Design are worth a look for the aspiring language (or EDSL or DSL) designer ?See https://dl.acm.org</text>
</message>
<message conversation_id="67">
  <ts>2020-04-04T05:17:06.292000</ts>
  <user>Thaleia</user>
  <text>@notjack R6RS doesn't have `splicinglet` although I can always use `syntaxcase` with `generatetemporaries`. However R7RS has a (really long) implementation of it in pure `syntaxrules`.</text>
</message>
<message conversation_id="67">
  <ts>2020-04-04T05:17:41.814000</ts>
  <user>Thaleia</user>
  <text>I'm on phone rn but IIRC it's on page 70 of the standard.</text>
</message>
<message conversation_id="64">
  <ts>2020-04-04T10:49:24.124000</ts>
  <user>Trendon</user>
  <text>@StephenD I remeber seeing a PL reading group on the ProgrammingLanguages subreddit</text>
</message>
<message conversation_id="64">
  <ts>2020-04-04T10:50:15.566000</ts>
  <user>Trendon</user>
  <text>I think this is the last of those threads:https://old.reddit.com/r/ProgrammingLanguages/comments/dae9tz/pl_reading_group_week_13_bohms_theorem/</text>
</message>
<message conversation_id="64">
  <ts>2020-04-04T10:51:04.306000</ts>
  <user>Macia</user>
  <text>Thanks</text>
</message>
<message conversation_id="64">
  <ts>2020-04-04T10:55:56.444000</ts>
  <user>Trendon</user>
  <text>I didn't know that acm made their library free</text>
</message>
<message conversation_id="64">
  <ts>2020-04-04T10:55:59.825000</ts>
  <user>Trendon</user>
  <text>that's so cool</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:01:21.642000</ts>
  <user>Thaleia</user>
  <text>Hmm... I'm having trouble writing stateful macros.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:02:32.258000</ts>
  <user>Thaleia</user>
  <text>It's supposed to be a simple enum macro but it's giving me trouble.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:03:13.772000</ts>
  <user>Thaleia</user>
  <text>```Scheme(defineenum a b c)```should expand to```Scheme(begin (define a 0) (define b 1) (define c 2))```</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:05:10.383000</ts>
  <user>Thaleia</user>
  <text>I suppose I can keep a variable outside `syntaxcase` within the lambda and mutate it with each iteration?</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:11:36.959000</ts>
  <user>Thaleia</user>
  <text>I can do it if I pass an initial `0` value and iterate through that.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:12:13.641000</ts>
  <user>Thaleia</user>
  <text>Maybe I'll do exactly that and make it into an aux macro.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:24:16.554000</ts>
  <user>Thaleia</user>
  <text>```Scheme(definesyntax defineenumaux (lambda (stx) (define (incrementsyntax stxn) (datum&gt;syntax stxn (add1 (syntax&gt;datum stxn)))) (syntaxcase stx () ((_ val) #'(values)) ((_ val (id newval) rest ...) #'(defineenumaux newval id rest ...)) ((_ val id rest ...) (withsyntax ((inc (incrementsyntax #'val))) #'(begin (define id val) (defineenumaux inc rest ...)))))))(definesyntaxrule (defineenum vals ...) (defineenumaux 0 vals ...))```Ehh this works I guess.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:34:54.681000</ts>
  <user>Thaleia</user>
  <text>Oh my god I wish R6RS had Racket's convenience procedures like `syntaxe` and `formatid`.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:35:18.798000</ts>
  <user>Thaleia</user>
  <text>```Scheme(definesyntax definecenumaux (lambda (stx) (syntaxcase stx () ((_ enum val) #\'(values)) ((_ enum val (id newval) rest ...) #\'(definecenumaux enum newval id rest ...)) ((_ enum val id rest ...) (withsyntax ((inc (datum&gt;syntax #\'val (add1 (syntax&gt;datum #\'val)))) (name (datum&gt;syntax #\'id (string&gt;symbol (stringappend (symbol&gt;string (syntax&gt;datum #\'enum)) :" (symbol&gt;string (syntax&gt;datum #\'id))))))) #\'(begin (define name val) (definecenumaux enum inc rest ...)))))))(definesyntaxrule (definecenum enum vals ...) (definecenumaux enum 0 vals ...))```</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T14:35:26.560000</ts>
  <user>Thaleia</user>
  <text>That `withsyntax` is ugly as hell.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T16:17:12.962000</ts>
  <user>Thaleia</user>
  <text>Ah it's a bad idea to preemptively evaluate the enum value (`inc` here). There's always a chance that the given value isn't actually `number?`.</text>
</message>
<message conversation_id="68">
  <ts>2020-04-04T18:44:53.637000</ts>
  <user>Karanveer</user>
  <text>That's too bad `syntaxe` is a primitive in `syntaxcase` iirc</text>
</message>
<message conversation_id="69">
  <ts>2020-04-04T23:30:16.610000</ts>
  <user>Nouredine</user>
  <text>can scribble handle nonracket languages (e.g shell json python)? I'd like to write my literate dotfiles in racket instead of orgmode</text>
</message>
<message conversation_id="68">
  <ts>2020-04-05T01:17:40.357000</ts>
  <user>Reeyansh</user>
  <text>In theory yes. But it's not easy. I suggest asking the racketusers mailing list you'll get much more thorough advice.</text>
</message>
<message conversation_id="70">
  <ts>2020-04-06T21:32:43.547000</ts>
  <user>Reeyansh</user>
  <text>@oaktownsam what do you think of a `takingmax` transducer that lets you take the top Nranked values of a stream? where ties are counted as a single rank. So `(transduce (list 7 8 8 6 7 4 5) (takingmax #:ranks 2) #:into intolist)` would return `(list 7 8 8 7)` (since 7 and 8 are the top two values and it tries to preserve encounter order)</text>
</message>
<message conversation_id="70">
  <ts>2020-04-06T21:33:05.155000</ts>
  <user>Reeyansh</user>
  <text>I've been trying to think of how I would do a similar operation with racket's `for` loops and it seems really tricky</text>
</message>
<message conversation_id="70">
  <ts>2020-04-06T21:35:14.607000</ts>
  <user>Karanveer</user>
  <text>That seems good.</text>
</message>
<message conversation_id="70">
  <ts>2020-04-06T21:35:41.686000</ts>
  <user>Reeyansh</user>
  <text>context: https://www.reddit.com/r/Racket/comments/fw6zux/max_sums_of_cdr_values_in_pairs/</text>
</message>
<message conversation_id="70">
  <ts>2020-04-13T22:23:10.670000</ts>
  <user>Macia</user>
  <text>samth/objectbacktrace: find out what keeps an object alivehttps://github.com/samth/objectbacktrace</text>
</message>
<message conversation_id="70">
  <ts>2020-04-14T18:56:49.839000</ts>
  <user>Karanveer</user>
  <text>`vmeval` looks exciting</text>
</message>
<message conversation_id="71">
  <ts>2020-04-14T18:57:23.871000</ts>
  <user>Dominik</user>
  <text>what is it?</text>
</message>
<message conversation_id="70">
  <ts>2020-04-14T19:15:01.395000</ts>
  <user>Karanveer</user>
  <text>In the objectbacktrace it uses an undocumented `ffi/unsafe/vm` module which I'm guessing reaches into the guts of Chez Scheme. So I'm guessing `vmeval` let's you run code directly in Chez from Racket.So exciting unsafe and dangerous.</text>
</message>
<message conversation_id="71">
  <ts>2020-04-14T19:16:07.543000</ts>
  <user>Dominik</user>
  <text>oh my</text>
</message>
<message conversation_id="72">
  <ts>2020-04-14T19:30:23.224000</ts>
  <user>Thaleia</user>
  <text>tugs at shirt's collar and fans face</text>
</message>
<message conversation_id="71">
  <ts>2020-04-14T19:50:43.991000</ts>
  <user>Dominik</user>
  <text>it stops being fun when they change the internals :GWsetmyxPeepoSad:</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:25:58.699000</ts>
  <user>Dominik</user>
  <text>what do y'all use for editing racket code?</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:26:29.303000</ts>
  <user>Dominik</user>
  <text>I was using emacs but the racket layer in spacemacs is pretty buggy</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:31:32.891000</ts>
  <user>Macia</user>
  <text>Hi @sarna Racket mode is very popularhttps://racketmode.com</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:31:49.202000</ts>
  <user>Macia</user>
  <text>(I use DrRacket)</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:32:43.404000</ts>
  <user>Macia</user>
  <text>Most people use Racket mode or DrRacket  I did a survey and it is split pretty evenly</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:54:55.238000</ts>
  <user>Dominik</user>
  <text>@StephenD yep the racket layer uses racket mode. it doesn't map the right commands however..</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:55:17.094000</ts>
  <user>Dominik</user>
  <text>eg the documentation is mapped in a wrong way</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:55:40.958000</ts>
  <user>Macia</user>
  <text>I suggest asking on the record users mailing list – there are more Emacs users there. Or the racket slack</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:55:46.878000</ts>
  <user>Dominik</user>
  <text>and I can't use xrepl commands in the repl</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:55:57.520000</ts>
  <user>Dominik</user>
  <text>I think I'll try vscode</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:56:46.960000</ts>
  <user>Macia</user>
  <text>There is a VS code plugin but it doesn’t do all the stuff that Dr Racket and Racket mode do</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:57:13.857000</ts>
  <user>Macia</user>
  <text>I’d suggest plain Emacs it DrRacket(my preference)</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:58:23.878000</ts>
  <user>Dominik</user>
  <text>are people really using DrRacket? to me it feels like a silly program aimed at beginners</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:58:31.877000</ts>
  <user>Dominik</user>
  <text>maybe it's the icons/layout</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:59:09.049000</ts>
  <user>Macia</user>
  <text>DrRacket is really powerful.</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:59:26.741000</ts>
  <user>Macia</user>
  <text>It just looks like a educational tool</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T10:59:47.856000</ts>
  <user>Dominik</user>
  <text>does it have a vim mode? :GWcmeisterPeepoHug:</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:00:01.755000</ts>
  <user>Macia</user>
  <text>It also supports Emacs key bindings</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:00:58.914000</ts>
  <user>Macia</user>
  <text>&gt; does it have a vim mode? @sarna not that I’m aware of</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:01:22.431000</ts>
  <user>Dominik</user>
  <text>https://github.com/takikawa/drracketvimtool I've found this but it doesn't look complete</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:01:27.130000</ts>
  <user>Macia</user>
  <text>Some people use vim with racket</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:01:41.452000</ts>
  <user>Macia</user>
  <text>Sorry it’s not something I have any experience with</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:01:53.169000</ts>
  <user>Dominik</user>
  <text>no worries</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T11:02:07.056000</ts>
  <user>Dominik</user>
  <text>thanks for helping me out anyway :GWcmeisterPeepoLove:</text>
</message>
<message conversation_id="73">
  <ts>2020-04-15T17:39:20.315000</ts>
  <user>Karanveer</user>
  <text>The DrRacket vim mode is a valiant attempt but there were problems last I tried using it (some of the programmed into my brain key combos didn't work right.) I don't think Asumu or Leif are actively maintaining it</text>
</message>
<message conversation_id="73">
  <ts>2020-04-15T17:44:22.367000</ts>
  <user>Karanveer</user>
  <text>I use VSCode most of the time with the Magic Racket extension and Vim extensions. My workflow is pretty similar to a vim workflow of bouncing between editor and terminal to run `racket` or `raco test p $whatimworkingon` or `raco setup Dmv pkgs $whatimworkingon`Magic Racket can open a file in racket and `,enter` the module for you which is convenient.I also have some build and test tasks for individual projects in VSCode which does the nice jump to problem error matching bit but I don't know how to package that up to be used in an extension.</text>
</message>
<message conversation_id="73">
  <ts>2020-04-15T17:45:04.651000</ts>
  <user>Karanveer</user>
  <text>I also keep a DrRacket open on pretty much every computer here to try something out.</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T19:08:40.427000</ts>
  <user>Dominik</user>
  <text>thanks for the info :GWcmeisterPeepoLove:</text>
</message>
<message conversation_id="71">
  <ts>2020-04-15T19:08:59.685000</ts>
  <user>Dominik</user>
  <text>vscode keeps segfaulting on me for some reason</text>
</message>
<message conversation_id="73">
  <ts>2020-04-15T19:26:16.315000</ts>
  <user>Karanveer</user>
  <text>If you are stumped making passwords for your Zoom meetings:```(define (zoompassword N) (for/fold ([s (~a (add1 (random 9)))])  ([_x (sub1 N)]) (~a s (random 10))))```</text>
</message>
<message conversation_id="73">
  <ts>2020-04-15T21:47:43.913000</ts>
  <user>Huxlee</user>
  <text>DOOM Emacs + Racket is a good workflow for me even though I don't know that much about Emacs</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T06:57:33.223000</ts>
  <user>Dominik</user>
  <text>I was using doom some time before hmm.. let me check out their racket thingy</text>
</message>
<message conversation_id="74">
  <ts>2020-04-16T15:40:12.470000</ts>
  <user>Huxlee</user>
  <text>@oaktownsam what's the _x in the snippet you made for the Zoom passwords?</text>
</message>
<message conversation_id="74">
  <ts>2020-04-16T15:40:30.141000</ts>
  <user>Huxlee</user>
  <text>On the third line</text>
</message>
<message conversation_id="73">
  <ts>2020-04-16T16:15:40.073000</ts>
  <user>Karanveer</user>
  <text>It's a pythonism just a dummy variable unused otherwise</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T17:26:15.321000</ts>
  <user>Dominik</user>
  <text>I just use _ for those</text>
</message>
<message conversation_id="74">
  <ts>2020-04-16T17:44:52.248000</ts>
  <user>Huxlee</user>
  <text>Ah I see like a counter?</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T19:00:56.540000</ts>
  <user>Dominik</user>
  <text>a variable you won’t use</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T19:01:12.885000</ts>
  <user>Dominik</user>
  <text>_x isn’t used anywhere in the code it’s just being bound to</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T19:01:48.095000</ts>
  <user>Dominik</user>
  <text>but in this specific case it is also a counter yes</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T20:32:28.997000</ts>
  <user>Karanveer</user>
  <text>`_` in some contexts is bound to a syntax parameter and will throw an error</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T20:33:00.197000</ts>
  <user>Karanveer</user>
  <text>At least I think it is ... seems to be working at a plain REPL</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T20:33:51.721000</ts>
  <user>Karanveer</user>
  <text>Oh I remember if you're binding more than one you need unique names otherwise you get a duplicate binding error.</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T20:40:55.255000</ts>
  <user>Dominik</user>
  <text>oh interesting</text>
</message>
<message conversation_id="71">
  <ts>2020-04-16T20:41:18.164000</ts>
  <user>Dominik</user>
  <text>I’ve only ever bound one</text>
</message>
<message conversation_id="75">
  <ts>2020-04-16T20:58:25.944000</ts>
  <user>Keyonni</user>
  <text>```racket(let ((x 5) (y (+ 1 x))) ...)```</text>
</message>
<message conversation_id="75">
  <ts>2020-04-16T20:58:34.425000</ts>
  <user>Keyonni</user>
  <text>Is there a way to get something like this to work?</text>
</message>
<message conversation_id="76">
  <ts>2020-04-16T21:04:29.269000</ts>
  <user>Rio</user>
  <text>I'm hoping others that are more experienced will weigh in but from some experiments I was playing with yesterday it seems like you'd have to use that variable in the scope</text>
</message>
<message conversation_id="75">
  <ts>2020-04-16T21:05:27.479000</ts>
  <user>Rio</user>
  <text>e.g.```lisp&gt; (let ((x 1)) (let ((y (+ 1 x))) y))2```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-16T21:20:35.363000</ts>
  <user>Rio</user>
  <text>I take that back  I think `let` is what you want:```lisp&gt; (let ((x 1) (y (+ 1 x))) y)x: undefined; cannot reference an identifier before its definition&gt; (let ((x 1) (y (+ 1 x))) y)2```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-16T22:08:58.558000</ts>
  <user>Kire</user>
  <text>Yes `let` allows you to access previous bindings</text>
</message>
<message conversation_id="76">
  <ts>2020-04-16T22:11:59.202000</ts>
  <user>Kire</user>
  <text>And you can use `letrec` to access bindings recursively  this is the example from the Racket documentation:```scheme(letrec ([iseven? (lambda (n) (or (zero? n) (isodd? (sub1 n))))] [isodd? (lambda (n) (and (not (zero? n)) (iseven? (sub1 n))))]) (isodd? 11))```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-16T22:12:17.023000</ts>
  <user>Kire</user>
  <text>Personally never used `letrec` but `let` is very helpful</text>
</message>
<message conversation_id="75">
  <ts>2020-04-17T01:21:50.853000</ts>
  <user>Reeyansh</user>
  <text>use `define`</text>
</message>
<message conversation_id="75">
  <ts>2020-04-17T01:37:36.820000</ts>
  <user>Rio</user>
  <text>does define have a form for binding multiple symbols in one statement?</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:49:07.876000</ts>
  <user>Thaleia</user>
  <text>`definevalues`</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:49:28.997000</ts>
  <user>Reeyansh</user>
  <text>also `matchdefine`</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:49:57.837000</ts>
  <user>Thaleia</user>
  <text>eg```Scheme(definevalues (a b c d e f) (apply values (range 6)))```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:50:51.021000</ts>
  <user>Reeyansh</user>
  <text>or```(matchdefine (list a b c d e f) (range 6))```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:51:22.003000</ts>
  <user>Thaleia</user>
  <text>Yeah!</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:51:50.132000</ts>
  <user>Thaleia</user>
  <text>`matchdefine` is much more versatile for assigning dynamically computed values.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:52:00.842000</ts>
  <user>Thaleia</user>
  <text>Underused imo</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:53:51.316000</ts>
  <user>Reeyansh</user>
  <text>And it works with transparent structs automatically```scheme(struct point (x y) #:transparent)(matchdefine (point a b) (point 5 7)); a = 5 b = 7```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:55:22.871000</ts>
  <user>Rio</user>
  <text>and is there a way to use that like `let` where each binding is done before the next e.g. something like `(matchdefine (list x y) (1 (+ 1 x)))`?</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:55:54.433000</ts>
  <user>Reeyansh</user>
  <text>No. Just put each define on it's own line. It's more readable that way anyway.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T01:56:39.084000</ts>
  <user>Reeyansh</user>
  <text>```(define x 1)(define y (+ x 1))```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:01:17.240000</ts>
  <user>Thaleia</user>
  <text>It can get pretty verbose when your entire file is 700 lines of `define`s (eg painstakingly handwriting API endpoints). You can write a macro to mimic behaviour of CL's `setq` then.```Scheme(definesyntax defines ((_ id val) (define id val)) ((_ id val id val rest ...) (begin (define id val) (defines id val rest ...)))))```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:01:33.445000</ts>
  <user>Thaleia</user>
  <text>Not that I had to deal with this exact same problem before no sirree</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:02:09.684000</ts>
  <user>Reeyansh</user>
  <text>I don't think it helps. Each definition still ends up taking a line.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:02:45.203000</ts>
  <user>Thaleia</user>
  <text>I find it easier to read without an endless column of bright green `define` distracting me. :P</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:04:26.998000</ts>
  <user>Reeyansh</user>
  <text>I find it easier to read _with_ the `define` column. The alternative has more haphazard indentation. My personal coding style is a lot less indentationhappy than most lispy code.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:04:54.182000</ts>
  <user>Thaleia</user>
  <text>Huh. Interesting.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:05:09.450000</ts>
  <user>Thaleia</user>
  <text>I'm spoilt by paredit I suppose.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:06:11.676000</ts>
  <user>Reeyansh</user>
  <text>Examples: https://github.com/jackfirth/rebellion/blob/master/private/atomicfixnum.rkt</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:06:30.912000</ts>
  <user>Reeyansh</user>
  <text>Part of it is that I also avoid long functions</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:07:07.809000</ts>
  <user>Thaleia</user>
  <text>That's fairly readable indeed.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:07:31.472000</ts>
  <user>Thaleia</user>
  <text>Your style is a fine example of Racket style IMO.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:08:17.157000</ts>
  <user>Reeyansh</user>
  <text>It's heavily influenced by Googlestyle Java interestingly</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:09:27.563000</ts>
  <user>Thaleia</user>
  <text>My style is covered in old Scheme style though. `let` over `define` no square brackets `if` over `cond`</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:09:30.778000</ts>
  <user>Reeyansh</user>
  <text>Specifically the Rectangle Rule https://github.com/google/googlejavaformat/wiki/TheRectangleRule</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:10:18.720000</ts>
  <user>Reeyansh</user>
  <text>Yeah portable scheme has a totally different flavor</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:10:43.306000</ts>
  <user>Thaleia</user>
  <text>But some good Racketisms stuck with me. For instance I went back to replace onearmed `if`s with `when` in my old Scheme code after I got used to Racket.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:11:18.768000</ts>
  <user>Reeyansh</user>
  <text>Yeah differentiating between conditional expressions and conditional statements is so useful</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:11:28.478000</ts>
  <user>Thaleia</user>
  <text>Mhm</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:13:29.866000</ts>
  <user>Reeyansh</user>
  <text>Oh back to the point about multiple definitions in one statement: I completely forgot to mention `local`</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:14:41.060000</ts>
  <user>Reeyansh</user>
  <text>```scheme(local [(define x 1) (define y (+ x 1))] (+ x y))```</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:17:23.354000</ts>
  <user>Reeyansh</user>
  <text>When I really need definitions scoped to a particular expression (usually because I need `splicing` of some kind) I prefer `local` over `let` so that the syntax is consistent. It's useful to be about to cut and paste definitions between local scopes function scopes module scopes and the REPL</text>
</message>
<message conversation_id="76">
  <ts>2020-04-17T02:17:49.516000</ts>
  <user>Reeyansh</user>
  <text>plus it's easier to teach</text>
</message>
<message conversation_id="77">
  <ts>2020-04-20T18:25:44.335000</ts>
  <user>Devonna</user>
  <text>how does Racket compare to Common Lisp/Python/Lua re: speed? are various #lang languages somehow affected (e.g. slower)?</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:31:32.098000</ts>
  <user>Reeyansh</user>
  <text>It's much much faster than python. I know less about how it compares to the other two.</text>
</message>
<message conversation_id="77">
  <ts>2020-04-20T18:36:19.871000</ts>
  <user>Devonna</user>
  <text>good to know. and are the #languages slower? eg. pyret or stacker?</text>
</message>
<message conversation_id="77">
  <ts>2020-04-20T18:41:51.413000</ts>
  <user>Thaleia</user>
  <text>I think Racket is faster than vanilla Lua but not LuaJIT.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:42:16.098000</ts>
  <user>Reeyansh</user>
  <text>No each `#lang` expands to base Racket code. The runtime performance of the `#lang` is entirely determined by what it expands to. So how fast a custom language runs depends on how well you optimized the expanded code it produces.</text>
</message>
<message conversation_id="77">
  <ts>2020-04-20T18:44:51.336000</ts>
  <user>Devonna</user>
  <text>wow that's awesome! any limitations on the syntax? (e.g. can I get rid of the ( ) and use whitespace for instance or am I limited to Rackety/Lispy syntax)</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:46:03.754000</ts>
  <user>Reeyansh</user>
  <text>The only limitation is that the first part of the file must be `#lang yourlanguagename` and language names have to fit a pretty restricted grammar (no whitespace and only ascii az AZ and numbers I think)</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:46:41.303000</ts>
  <user>Reeyansh</user>
  <text>But the rest of the file can be anything you want. Your language has full control over reading each character in the file and parsing it however it wants. It just has to _output_ regular racket code.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:47:48.815000</ts>
  <user>Devonna</user>
  <text>are there any tutorials other than the docs on the official page? I admit I spent ages looking for you know that perfect programming language and the idea of writing one appeals a lot... even if it\'s just a toy DSL of the create Component A and affix it to Entity X kind 😛</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:52:49.932000</ts>
  <user>Reeyansh</user>
  <text>for DSL creation especially `#lang` creation Beautiful Racket is by far the best resource I know of</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:58:59.086000</ts>
  <user>Devonna</user>
  <text>thanks! ❤️</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T18:59:18.350000</ts>
  <user>Reeyansh</user>
  <text>welcome! link here: https://beautifulracket.com/</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T19:14:25.759000</ts>
  <user>Devonna</user>
  <text>final q for the day how does one distribute Racket programs? I know Common Lisp can compile to C but e.g. Python distribution is a huge pita...</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T19:19:33.458000</ts>
  <user>Reeyansh</user>
  <text>There's a `raco distribute` command that bundles up a racket program into something you can ship to other computers and run. It's not a single binary though it's a binary plus a folder that contains whatever foreign libraries or static files the binary needs.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T19:20:07.184000</ts>
  <user>Reeyansh</user>
  <text>There's also some Docker images if you know how to use Docker. Those are good for shipping racket code to servers and serverlike environments.</text>
</message>
<message conversation_id="76">
  <ts>2020-04-20T19:20:43.039000</ts>
  <user>Reeyansh</user>
  <text>the docker images are on Docker Hub under the name `jackfirth/racket` (I made them)</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T05:46:07.210000</ts>
  <user>Dominik</user>
  <text>@Zireael racket is slower than common lisp for nowthe racket backend will be chez scheme now which is comparable to CL in speed  so there’s potential of being as fast as CL</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T05:46:20.371000</ts>
  <user>Dominik</user>
  <text>but you know first make it correct then make it fast</text>
</message>
<message conversation_id="76">
  <ts>2020-04-21T05:53:05.675000</ts>
  <user>Dominik</user>
  <text>racket uses contracts liberally though so it probably won’t be as fast :GWseremePeepoThink:</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:00:43.273000</ts>
  <user>Thaleia</user>
  <text>I assume you're talking about SBCL in particular.</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:00:51.367000</ts>
  <user>Thaleia</user>
  <text>:meow:</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:05:31.148000</ts>
  <user>Dominik</user>
  <text>sbcl ccl</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:05:43.101000</ts>
  <user>Dominik</user>
  <text>maybe the llvm one</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:06:26.899000</ts>
  <user>Dominik</user>
  <text>in CL you can also do stuff like this http://pvk.ca/Blog/2014/03/15/sbcltheultimateassemblycodebreadboard/</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:06:35.664000</ts>
  <user>Dominik</user>
  <text>I doubt it’s possible in racket</text>
</message>
<message conversation_id="79">
  <ts>2020-04-21T06:33:35.336000</ts>
  <user>Devonna</user>
  <text>@sarna that's interesting because benchmarks I found show racket as faster: https://benchmarksgameteam.pages.debian.net/benchmarksgame/fastest/racket.html</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:50:41.861000</ts>
  <user>Dominik</user>
  <text>@Zireael it's faster only on one benchmark what do you mean?</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:51:01.434000</ts>
  <user>Dominik</user>
  <text>also benchmarks game doesn't really reflect how fast the language is in real life anymore</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:51:51.340000</ts>
  <user>Dominik</user>
  <text>it's always good to look at the source</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:52:04.147000</ts>
  <user>Dominik</user>
  <text>for example the benchmark in which racket is faster</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:52:15.708000</ts>
  <user>Dominik</user>
  <text>https://benchmarksgameteam.pages.debian.net/benchmarksgame/program/pidigitssbcl3.htmlthe sbcl program is pretty normal lisp</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:52:34.161000</ts>
  <user>Dominik</user>
  <text>https://benchmarksgameteam.pages.debian.net/benchmarksgame/program/pidigitsracket2.htmlthe racket one is super optimized with pointers and stuff</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:53:55.893000</ts>
  <user>Devonna</user>
  <text>I'm not super married to Racket 😛 it drew my eye because of #lang is something like it doable with CommonLisp?</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:54:25.889000</ts>
  <user>Dominik</user>
  <text>though seems like racket just binds to gmp with ffi.. whereas CL has bindings already</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:54:48.079000</ts>
  <user>Dominik</user>
  <text>if speed is that important to you I'd recommend rust</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:55:29.137000</ts>
  <user>Dominik</user>
  <text>and everything is doable in every language (turing completeness) the question is  would it be easy or not</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:55:42.585000</ts>
  <user>Dominik</user>
  <text>racket is the programming language programming language</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:56:46.732000</ts>
  <user>Dominik</user>
  <text>you can achieve similar results in CL but it will be more difficult to do and you won't be able to use languages from racket other people have made</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:57:29.191000</ts>
  <user>Devonna</user>
  <text>I tried Rust and I'm currently doing Dlang but I think I would be much more productive in a scripting language and all Lisps have the superpowered REPL compared to Python/Lua</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:58:56.903000</ts>
  <user>Dominik</user>
  <text>the most overpowered repl is the CL one</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T06:59:07.880000</ts>
  <user>Dominik</user>
  <text>you get conditions and restarts</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T07:00:07.130000</ts>
  <user>Dominik</user>
  <text>in racket the repl is unimpressive as far as lisps go</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T07:03:02.036000</ts>
  <user>Dominik</user>
  <text>that's what CL gets you</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T07:03:03.477000</ts>
  <user>Dominik</user>
  <text>https://www.youtube.com/watch?v=6pMyhrDcMzw</text>
</message>
<message conversation_id="78">
  <ts>2020-04-21T07:03:34.244000</ts>
  <user>Dominik</user>
  <text>unlimited power eh</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T07:20:17.024000</ts>
  <user>Devonna</user>
  <text>wow cool. where do I find real benchmarks between lisp and racket then? I'm curious what the performance difference really is whether the ease of making languages is worth being slower...</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T07:22:21.672000</ts>
  <user>Dominik</user>
  <text>what do you mean real benchmarks"?</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T07:24:27.639000</ts>
  <user>Devonna</user>
  <text>where the programs are roughly equally optimized not like the ones on benchmark game</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T07:44:34.819000</ts>
  <user>Dominik</user>
  <text>you can try writing the same program in both</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T07:44:37.529000</ts>
  <user>Dominik</user>
  <text>and benchmark that</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T07:56:13.176000</ts>
  <user>Devonna</user>
  <text>I don't know enough of either to do that... and reading on CL is the unlimited power you showed only with whatever the Emacs support is named or can I get the same awesome in other IDE?</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T08:00:30.622000</ts>
  <user>Dominik</user>
  <text>I know about a plugin for atom it’s called SLIMA</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T08:00:35.267000</ts>
  <user>Dominik</user>
  <text>didn’t use it though</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T08:01:44.191000</ts>
  <user>Devonna</user>
  <text>(just remembered I'll probably be using bindings to a C dll/so library so does using those introduce any problems with REPL and recompiling?</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T08:12:50.021000</ts>
  <user>Dominik</user>
  <text>you won't recompile these though? I don't know what the problem would be</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T08:13:02.759000</ts>
  <user>Dominik</user>
  <text>you just bind to them and that's it</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:06:56.594000</ts>
  <user>Huxlee</user>
  <text>My goal is to understand Racket then get to know the almost unbeatable LISP repl :)</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:08:58.986000</ts>
  <user>Dominik</user>
  <text>&gt; almostwhat's first then? forth?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:09:04.907000</ts>
  <user>Dominik</user>
  <text>lol</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T12:17:55.808000</ts>
  <user>Huxlee</user>
  <text>Maybe Smalltalk</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T12:18:12.861000</ts>
  <user>Huxlee</user>
  <text>I know almost nothing about smalltalk though TBH</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:19:59.106000</ts>
  <user>Macia</user>
  <text>Self  the small talk that influenced JavaScript and java</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T12:21:56.348000</ts>
  <user>Huxlee</user>
  <text>And Python apparently :p</text>
</message>
<message conversation_id="80">
  <ts>2020-04-21T12:25:59.173000</ts>
  <user>Macia</user>
  <text>And livelykernel / morphic</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:37:10.216000</ts>
  <user>Dominik</user>
  <text>smalltalk doesn't have a repl</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:37:25.060000</ts>
  <user>Dominik</user>
  <text>but people code in the debugger which is a similar experience</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:49:00.417000</ts>
  <user>Macia</user>
  <text>&gt; smalltalk doesn't have a repl@sarna I’d argue that smalltalk doesn’t need a repl!</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:49:22.094000</ts>
  <user>Dominik</user>
  <text>well true</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:50:02.729000</ts>
  <user>Dominik</user>
  <text>it has higher level features</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:51:50.614000</ts>
  <user>Thaleia</user>
  <text>&gt; I doubt it’s possible in racket@sarna I don't see why not.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:52:16.328000</ts>
  <user>Thaleia</user>
  <text>You can embed assembly into Racket code.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:53:19.088000</ts>
  <user>Dominik</user>
  <text>yeah but there are a lot of sbclspecific features used there</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:54:02.941000</ts>
  <user>Dominik</user>
  <text>they hook everything up to sbcl's virtual machine</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:54:24.570000</ts>
  <user>Dominik</user>
  <text>maybe chez has something similar  but I'm sure it won't be documented</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:55:10.826000</ts>
  <user>Thaleia</user>
  <text>Yeah you can reach into the guts of Chez but they don't want you to do that unless you know what you're doing.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:55:41.116000</ts>
  <user>Dominik</user>
  <text>that's understandable  that's why these features are undocumented</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:58:16.464000</ts>
  <user>Dominik</user>
  <text>does racket have anything like the `disassemble` function?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:58:42.286000</ts>
  <user>Thaleia</user>
  <text>Oh wow it's not documented at all.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:58:56.962000</ts>
  <user>Dominik</user>
  <text>https://www.reddit.com/r/scheme/comments/4j2gyr/how_to_inspect_generated_machine_code_in_chez/</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:59:02.289000</ts>
  <user>Dominik</user>
  <text>9 points no answers</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:59:13.356000</ts>
  <user>Dominik</user>
  <text>yes that's what I meant by undocumented</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:59:15.600000</ts>
  <user>Thaleia</user>
  <text>`ffi/unsafe` is fairly well documented but `ffi/unsafe/vm` isn't mentioned once.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:59:27.007000</ts>
  <user>Thaleia</user>
  <text>I thought they'd at least list it there.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T12:59:34.719000</ts>
  <user>Dominik</user>
  <text>:^)</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:01:05.770000</ts>
  <user>Dominik</user>
  <text>https://github.com/samth/disassemble/blob/master/README.md there's this but I don't think it works on the chez backend</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:01:35.850000</ts>
  <user>Dominik</user>
  <text>&gt; for JITed functionsafaik chez isn't jited</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:01:52.873000</ts>
  <user>Thaleia</user>
  <text>https://github.com/samth/disassemble/blob/2bf2d8c5dc07ec535ba008c7585c6d5cb12d10e6/disassemble/vm.rkt#L12</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:02:19.224000</ts>
  <user>Dominik</user>
  <text>uwu</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:02:22.806000</ts>
  <user>Dominik</user>
  <text>that's neat</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:02:57.020000</ts>
  <user>Dominik</user>
  <text>now we only need a mutable repl and a condition system</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:05:49.973000</ts>
  <user>Thaleia</user>
  <text>The former is easy.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:05:51.051000</ts>
  <user>Dominik</user>
  <text>I mean don't get me wrong I think racket is a better language than CL</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:06:01.689000</ts>
  <user>Dominik</user>
  <text>but if you're after THE ABSOLUTE POWER common lisp is the way</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:06:21.444000</ts>
  <user>Thaleia</user>
  <text>It's frowned upon in Racket but `(compileenforcemoduleconstants #f)`</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:06:55.124000</ts>
  <user>Dominik</user>
  <text>yeah I tried that still couldn't modify the gui on the fly like in CL :(</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:08.726000</ts>
  <user>Thaleia</user>
  <text>Hmm</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:20.252000</ts>
  <user>Thaleia</user>
  <text>Do you remember what went wrong?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:23.107000</ts>
  <user>Dominik</user>
  <text>I think the closures are compiled and not replaced</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:27.669000</ts>
  <user>Thaleia</user>
  <text>Ah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:33.464000</ts>
  <user>Dominik</user>
  <text>not sure though</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:47.380000</ts>
  <user>Dominik</user>
  <text>I'm still a racket noob and idk how to debug this</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:07:56.186000</ts>
  <user>Thaleia</user>
  <text>On RacketBC right?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:08:01.432000</ts>
  <user>Dominik</user>
  <text>yeah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:08:26.065000</ts>
  <user>Dominik</user>
  <text>I mean I was only able to send messages to the gui in the repl</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:08:50.981000</ts>
  <user>Dominik</user>
  <text>but I couldn't for example replace the callback that's run after a button is pressed</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:09:18.030000</ts>
  <user>Dominik</user>
  <text>I think when I recompiled the button it referred to another brand new button :( not to the first one</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:09:41.457000</ts>
  <user>Dominik</user>
  <text>it's probably better default behavior but yeah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:12:13.687000</ts>
  <user>Thaleia</user>
  <text>Also I think you can implement conditions in Racket with few lines of code using continuations but it'd be really expensive probably.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:14:03.868000</ts>
  <user>Dominik</user>
  <text>yeah I thought about doing that when I finally grok continuations</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:14:16.839000</ts>
  <user>Dominik</user>
  <text>on chez continuations are pretty cheap</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:15:23.805000</ts>
  <user>Thaleia</user>
  <text>They're practically free on CHICKEN so I'm surprised nobody implemented them there.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:15:38.922000</ts>
  <user>Thaleia</user>
  <text>Especially considering how CLlike CHICKEN is.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:15:43.926000</ts>
  <user>Dominik</user>
  <text>MIT scheme has conditions but they're really buggy</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:16:07.309000</ts>
  <user>Dominik</user>
  <text>after aborting 25% of my CPU continues being eaten</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:16:07.418000</ts>
  <user>Thaleia</user>
  <text>And nobody uses them according to devs.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:16:17.057000</ts>
  <user>Dominik</user>
  <text>oh well</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:16:45.339000</ts>
  <user>Dominik</user>
  <text>btw in which aspect is chicken cllike?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:17:06.806000</ts>
  <user>Dominik</user>
  <text>I didn't find it more clish than other schemes I tried</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:17:26.277000</ts>
  <user>Thaleia</user>
  <text>It has very strong CL influences in the way it does things.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:17:37.699000</ts>
  <user>Thaleia</user>
  <text>For instance it's got read macros and compiler macros.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:17:56.620000</ts>
  <user>Thaleia</user>
  <text>It has a version of `defsystem`.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:18:28.219000</ts>
  <user>Thaleia</user>
  <text>It likes unhygienic macros and encourages the use of auto`gensym` (implicit renaming) in macros.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:19:14.142000</ts>
  <user>Thaleia</user>
  <text>It has quite a few builtin read macros like `#+` (expands to `condexpand`).</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:19:33.081000</ts>
  <user>Thaleia</user>
  <text>The internal code style is also reminiscent.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:19:35.549000</ts>
  <user>Dominik</user>
  <text>oh didn't know it had unhygienic macros</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:03.726000</ts>
  <user>Thaleia</user>
  <text>Check out explicit renaming macros. It's like a step up from `defmacro`.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:14.637000</ts>
  <user>Dominik</user>
  <text>👀</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:22.818000</ts>
  <user>Thaleia</user>
  <text>It doesn't attempt to be very functional. It does things imperatively and mutatively.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:22.949000</ts>
  <user>Dominik</user>
  <text>chicken is pretty slow though no?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:32.255000</ts>
  <user>Thaleia</user>
  <text>Well comparatively.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:39.097000</ts>
  <user>Dominik</user>
  <text>to other schemes at least</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:41.345000</ts>
  <user>Thaleia</user>
  <text>It's still pretty fast for most tasks.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:20:50.522000</ts>
  <user>Dominik</user>
  <text>faster than python :GWcmeisterPeepoEZ:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:21:10.550000</ts>
  <user>Thaleia</user>
  <text>Its greatest performance advantage is that continuations are practically free thanks to Cheney on the MTA.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:21:38.140000</ts>
  <user>Dominik</user>
  <text>otoh I heard that if you use continuations liberally you'll run into weird problems</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:22:28.558000</ts>
  <user>Dominik</user>
  <text>eh so many schemes so little time</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:23:04.397000</ts>
  <user>Thaleia</user>
  <text>CHICKEN was my first Scheme!</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:23:21.518000</ts>
  <user>Thaleia</user>
  <text>I eventually switched to Racket because I'm a functional programmer at heart.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:23:31.708000</ts>
  <user>Dominik</user>
  <text>even if I pick a scheme I can't stick to one because they don't have the libs for most of the useful stuff :GWsetmyxPeepoCry: so now I'm making a thing in reasonml</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:23:59.266000</ts>
  <user>Thaleia</user>
  <text>CHICKEN has some really strong points such as the capability of trivially inlining C. You can even import C headers willy nilly.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:24:27.183000</ts>
  <user>Thaleia</user>
  <text>Yeah I profess to be a Clojure programmer professionally.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:24:47.601000</ts>
  <user>Dominik</user>
  <text>how's functional programming in dynamic langs? I've mostly programmed in statically typed ones and my racket experience is writing like three programs lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:24:59.783000</ts>
  <user>Dominik</user>
  <text>ew clojure</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:25:14.580000</ts>
  <user>Dominik</user>
  <text>typo in a hashmap 300line stack trace day ruined</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:25:45.658000</ts>
  <user>Thaleia</user>
  <text>Oh and CHICKEN does firstclass keywords.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:25:59.309000</ts>
  <user>Thaleia</user>
  <text>Instead of using quoted symbols for everything.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:15.083000</ts>
  <user>Dominik</user>
  <text>doesn't racket have firstclass keywords?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:15.442000</ts>
  <user>Thaleia</user>
  <text>And it lets you use plists and symbol tables.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:19.029000</ts>
  <user>Thaleia</user>
  <text>Nope.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:26.601000</ts>
  <user>Thaleia</user>
  <text>You can't use keywords as values.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:27.469000</ts>
  <user>Dominik</user>
  <text>what are those then? #:something</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:29.082000</ts>
  <user>Dominik</user>
  <text>ah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:32.628000</ts>
  <user>Dominik</user>
  <text>right</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:26:43.765000</ts>
  <user>Thaleia</user>
  <text>They're only for kwargs in funcalls.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:27:00.109000</ts>
  <user>Dominik</user>
  <text>confused about the definition of firstclass 🤦\u200d♂️</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:27:10.010000</ts>
  <user>Thaleia</user>
  <text>No worries haha</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:27:24.039000</ts>
  <user>Thaleia</user>
  <text>WRT FP in dynlangs honestly there are only two schools of thought here.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:27:33.460000</ts>
  <user>Thaleia</user>
  <text>Lisp and Erlang</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:27:52.672000</ts>
  <user>Thaleia</user>
  <text>I do Clojure and Scheme and I'm learning Elixir.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:28:28.198000</ts>
  <user>Dominik</user>
  <text>elixir is pretty lispy isn't itthough it's good at hiding it</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:28:31.776000</ts>
  <user>Thaleia</user>
  <text>I find this approach of FP to be very flexible and expressive.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:29:02.842000</ts>
  <user>Thaleia</user>
  <text>Yeah haha. I like how it's got atoms.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:29:06.430000</ts>
  <user>Thaleia</user>
  <text>Err</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:29:26.639000</ts>
  <user>Thaleia</user>
  <text>I should clarify that in Erlang atoms are symbols (interned immutable strings).</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:29:40.794000</ts>
  <user>Thaleia</user>
  <text>What other languages call symbols or keywords.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:30:00.879000</ts>
  <user>Thaleia</user>
  <text>Confusingly enough Clojure uses atoms to mean boxes.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:30:25.990000</ts>
  <user>Thaleia</user>
  <text>Instead of the traditional Lisp meaning of nonpair.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:30:29.389000</ts>
  <user>Dominik</user>
  <text>to me dynamic typing kinda feels like something which only creates problems giving you practically nothing</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:30:37.511000</ts>
  <user>Dominik</user>
  <text>yeah atoms in clojure are mutable refs right?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:30:38.226000</ts>
  <user>Dominik</user>
  <text>iirc</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:30:43.294000</ts>
  <user>Thaleia</user>
  <text>Yeah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:31:20.263000</ts>
  <user>Dominik</user>
  <text>dynamic typing  worse editor support worse docs (usually) easily avoided runtime errorsbenefits  ?????</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:31:33.435000</ts>
  <user>Dominik</user>
  <text>that's how it looks for meand idk how to get out of that mindset lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:31:48.058000</ts>
  <user>Thaleia</user>
  <text>I think the benefits of static typing are way overblown. I don't deny that they're useful not only for modelling the language but also for static analysis.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:32:19.023000</ts>
  <user>Thaleia</user>
  <text>But that's it. You need to use other things for those things as well. It's not a golden hammer but people sure love treating it as one.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:33:13.928000</ts>
  <user>Dominik</user>
  <text>now it's very fashionable to bash dynamically typed langs that doesn't help either</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:33:52.565000</ts>
  <user>Thaleia</user>
  <text>It also gets in your way of expressiveness and you often need to work around the restrictions. I found that a good portion of programming in Haskell was just working around the language getting in your way.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:33:55.640000</ts>
  <user>Dominik</user>
  <text>maybe I should stop reading HN :GWseremePeepoThink: would be a good choice for my overall mental health</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:34:01.408000</ts>
  <user>Thaleia</user>
  <text>(I like OCaml better.)</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:34:10.055000</ts>
  <user>Dominik</user>
  <text>yep ocaml is pretty sweet</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:34:38.056000</ts>
  <user>Thaleia</user>
  <text>&gt; now it's very fashionable to bash dynamically typed langs that doesn't help eitherI think that's reminiscent of how people used to love to hate on garbage collected languages because the only ones they used were garbage.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:34:59.987000</ts>
  <user>Thaleia</user>
  <text>(couldn't help it sorry)</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:35:13.782000</ts>
  <user>Thaleia</user>
  <text>And yes Orange Website bad.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:35:38.788000</ts>
  <user>Thaleia</user>
  <text>My quality of life improved ever since I stopped reading that wobsite and started reading ngate instead.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:35:49.306000</ts>
  <user>Dominik</user>
  <text>what's ngate?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:36:05.453000</ts>
  <user>Thaleia</user>
  <text>Weekly summary of top Hacker News posts.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:36:12.284000</ts>
  <user>Thaleia</user>
  <text>http://ngate.com</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:36:35.666000</ts>
  <user>Dominik</user>
  <text>lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:36:36.765000</ts>
  <user>Dominik</user>
  <text>neat</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:36:56.755000</ts>
  <user>Dominik</user>
  <text>btw thanks for talking to me I was having a pretty shitty day and now I’m a bit better 🙇\u200d♂️</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:37:16.246000</ts>
  <user>Thaleia</user>
  <text>Aww happy to hear that.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:37:35.474000</ts>
  <user>Dominik</user>
  <text>it’s quarantine and I don’t have frickin have running water</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:37:46.099000</ts>
  <user>Thaleia</user>
  <text>Ouch</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:37:48.928000</ts>
  <user>Thaleia</user>
  <text>That sucks.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:38:09.354000</ts>
  <user>Dominik</user>
  <text>yeah idk who thought maintenance works at this point in time would be a good idea</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:38:37.016000</ts>
  <user>Dominik</user>
  <text>so the only things I ate today are toast and some takeout :GWvertiPeepoSadMan:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:38:48.856000</ts>
  <user>Thaleia</user>
  <text>😔</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:07.025000</ts>
  <user>Dominik</user>
  <text>btw is there any scheme that can compile to JS nicely?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:18.338000</ts>
  <user>Dominik</user>
  <text>except clojurescript</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:27.236000</ts>
  <user>Thaleia</user>
  <text>That's no Scheme!</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:38.810000</ts>
  <user>Thaleia</user>
  <text>There are a few but none of them are popular.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:39.145000</ts>
  <user>Dominik</user>
  <text>racket&gt;JS would be ideal tbh</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:44.274000</ts>
  <user>Dominik</user>
  <text>ah 😔</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:39:46.885000</ts>
  <user>Thaleia</user>
  <text>Schemers don't seem to like JS.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:40:02.202000</ts>
  <user>Dominik</user>
  <text>idk what people even use lisp for</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:40:14.842000</ts>
  <user>Dominik</user>
  <text>nobody does web dev nobody does GUIs nobody does mobile dev</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:40:15.486000</ts>
  <user>Thaleia</user>
  <text>Have you tried RacketScript?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:40:18.597000</ts>
  <user>Dominik</user>
  <text>what are they doing?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:40:30.603000</ts>
  <user>Dominik</user>
  <text>I think it’s still in alpha no?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:40:44.209000</ts>
  <user>Thaleia</user>
  <text>BRB</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:41:29.124000</ts>
  <user>Dominik</user>
  <text>o7</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:42:06.801000</ts>
  <user>Dominik</user>
  <text>&gt; RacketScript doesn't support Racket features which are expensive for example proper tail calls and continuations.:GWvertiPeepoSadMan:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:42:21.368000</ts>
  <user>Dominik</user>
  <text>how to do loops in scheme without tail calls lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:43:32.581000</ts>
  <user>Thaleia</user>
  <text>Back</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:43:49.198000</ts>
  <user>Thaleia</user>
  <text>I think it converts `for` to JS directly.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:44:50.274000</ts>
  <user>Adelynne</user>
  <text>Whalesong was a more comprehensive implementation of Racket&gt;JS but was much slower from what I hear</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:44:53.787000</ts>
  <user>Thaleia</user>
  <text>&gt; nobody does web dev nobody does GUIs nobody does mobile devPeople do all of those but Lisps remain unpopular meaning most libraries don't get developed to fruition.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:45:10.964000</ts>
  <user>Adelynne</user>
  <text>Doesn't Racket have firstclass keywords? `'#:keyword`</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:45:13.743000</ts>
  <user>Thaleia</user>
  <text>It doesn't help that they're seldom corporate funded.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:45:31.124000</ts>
  <user>Thaleia</user>
  <text>You can make everything firstclass with quoting. ;p</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:45:54.781000</ts>
  <user>Dominik</user>
  <text>yeah but when I talk to ocaml devs I often get “not many people do web dev in ocaml” as a justification of not having good web libraries</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:46:06.697000</ts>
  <user>Dominik</user>
  <text>there’s a lot of compiler nerds in the ocaml community</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:46:28.878000</ts>
  <user>Dominik</user>
  <text>there aren’t many compiler jobs out there though sadly</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:46:54.229000</ts>
  <user>Thaleia</user>
  <text>It's often used in stock trading companies.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:46:59.906000</ts>
  <user>Thaleia</user>
  <text>Cljs is a solid choice for JS btw</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:47:01.977000</ts>
  <user>Dominik</user>
  <text>in one :^)</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:47:28.780000</ts>
  <user>Thaleia</user>
  <text>Well I met someone who used OCaml in one such company that wasn't Jane Street.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:47:34.469000</ts>
  <user>Thaleia</user>
  <text>So that makes it two.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:47:36.410000</ts>
  <user>Dominik</user>
  <text>oh</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:47:40.687000</ts>
  <user>Dominik</user>
  <text>that’s not one!</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:47:46.578000</ts>
  <user>Thaleia</user>
  <text>Sample bias tho</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:48:29.193000</ts>
  <user>Thaleia</user>
  <text>Either way I found mobile dev in Scheme to be very easy with LambdaNative.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:48:48.210000</ts>
  <user>Thaleia</user>
  <text>But it quickly gets complicated when you want to do more than simple stuff.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:49:05.503000</ts>
  <user>Dominik</user>
  <text>there’s a guy on #ocaml who moved to ocaml from clojure bc at his clojure work he was getting gored by regressions it’s still at the back of my head somehow :GWsetmyxPeepoSad:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:49:17.060000</ts>
  <user>Dominik</user>
  <text>yeah on gambit right?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:49:20.902000</ts>
  <user>Thaleia</user>
  <text>Yeah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:49:31.816000</ts>
  <user>Dominik</user>
  <text>there’s a very nice scheme on top of gambit called gerbil</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:49:43.508000</ts>
  <user>Dominik</user>
  <text>but they don’t support lambda native yet</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:50:34.072000</ts>
  <user>Thaleia</user>
  <text>I made this in less than an hour with zero prior mobile dev experience.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:50:47.960000</ts>
  <user>Dominik</user>
  <text>it was built by a guy who liked racket’s module system but didn’t like there were no escape hatches for performance at the time</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:50:51.474000</ts>
  <user>Thaleia</user>
  <text>Most of that time went to installing Android NDK though.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:51:05.257000</ts>
  <user>Dominik</user>
  <text>YEET</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:51:08.480000</ts>
  <user>Dominik</user>
  <text>lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:52:28.370000</ts>
  <user>Thaleia</user>
  <text>I thought Lisps sucked because everything felt incomplete then I realised all software sucks because everything ever is incomplete.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:53:07.823000</ts>
  <user>Dominik</user>
  <text>true</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:53:22.893000</ts>
  <user>Dominik</user>
  <text>I thought emacs sucked but then I tried the alternatives</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:53:35.670000</ts>
  <user>Thaleia</user>
  <text>same</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:54:43.255000</ts>
  <user>Dominik</user>
  <text>which lisp would you use instead of python? I mostly make scripts at work now I need something low friction</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:54:51.087000</ts>
  <user>Dominik</user>
  <text>racket sounds good for this tbh</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:54:55.383000</ts>
  <user>Dominik</user>
  <text>good docs</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:54:55.746000</ts>
  <user>Thaleia</user>
  <text>Racket.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:54:59.823000</ts>
  <user>Thaleia</user>
  <text>:meow:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:55:11.965000</ts>
  <user>Dominik</user>
  <text>:meowmas:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:55:22.029000</ts>
  <user>Thaleia</user>
  <text>It's a great sysprog language.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:55:34.594000</ts>
  <user>Dominik</user>
  <text>omw to make a dsl for every little task</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:55:43.098000</ts>
  <user>Thaleia</user>
  <text>hell yeah</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:55:54.077000</ts>
  <user>Thaleia</user>
  <text>But isn't that with Unix does too though?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:56:07.662000</ts>
  <user>Thaleia</user>
  <text>Write DSLs for everything in C</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:56:19.319000</ts>
  <user>Dominik</user>
  <text>also most frameworks are DSLs but awkward</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:56:34.245000</ts>
  <user>Thaleia</user>
  <text>Why not make them Less Awkward while at it?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:56:43.016000</ts>
  <user>Dominik</user>
  <text>right?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:57:17.309000</ts>
  <user>Thaleia</user>
  <text>Honestly I love Racket to bits. Easily my favourite language despite the bumps and nicks here and there.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:57:46.301000</ts>
  <user>Thaleia</user>
  <text>I gained a new appreciation for it after having to write lots of Python.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:58:57.564000</ts>
  <user>Thaleia</user>
  <text>Even if you avoid LOP it's great for everyday tasks with its included batteries.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T13:59:17.281000</ts>
  <user>Dominik</user>
  <text>thoa heavy framework: uses some obscure syntax featuresmy superior: ohh there you go. sweet beautifula DSL: is simple and expressive afmy superior: you fucking donkey who will learn that syntax? we have work to do</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:00:21.853000</ts>
  <user>Thaleia</user>
  <text>The secret is showing to your workmates that you can trivially achieve something with that DSL instead of having to churn out lower level code for every little task.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:01:00.617000</ts>
  <user>Thaleia</user>
  <text>Unless you get paid by line or something. :meow:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:01:24.193000</ts>
  <user>Thaleia</user>
  <text>I do hear tales of people getting fired for reducing the size of code in projects.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:01:28.923000</ts>
  <user>Dominik</user>
  <text>:meow: thank god I don’t</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:01:41.083000</ts>
  <user>Dominik</user>
  <text>we have open space office though</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:01:53.437000</ts>
  <user>Dominik</user>
  <text>gotta have one bad thing</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:02:06.310000</ts>
  <user>Dominik</user>
  <text>we don’t have managers though? that’s pretty nice</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:02:11.475000</ts>
  <user>Thaleia</user>
  <text>Nice</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:02:16.539000</ts>
  <user>Thaleia</user>
  <text>Autonomy ftw</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:02:47.944000</ts>
  <user>Dominik</user>
  <text>only team leadersbut they’re coders too and don’t watch you from behind your back</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:03:10.238000</ts>
  <user>Thaleia</user>
  <text>relevant btw</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:04:43.796000</ts>
  <user>Thaleia</user>
  <text>I once deployed a small statically linked CHICKEN program for something but I don't remember what exactly. It wasn't in prod though just an inhouse utility that works behind the scenes.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:05:08.014000</ts>
  <user>Dominik</user>
  <text>actually a thing i’ve never seen in other companies: we work 8 hour workdays right? but our “availability” (can’t find a better word) is 6 hoursyou get two hours for meetings having lunch administrative stuffI think that’s pretty sweet</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:05:26.818000</ts>
  <user>Thaleia</user>
  <text>I now realise they never asked me anything about that so chances are that it's still running with no one having noticed it.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:05:34.187000</ts>
  <user>Dominik</user>
  <text>you can go out to have lunch for an hour and nobody bats an eye</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:05:39.497000</ts>
  <user>Thaleia</user>
  <text>Oh that's nice.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:05:52.135000</ts>
  <user>Dominik</user>
  <text>lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:06:20.152000</ts>
  <user>Dominik</user>
  <text>I wanted to push reasonml once to have a simpler stack for front end</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:06:44.912000</ts>
  <user>Dominik</user>
  <text>i’m just a junior so my team leader called for a meeting with a senior front end dev</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:06:55.361000</ts>
  <user>Dominik</user>
  <text>he said no don’t use reason it’s too complicated</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:07:13.125000</ts>
  <user>Dominik</user>
  <text>but he insisted I needed to use redux sagas immutable.js and all that zoo</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:07:13.487000</ts>
  <user>Thaleia</user>
  <text>rip [x2]</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:07:47.254000</ts>
  <user>Dominik</user>
  <text>it was a simple thing so I spent two weeks just learning these then working for a week then the client bailed lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:07:58.646000</ts>
  <user>Dominik</user>
  <text>in reason I’d be done already 😔</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:08:33.099000</ts>
  <user>Dominik</user>
  <text>fuck sagas tbh XHR is where it’s at</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:08:35.506000</ts>
  <user>Thaleia</user>
  <text>😔</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:09:04.506000</ts>
  <user>Thaleia</user>
  <text>I have absolutely zero experience with frontend dev I should warn you.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:09:06.358000</ts>
  <user>Dominik</user>
  <text>the water is back but it’s orange :GWvertiPeepoSadMan:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:09:12.978000</ts>
  <user>Dominik</user>
  <text>oh</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:09:28.675000</ts>
  <user>Thaleia</user>
  <text>My website is handwritten HTML and CSS.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:09:48.623000</ts>
  <user>Dominik</user>
  <text>well the gist is he pushed a stack you should use only if your app is so large you cant manage with the simple tools</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:10:31.364000</ts>
  <user>Dominik</user>
  <text>like I wanna chop a carrot what should I use?a flaming chainsaw</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:12:50.183000</ts>
  <user>Thaleia</user>
  <text>None</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:39:12.796000</ts>
  <user>Dominik</user>
  <text>lol</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:39:56.920000</ts>
  <user>Dominik</user>
  <text>how did you get this theme @Deleted User?</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:40:12.893000</ts>
  <user>Dominik</user>
  <text>is this a custom browser or a stylus thing or</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T14:40:32.959000</ts>
  <user>Dominik</user>
  <text>oh it’s a prepared image :meow:</text>
</message>
<message conversation_id="82">
  <ts>2020-04-21T15:06:51.031000</ts>
  <user>Thaleia</user>
  <text>It's the old style of SO.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-21T15:15:58.483000</ts>
  <user>Dominik</user>
  <text>really? I’m too young</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T10:41:32.294000</ts>
  <user>Dominik</user>
  <text>does racket work on ARM?</text>
</message>
<message conversation_id="83">
  <ts>2020-04-22T10:45:17.065000</ts>
  <user>Macia</user>
  <text>Yes</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T10:47:19.723000</ts>
  <user>Dominik</user>
  <text>oh nice there's even a package in raspbian repos</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T10:47:20.791000</ts>
  <user>Dominik</user>
  <text>sweet</text>
</message>
<message conversation_id="84">
  <ts>2020-04-22T11:36:19.120000</ts>
  <user>Thaleia</user>
  <text>It's also in Termux's unstable repo which is super nifty.</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T11:39:17.286000</ts>
  <user>Dominik</user>
  <text>too bad there’s no termux for ios :GWvertiPeepoSadMan:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T14:26:44.116000</ts>
  <user>Dominik</user>
  <text>there’s a racket library for discord api :GWcmeisterPeepoEZ:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T14:26:51.950000</ts>
  <user>Dominik</user>
  <text>it doesn’t have any tests :GWsetmyxPeepoSad:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:13:22.731000</ts>
  <user>Huxlee</user>
  <text>:/</text>
</message>
<message conversation_id="85">
  <ts>2020-04-22T15:13:55.256000</ts>
  <user>Macia</user>
  <text>someone was working on that recently  or a fork</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:16:09.110000</ts>
  <user>Macia</user>
  <text>https://github.com/FabAlchemy/racketcord/commits/master</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:16:09.533000</ts>
  <user>Dominik</user>
  <text>https://github.com/nitros12/racketcord</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:16:16.931000</ts>
  <user>Dominik</user>
  <text>oh</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:16:28.623000</ts>
  <user>Dominik</user>
  <text>well yeah there’s a PR</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:16:33.879000</ts>
  <user>Dominik</user>
  <text>for fixing failing contracts</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:16:40.310000</ts>
  <user>Dominik</user>
  <text>but that’s it :GWvertiPeepoSadMan:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:18:29.758000</ts>
  <user>Macia</user>
  <text>its on my todo list but not at the top 😦</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:19:30.541000</ts>
  <user>Dominik</user>
  <text>I could contribute to it but I’d like to focus on making a bot now :GWvertiPeepoSadMan:</text>
</message>
<message conversation_id="81">
  <ts>2020-04-22T15:22:32.463000</ts>
  <user>Macia</user>
  <text>make the bot first 🙂</text>
</message>
<message conversation_id="86">
  <ts>2020-04-22T17:47:02.047000</ts>
  <user>Karanveer</user>
  <text>Whenever I see `racketcord` I think it's a light weight implementation of ropes.</text>
</message>
<message conversation_id="86">
  <ts>2020-04-22T17:50:28.070000</ts>
  <user>Macia</user>
  <text>There is a rope package https://planet.racketlang.org/packagesource/dyoo/rope.plt/3/0/doc.txt</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:25:24.484000</ts>
  <user>Dominik</user>
  <text>how’s planet different from the regular package index?</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:25:30.085000</ts>
  <user>Dominik</user>
  <text>https://pkgd.racketlang.org/pkgn/search?q=rope</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:25:35.306000</ts>
  <user>Dominik</user>
  <text>can’t find the rope package here :(</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:25:58.450000</ts>
  <user>Karanveer</user>
  <text>planet is the old package system</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:26:41.377000</ts>
  <user>Karanveer</user>
  <text>Not all of the old planet packages got repackaged.</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:27:37.692000</ts>
  <user>Karanveer</user>
  <text>https://planet.racketlang.org/</text>
</message>
<message conversation_id="87">
  <ts>2020-04-22T18:30:53.646000</ts>
  <user>Macia</user>
  <text>and no licence on that one</text>
</message>
<message conversation_id="88">
  <ts>2020-04-22T19:39:17.925000</ts>
  <user>Dominik</user>
  <text>ah I see</text>
</message>
<message conversation_id="87">
  <ts>2020-04-23T09:46:55.405000</ts>
  <user>Treyton</user>
  <text>&gt; too bad there’s no termux for ios :GWvertiPeepoSadMan:There's an alternative for iOS but it uses APK (Alpine Package Manager) instead of APT and Idk if you can use Racket here cuz I can't test ithttps://ish.app/</text>
</message>
<message conversation_id="89">
  <ts>2020-04-23T11:51:11.752000</ts>
  <user>Thaleia</user>
  <text>Not sure if Racket builds with musl.</text>
</message>
<message conversation_id="88">
  <ts>2020-04-23T12:56:14.932000</ts>
  <user>Dominik</user>
  <text>I didn’t know about this one thanks @NTBBloodbath :GWcmeisterPeepoLove:</text>
</message>
<message conversation_id="88">
  <ts>2020-04-23T12:56:22.875000</ts>
  <user>Dominik</user>
  <text>lol</text>
</message>
<message conversation_id="89">
  <ts>2020-04-23T13:52:03.160000</ts>
  <user>Adelynne</user>
  <text>test case fails for sufficiently large values of 3</text>
</message>
<message conversation_id="89">
  <ts>2020-04-24T06:22:29.556000</ts>
  <user>Thaleia</user>
  <text>It just occurred me to implement `(ifnot pred yes no)` as `(if pred no yes)` instead of `(if (not pred) yes no)`.</text>
</message>
<message conversation_id="88">
  <ts>2020-04-24T06:30:00.954000</ts>
  <user>Dominik</user>
  <text>I find the last one the easiest to parse</text>
</message>
<message conversation_id="89">
  <ts>2020-04-24T06:46:58.096000</ts>
  <user>Thaleia</user>
  <text>It's under the macro's hood though.</text>
</message>
<message conversation_id="89">
  <ts>2020-04-24T06:47:29.642000</ts>
  <user>Thaleia</user>
  <text>I doubt `not` adds any notable performance overhead anyway.</text>
</message>
<message conversation_id="89">
  <ts>2020-04-24T06:53:57.245000</ts>
  <user>Dominik</user>
  <text>the last one is literally ifnot maybe that's why I find it the easiest :GWseremePeepoThink:</text>
</message>
<message conversation_id="90">
  <ts>2020-04-24T14:11:06.014000</ts>
  <user>Zarin</user>
  <text>My boss asked for a list of software we need while working from home. I low key slipped Dr. Racket into the list. XD</text>
</message>
<message conversation_id="89">
  <ts>2020-04-24T19:19:47.902000</ts>
  <user>Dominik</user>
  <text>boss: what are these?you: python scriptsscript.py:```#!/usr/bin/env py1hon#lang python...```</text>
</message>
<message conversation_id="89">
  <ts>2020-04-25T10:26:07.473000</ts>
  <user>Macia</user>
  <text>I think there is a `#lang python`</text>
</message>
<message conversation_id="89">
  <ts>2020-04-25T11:21:18.413000</ts>
  <user>Dominik</user>
  <text>I thought so too but couldn't find anything like it</text>
</message>
<message conversation_id="89">
  <ts>2020-04-25T12:12:38.822000</ts>
  <user>Macia</user>
  <text>It might have evolved into `#lang pyret`</text>
</message>
<message conversation_id="91">
  <ts>2020-04-25T13:27:29.252000</ts>
  <user>Bellamee</user>
  <text>Are you thinking of `#lang dssl2` the pythonlike language for teaching data structures?</text>
</message>
<message conversation_id="89">
  <ts>2020-04-25T13:43:12.851000</ts>
  <user>Macia</user>
  <text>Maybe that was it. I’m sure it was about 10 years ago. Pretty sure SK was involved</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:26:00.167000</ts>
  <user>Macia</user>
  <text>DrRacket</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:28:14.908000</ts>
  <user>Dominik</user>
  <text>oh my where did you get that 👀</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:29:22.140000</ts>
  <user>Macia</user>
  <text>DrRacket plugins!</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:31:16.209000</ts>
  <user>Macia</user>
  <text>filesviewer and DrRacket theme (so I could set the background image)</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:32:02.117000</ts>
  <user>Macia</user>
  <text>https://pkgs.racketlang.org/package/DrRacketTheme</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:33:23.719000</ts>
  <user>Macia</user>
  <text>https://pkgs.racketlang.org/package/filesviewer</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T12:33:57.885000</ts>
  <user>Macia</user>
  <text>https://pkgs.racketlang.org/package/DrRacketThemehttps://pkgs.racketlang.org/package/filesviewer</text>
</message>
<message conversation_id="93">
  <ts>2020-04-28T12:49:29.341000</ts>
  <user>Dominik</user>
  <text>many thanks I'll get them :GWcmeisterPeepoLove:</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T13:14:37.671000</ts>
  <user>Macia</user>
  <text>background image from https://users.cs.northwestern.edu/~robby/logos/</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T13:14:49.178000</ts>
  <user>Macia</user>
  <text>I'm also trialing I’m trying out https://github.com/yjqww6/drcomplete</text>
</message>
<message conversation_id="93">
  <ts>2020-04-28T13:36:14.645000</ts>
  <user>Dominik</user>
  <text>the first logo was pretty metal lol</text>
</message>
<message conversation_id="93">
  <ts>2020-04-28T13:40:27.279000</ts>
  <user>Dominik</user>
  <text>I actually like all of the previous ones more than the current one :^(</text>
</message>
<message conversation_id="93">
  <ts>2020-04-28T13:42:52.746000</ts>
  <user>Dominik</user>
  <text>drcomplete sounds very cool let us know if it works</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T19:53:02.967000</ts>
  <user>Thaleia</user>
  <text>I'm not allowed to view messages in #rules.</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T19:53:42.155000</ts>
  <user>Macia</user>
  <text>@Deleted User sorry I’ve made a mistake . Give me a moment</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T19:54:29.652000</ts>
  <user>Macia</user>
  <text>@Deleted User can you try now?</text>
</message>
<message conversation_id="92">
  <ts>2020-04-28T20:20:47.223000</ts>
  <user>Thaleia</user>
  <text>Yes all clear.</text>
</message>
<message conversation_id="94">
  <ts>2020-04-28T20:41:31.062000</ts>
  <user>Treyton</user>
  <text>Hi there!As I use Termux (because I have not had a PC for 2 years) and I use an x11 system inside my mobile which doesn't have many apps I was thinking of making some using Racket (with `racket/gui` lib). So a question came up to me and I want to know if it is possible to make a deb package with Racket (using some library or something to export)</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T20:57:24.074000</ts>
  <user>Macia</user>
  <text>HI @NTBBloodbath are your running racket in your phone?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T20:57:47.070000</ts>
  <user>Treyton</user>
  <text>Yeah I'm using it on Termux</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T20:59:59.045000</ts>
  <user>Treyton</user>
  <text>None</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:00:10.281000</ts>
  <user>Macia</user>
  <text>nice</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:00:49.449000</ts>
  <user>Treyton</user>
  <text>(Set alias for racket ... It is a little more comfortable to run using `rkt` instead of `racket`)</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:01:05.984000</ts>
  <user>Treyton</user>
  <text>It works very well</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:01:17.841000</ts>
  <user>Macia</user>
  <text>racket gui expects gnome I think to run gui apps</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:01:49.136000</ts>
  <user>Treyton</user>
  <text>And since Termux has x11 support I got to experimenting a bit with GUI lol</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:02:05.543000</ts>
  <user>Treyton</user>
  <text>Rlly? It works with Xfce4 on mobile 🤔</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:02:07.936000</ts>
  <user>Macia</user>
  <text>will racket run with just x111?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:02:14.119000</ts>
  <user>Treyton</user>
  <text>Yeah</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:02:18.038000</ts>
  <user>Macia</user>
  <text>gracket that is</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:02:19.974000</ts>
  <user>Macia</user>
  <text>wow</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:02:32.906000</ts>
  <user>Treyton</user>
  <text>Gimme a moment I'll show it to you</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:03:13.891000</ts>
  <user>Macia</user>
  <text>(If you screenshare from your phone to discord my head will explode)</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:07:11.590000</ts>
  <user>Treyton</user>
  <text>Hahaha I think that is not possible at the moment</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:07:29.092000</ts>
  <user>Macia</user>
  <text>I was just lookign at the termux website</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:08:24.445000</ts>
  <user>Treyton</user>
  <text>None</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:09:25.424000</ts>
  <user>Macia</user>
  <text>that is really cool.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:09:44.646000</ts>
  <user>Macia</user>
  <text>do you have a hdmi adaptor and a keyborad</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:09:56.513000</ts>
  <user>Treyton</user>
  <text>Yes this opens up a lot of possibilities</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:10:36.614000</ts>
  <user>Treyton</user>
  <text>No the x11 system runs directly inside the mobile and I connect to VNC. And yeah I have a external keyboard</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:11:07.923000</ts>
  <user>Macia</user>
  <text>that looks like its bigger than a phone screen</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:11:30.239000</ts>
  <user>Macia</user>
  <text>so drracket? or is that pushing things too far?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:11:45.660000</ts>
  <user>Treyton</user>
  <text>It is a little more comfortable than the Android keyboard ... Sometimes I have very long codes and with the mobile keyboard it is a bit uncomfortable haha</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:12:06.286000</ts>
  <user>Treyton</user>
  <text>Ahh yes the x11 screen size can be configured</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:12:27.027000</ts>
  <user>Macia</user>
  <text>I notice you are on 7.4? I'm guessing that is because 7.6 is too big?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:13:07.968000</ts>
  <user>Treyton</user>
  <text>I think DrRacket isn't available for Termux at the moment... So I'm using Vim with some plugins</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:13:50.044000</ts>
  <user>Macia</user>
  <text>i'm amazed.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:14:01.770000</ts>
  <user>Treyton</user>
  <text>Is there a newer version? NiceI may have to wait for the Termux team to compile it for Android and my architecture to update</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:14:03.434000</ts>
  <user>Macia</user>
  <text>have you tried `raco distribute`</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:14:40.397000</ts>
  <user>Treyton</user>
  <text>No I know very little about Racket yet I'm learning 🙂 Anyway what it does?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:14:41.395000</ts>
  <user>Macia</user>
  <text>7.7 due to be released soon. probably early may.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:15:04.831000</ts>
  <user>Macia</user>
  <text>raco distribute produces standalone executables</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:15:27.032000</ts>
  <user>Treyton</user>
  <text>&gt; 7.7 due to be released soon. probably early may.Wow and what's new?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:15:45.077000</ts>
  <user>Treyton</user>
  <text>&gt; raco distribute produces standalone executablesOh I'll see it thanks!</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:16:37.400000</ts>
  <user>Macia</user>
  <text>I've not been following the release testing.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:17:04.798000</ts>
  <user>Macia</user>
  <text>I expect racket(cs) will just keep getting better (faster).</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:18:00.637000</ts>
  <user>Treyton</user>
  <text>That's nice :o</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:18:25.431000</ts>
  <user>Macia</user>
  <text>&gt; I want to know if it is possible to make a deb package with Racket</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:19:08.061000</ts>
  <user>Treyton</user>
  <text>At first with Racket I was a bit confused by the syntax (I come from other languages \u200b\u200blike Ruby and JavaScript) however I adapted quickly and am comfortable using the parentheses 🙂</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:19:19.651000</ts>
  <user>Macia</user>
  <text>is `raco distribute` and `raco exe` what you were lookign for? I know it doesn't answer the deb package but maybe a start?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:20:38.541000</ts>
  <user>Treyton</user>
  <text>```Unrecognized command: distribute```I got that maybe I need to execute `raco setup` first?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:20:46.531000</ts>
  <user>Macia</user>
  <text>wow! you have the three big syntax traditons!smalltalk&gt;rubyc&gt;javascriptlisp&gt;racket</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:21:38.970000</ts>
  <user>Macia</user>
  <text>&gt; The raco distribute command combines a standalone executable created by raco exe with all of the shared libraries that are needed to run it along with any runtime files declared via defineruntimepath. The resulting package can be moved to other machines that run the same operating system.</text>
</message>
<message conversation_id="96">
  <ts>2020-04-28T21:22:22.679000</ts>
  <user>Macia</user>
  <text>&gt; the command&gt; &gt; `raco exe gui hello.rkt`&gt; &gt; produces either hello.exe (Windows) hello.app (Mac OS) or hello (Unix) which runs the same as running the hello.rkt module in gracket.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:23:14.817000</ts>
  <user>Treyton</user>
  <text>Wow I had not noticed that until now</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:23:35.224000</ts>
  <user>Macia</user>
  <text>```% raco distributeraco distribute: expects &lt;destdir&gt; [&lt;executable&gt;] ... on the command line given 0 arguments% raco hUsage: raco &lt;command&gt; &lt;option&gt; ... &lt;arg&gt; ...```</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:24:05.961000</ts>
  <user>Treyton</user>
  <text>Ruby's syntax seemed very nice ... However the racket syntax does not stay behind. Despite not being what I'm used to it's very interesting</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:25:02.958000</ts>
  <user>Treyton</user>
  <text>Hmmm there are bad news for me... I can't use `distribute` or `exe`</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:25:15.670000</ts>
  <user>Treyton</user>
  <text>I got `Unrecognized command`... So I think I'll create executables by myself</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:25:36.270000</ts>
  <user>Kire</user>
  <text>Have you tried using raco setup first?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:25:40.294000</ts>
  <user>Macia</user>
  <text>I've still not learnt ruby  I'm learning a little smalltalk because I'm thinking about making a small smalltalk `#lang` based on self</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:27:33.500000</ts>
  <user>Kire</user>
  <text>Ruby is pretty dope imo</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:40:43.456000</ts>
  <user>Treyton</user>
  <text>&gt; Have you tried using raco setup first?I'm doing it rn thx</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T21:41:51.051000</ts>
  <user>Treyton</user>
  <text>&gt; I've still not learnt ruby  I'm learning a little smalltalk because I'm thinking about making a small smalltalk `#lang` based on selfOh it's a good idea!Ruby is very easy to learn... It's like python syntax lol</text>
</message>
<message conversation_id="97">
  <ts>2020-04-28T22:10:10.236000</ts>
  <user>Treyton</user>
  <text>```raco setup:  summary of errors  [18:06:45]raco setup: error: during making for &lt;pkgs&gt;/scribblelib/scribbleraco setup: instantiate: unknown moduleraco setup: module name: #&lt;resolvedmodulepath:"/data/data/com.termux/files/usr/share/racket/collects/setup/maindoc.rkt"&gt;raco setup: compiling: &lt;pkgs&gt;/scribblelib/scribble/run.rkt```</text>
</message>
<message conversation_id="97">
  <ts>2020-04-28T22:14:09.354000</ts>
  <user>Macia</user>
  <text>Missing stuff?</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T22:15:10.587000</ts>
  <user>Treyton</user>
  <text>Hmm I don't know much about that</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T22:17:16.057000</ts>
  <user>Treyton</user>
  <text>I think scribblelib is missing idk lolI'll install it manually and after run `raco setup` again</text>
</message>
<message conversation_id="97">
  <ts>2020-04-28T22:17:48.352000</ts>
  <user>Macia</user>
  <text>Good luck</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T22:20:03.732000</ts>
  <user>Treyton</user>
  <text>I ran again and there are no more errors :GWomoGabSmile:</text>
</message>
<message conversation_id="97">
  <ts>2020-04-28T22:20:54.187000</ts>
  <user>Treyton</user>
  <text>However I can't use `distribute` or `exe` 😔</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T22:26:51.796000</ts>
  <user>Karanveer</user>
  <text>@StephenD I'm putting together a simplistic lexer and parser for building Smalltalk langs</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T22:28:15.901000</ts>
  <user>Karanveer</user>
  <text>I want to see if it could be a wrapper around `racket/class` but there needs to be some shims for keyword messages.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-28T22:43:53.256000</ts>
  <user>Macia</user>
  <text>FYI https://leastfixedpoint.com/tonyg/kcbbs/projects/thing.html (some racket)</text>
</message>
<message conversation_id="95">
  <ts>2020-04-29T00:03:41.108000</ts>
  <user>Karanveer</user>
  <text>I seem to recall that project way back.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-29T00:04:13.230000</ts>
  <user>Karanveer</user>
  <text>I've been reading Tony's Thesis the past few weeks. Good stuff.</text>
</message>
<message conversation_id="95">
  <ts>2020-04-29T01:55:32.866000</ts>
  <user>Karanveer</user>
  <text>..whispers.. tailcall consing onto a list accumulator and reverse is bad ... pass it on</text>
</message>
<message conversation_id="98">
  <ts>2020-04-29T02:24:24.398000</ts>
  <user>Anvi</user>
  <text>why?</text>
</message>
<message conversation_id="99">
  <ts>2020-04-29T02:41:16.945000</ts>
  <user>Bellamee</user>
  <text>It definitely needs to be documented or expressed in a comment and if it isn't explicitly stated that's bad. But why is it bad when it is explicit?</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T03:04:50.978000</ts>
  <user>Reeyansh</user>
  <text>there's no benefit to doing it instead of nontail recursion it just obscures the code</text>
</message>
<message conversation_id="98">
  <ts>2020-04-29T03:13:27.207000</ts>
  <user>Anvi</user>
  <text>doesn't it avoid stack overflows?</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T03:59:57.265000</ts>
  <user>Reeyansh</user>
  <text>no there are no stack overflows in racket/scheme</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T04:00:29.009000</ts>
  <user>Reeyansh</user>
  <text>stack memory and heap memory are the same thing. a stack overflow is just another way to get an out of memory error.</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T04:01:27.190000</ts>
  <user>Reeyansh</user>
  <text>if you create a huge nontailrecursive call stack the runtime just moves stack frames to the heap for you automatically</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T04:03:52.568000</ts>
  <user>Reeyansh</user>
  <text>this is why there's no difference between building a list with tail recursion and without tail recursion. when you do it tail recursively you're just redoing the exact same work of building a list of arguments that the runtime would do anyway in order to keep track of what's on the stack</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T04:05:55.303000</ts>
  <user>Reeyansh</user>
  <text>(this is only the case if you're _building a list_ tail recursively. if you're doing something _else_ tail recursively like computing a sum then the tail recursive approach is much better because you're not _moving_ where a list of values gets built up because you're not building up a list of values at all)</text>
</message>
<message conversation_id="100">
  <ts>2020-04-29T04:07:21.078000</ts>
  <user>Reeyansh</user>
  <text>in general: aggregation operations (sum max min average count etc.) should be done tail recursively. collection operations (make a list make a hash table make a tree etc.) shouldn\'t.</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:53:22.618000</ts>
  <user>Karanveer</user>
  <text>Also in the list case you end up building the list up in reverse and so `reverse` gets applied to get it in the correct order. Which generally will double the real time the function takes to run.</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:56:16.233000</ts>
  <user>Karanveer</user>
  <text>I was checking out answers to a list building kata on codewars and ~90% did a tail recursive cons with a reverse.</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:56:42.968000</ts>
  <user>Dominik</user>
  <text>I’ve always done it this way what would the alternative look like?</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:57:45.291000</ts>
  <user>Karanveer</user>
  <text>Roughly```(define (naive x) (if (zero? x) null (cons x (naive (sub1 x)))))```</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:59:37.685000</ts>
  <user>Dominik</user>
  <text>hmm :GWseremePeepoThink:</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:59:44.849000</ts>
  <user>Karanveer</user>
  <text>Also tail call + reverse uses twice the memory</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T06:59:57.740000</ts>
  <user>Dominik</user>
  <text>and this would build it in the correct order?</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:00:36.933000</ts>
  <user>Karanveer</user>
  <text>order is this case is from the value you give the function to 1</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:00:52.815000</ts>
  <user>Dominik</user>
  <text>yes</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:02:31.388000</ts>
  <user>Karanveer</user>
  <text>Over a list in order.```(define (myfilter pred? ls) (cond [(null? ls) null] [(pred? (car ls)) (cons (car ls) (myfilter pred? (cdr ls)))] [else (myfilter pred? (cdr ls))]))```</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:02:52.884000</ts>
  <user>Karanveer</user>
  <text>I guess I could've done onearg'd map...</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:04:45.473000</ts>
  <user>Dominik</user>
  <text>oh right :GWseremePeepoThink: now I see it</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:04:51.029000</ts>
  <user>Dominik</user>
  <text>thanks :GWcmeisterPeepoLove:</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:05:08.155000</ts>
  <user>Dominik</user>
  <text>so in general I shouldn’t worry about making stuff tail recursive in racket?</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:07:08.604000</ts>
  <user>Karanveer</user>
  <text>&gt; notjack: in general: aggregation operations (sum max min average count etc.) should be done tail recursively. collection operations (make a list make a hash table make a tree etc.) shouldn\'t.</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:08:07.530000</ts>
  <user>Dominik</user>
  <text>🙏🙇\u200d♂️</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:11:01.917000</ts>
  <user>Karanveer</user>
  <text>A lot of times I have an instinct when I look at a problem on how to handle it. But if I\'m feeling my way through a problem I try to use one of the `for` forms first.</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:12:47.208000</ts>
  <user>Dominik</user>
  <text>actually that made me think  is foldl tail recursive + reverse or body recursive in racket?</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:12:57.781000</ts>
  <user>Dominik</user>
  <text>foldl/reduce/whatyanameit</text>
</message>
<message conversation_id="101">
  <ts>2020-04-29T07:13:13.591000</ts>
  <user>Dominik</user>
  <text>yeah fors are awesome</text>
</message>
<message conversation_id="102">
  <ts>2020-04-29T16:02:00.461000</ts>
  <user>Huxlee</user>
  <text>I wish I understood what was going on in this chat but I haven't had much time to goof around with Racket this past week :(</text>
</message>
<message conversation_id="102">
  <ts>2020-04-29T16:11:34.204000</ts>
  <user>Macia</user>
  <text>They are helping someone understand recursion and tail calls.</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T17:14:33.580000</ts>
  <user>Reeyansh</user>
  <text>@spacey 🌌 that's okay 🙂</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T17:15:02.514000</ts>
  <user>Reeyansh</user>
  <text>I haven't been goofing around with Racket much lately either</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T17:15:12.954000</ts>
  <user>Reeyansh</user>
  <text>been too hard to focus</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T22:07:29.970000</ts>
  <user>Karanveer</user>
  <text>I've been able to find some time but today I had to do some unix sysadmin tech support facilitating zoom calls and now order replacement parts for a laptop my 7yo is hellbent on destroying</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T22:07:46.856000</ts>
  <user>Karanveer</user>
  <text>(only one of those things I get paid to do)</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T22:08:04.329000</ts>
  <user>Macia</user>
  <text>😭</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T22:11:42.558000</ts>
  <user>Karanveer</user>
  <text>The laptop still works enough that I'm running discord on it 🙂</text>
</message>
<message conversation_id="103">
  <ts>2020-04-29T22:12:13.494000</ts>
  <user>Karanveer</user>
  <text>Something up with the lcd. Nice that the hdmi port actually works.</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T03:39:38.152000</ts>
  <user>Kire</user>
  <text>So I'm thinking of writing a paper in Pollen but I need to be able to include FSMs in the paper. Does anyone know of a Racket library/language that I can use for building FSMs like in graphviz that would work with Pollen?</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T03:40:24.601000</ts>
  <user>Kire</user>
  <text>As soon as I finished typing that I realized I should really just search the page for `graphviz` and found this: https://docs.racketlang.org/graphviz/index.html</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T03:40:33.277000</ts>
  <user>Kire</user>
  <text>So I'm gonna try that out and see if it works how I want</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T03:58:13.056000</ts>
  <user>Kire</user>
  <text>Hmm doesn't look like there would be an easy way to do that all in one file the image would need to be included in the Pollen page as an external asset. Was hoping I could just do something like ```scheme#lang pollen◊(require graphviz)this is some text ; Or something like this I guess◊(img&gt;svg (makediagraph `(some code for the graphviz library)))some more text after a picture of my FSM```</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T04:01:12.068000</ts>
  <user>Kire</user>
  <text>It would be a dream though to be able to embed a graphviz diagram right inside markdown like this so easily... Of course you can do stuff like this in latex but latex is way more complicated than anything I need for 99% of use cases.</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T04:01:33.379000</ts>
  <user>Kire</user>
  <text>Maybe after classes are done I'll try making something like it...</text>
</message>
<message conversation_id="105">
  <ts>2020-04-30T08:36:49.565000</ts>
  <user>Macia</user>
  <text>Hi @nixin72 the author of pollen is not on discord ☹️.The pollen manual https://docs.racketlang.org/pollen/Getting_more_help.html#%28part._.Questions___discussion%29 recommends that questions should be posted on github https://github.com/mbutterick/pollenusers/issues</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T14:46:45.357000</ts>
  <user>Rainen</user>
  <text>Just joined Discord and saw this very useful to me as I was just using graphviz &amp; tikz two days ago will be doing more.</text>
</message>
<message conversation_id="106">
  <ts>2020-04-30T14:53:02.454000</ts>
  <user>Dominik</user>
  <text>hello new person 👋</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T16:00:56.469000</ts>
  <user>Kire</user>
  <text>Ohh excellent thank you @StephenD! I'll post my question there then</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T16:01:44.571000</ts>
  <user>Macia</user>
  <text>I’ve only done a little pollen so I’m out of my depth 😱</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T16:04:48.696000</ts>
  <user>Kire</user>
  <text>I've not done any! I just really want something to replace my markdown workflow cause markdown doesn't do enough</text>
</message>
<message conversation_id="107">
  <ts>2020-04-30T16:07:18.148000</ts>
  <user>Macia</user>
  <text>https://groups.google.com/d/msg/pollenpub/AAvs798fLpI/l8lNBPcCAgAJ</text>
</message>
<message conversation_id="104">
  <ts>2020-04-30T17:32:34.142000</ts>
  <user>Kire</user>
  <text>You can make custom tags for the Pollen markup so I think it should be pretty easy to do this actually</text>
</message>
</discord>