<discord>
<team_domain>Racket</team_domain>
<channel_name>general</channel_name>
<start_date>2019-11-02T04:46:55.839000</start_date>
<end_date>2020-01-30T01:54:09.757000</end_date>
<message conversation_id="1">
  <ts>2019-11-02T04:46:55.839000</ts>
  <user>Yiqun</user>
  <text>Game Jam has started! https://itch.io/jam/racket2019gamejam</text>
</message>
<message conversation_id="2">
  <ts>2019-11-02T15:49:08.880000</ts>
  <user>Yanelly</user>
  <text>@notjack @Deleted User `Multiple modules can be required at once multiple langs can't.` There is a tiny exception to that which I don't think addresses your needs but is awesome anyway; ```#lang atexp racket/base```The body of a #lang shorthand has no specific syntax because the syntax is determined by the language name that follows #lang.  https://docs.racketlang.org/guide/Module_Syntax.html#%28part._hashlang%29If you've not seen it check out http://www.greghendershott.com/2015/08/atexpressions.html for</text>
</message>
<message conversation_id="1">
  <ts>2019-11-03T09:40:25.704000</ts>
  <user>Amri</user>
  <text>Honestly I'm so proud that I remembered all the syntax class stuff for macros. Someday I won't have to google it though xD</text>
</message>
<message conversation_id="1">
  <ts>2019-11-03T10:18:39.088000</ts>
  <user>Amri</user>
  <text>@notjack for when you're next around. Will try to create the PR tomorrow for basic creation + contains.</text>
</message>
<message conversation_id="1">
  <ts>2019-11-03T10:19:10.123000</ts>
  <user>Amri</user>
  <text>gotta love macros xD</text>
</message>
<message conversation_id="1">
  <ts>2019-11-03T18:03:49.740000</ts>
  <user>Amri</user>
  <text>🤔</text>
</message>
<message conversation_id="1">
  <ts>2019-11-03T21:55:03.805000</ts>
  <user>Amri</user>
  <text>Alrighty there we go. https://github.com/jackfirth/rebellion/pull/333</text>
</message>
<message conversation_id="3">
  <ts>2019-11-05T05:14:19.620000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders Great job 😄 Was busy all weekend but I got a chance to review it tonight</text>
</message>
<message conversation_id="1">
  <ts>2019-11-05T06:15:02.969000</ts>
  <user>Amri</user>
  <text>Appreciate the overview! Comparators are definitely on my mind but forgot to include it there. The macro does include a form that specifies all bound values and inclusivity: `(range [0 #t] [10 #f])`  this can be used if the type of endpoint is unknown.Beyond that I'll look at the rest later  probably won't make a comment response until I can mess around with things first. Night!</text>
</message>
<message conversation_id="1">
  <ts>2019-11-05T06:27:05.633000</ts>
  <user>Suleiman</user>
  <text>night! 👋</text>
</message>
<message conversation_id="3">
  <ts>2019-11-06T05:12:29.105000</ts>
  <user>Suleiman</user>
  <text>Going to try and work on this super neat transducer tonight. It's called `materializing` and it shows you the behavior of some other transducer:```racket&gt; (transduce (innaturals) (materializing (taking 3)) #:into intolist)(list #&lt;startevent&gt; (consumeevent 0) (emitevent 0) (consumeevent 1) (emitevent 1) (consumeevent 2) #&lt;halfcloseevent&gt; (halfclosedemitevent 2) #&lt;finishevent&gt;)```</text>
</message>
<message conversation_id="3">
  <ts>2019-11-06T05:15:34.838000</ts>
  <user>Amri</user>
  <text>the frick xD</text>
</message>
<message conversation_id="3">
  <ts>2019-11-06T05:17:03.082000</ts>
  <user>Suleiman</user>
  <text>Explanation here 😉 https://github.com/jackfirth/rebellion/issues/339</text>
</message>
<message conversation_id="3">
  <ts>2019-11-06T16:04:32.402000</ts>
  <user>Yiqun</user>
  <text>Nice.</text>
</message>
<message conversation_id="3">
  <ts>2019-11-07T23:17:31.396000</ts>
  <user>Twyla</user>
  <text>oh god I'm cooking up some spicy spaghetti</text>
</message>
<message conversation_id="3">
  <ts>2019-11-07T23:21:00.504000</ts>
  <user>Twyla</user>
  <text>Fact: Each note contains an offset value (in seconds) as distance from the first note.Problem: I need a tone length to create a note.</text>
</message>
<message conversation_id="3">
  <ts>2019-11-07T23:21:34.178000</ts>
  <user>Twyla</user>
  <text>Wait no this code is further broken because it simply doesn't work: I need to subtract the next offset from the current one. 🤔</text>
</message>
<message conversation_id="3">
  <ts>2019-11-07T23:22:01.432000</ts>
  <user>Twyla</user>
  <text>Back to the drawing board</text>
</message>
<message conversation_id="3">
  <ts>2019-11-07T23:24:24.182000</ts>
  <user>Twyla</user>
  <text>Also I need to multiply the velocity by 0.009 instead of 0.01 because `rsound` doesn't care about piano/forte values.</text>
</message>
<message conversation_id="4">
  <ts>2019-11-08T00:40:53.836000</ts>
  <user>Suleiman</user>
  <text>@Deleted User whatcha working on?</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T00:44:47.436000</ts>
  <user>Twyla</user>
  <text>The same music parser stuff.</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T00:45:37.410000</ts>
  <user>Twyla</user>
  <text>I'm parsing the same tabseparated file again. One of the fields indicates an offset from zero (ie this field is always zero in the first line) instead of a duration.</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T00:45:53.160000</ts>
  <user>Twyla</user>
  <text>I need a duration though which would be offset of next line  offset of this line</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T00:46:17.029000</ts>
  <user>Twyla</user>
  <text>To generalise the problem:```foo\tbar\tbaz\t0.0quux\tblam\tbob\t3.0splat\tbang\tfred\t5.0```becomes```{foo bar baz 3.0}{quux blam bob 2.0}{splat bang fred [some fixed value]}```</text>
</message>
<message conversation_id="4">
  <ts>2019-11-08T00:51:23.966000</ts>
  <user>Suleiman</user>
  <text>Ah I see what you mean. Tricky.</text>
</message>
<message conversation_id="4">
  <ts>2019-11-08T00:52:48.929000</ts>
  <user>Suleiman</user>
  <text>Where do you get that last fixed value from?</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T01:34:59.263000</ts>
  <user>Twyla</user>
  <text>Can be provided externally.</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T01:36:08.944000</ts>
  <user>Twyla</user>
  <text>The format doesn't mention any form of note length besides the time offset so I assume the last note just lingers a bit and fades away.</text>
</message>
<message conversation_id="4">
  <ts>2019-11-08T01:59:09.226000</ts>
  <user>Suleiman</user>
  <text>it's _ambiguous_?? 😱</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T02:10:02.890000</ts>
  <user>Twyla</user>
  <text>I'll reread the description paper tomorrow.</text>
</message>
<message conversation_id="3">
  <ts>2019-11-08T02:10:17.775000</ts>
  <user>Twyla</user>
  <text>:meow:</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T02:54:32.128000</ts>
  <user>Yiqun</user>
  <text>Using slightly different from normal models of music are interesting for making generative art.</text>
</message>
<message conversation_id="4">
  <ts>2019-11-08T04:00:49.928000</ts>
  <user>Suleiman</user>
  <text>Totally unrelated but this is super cool to me:</text>
</message>
<message conversation_id="4">
  <ts>2019-11-08T04:19:40.154000</ts>
  <user>Yiqun</user>
  <text>Great excuse to use the word reification.</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:28:59.914000</ts>
  <user>Suleiman</user>
  <text>maybe `transducerreify`?</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:30:39.259000</ts>
  <user>Yiqun</user>
  <text>`reifying`</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:31:36.866000</ts>
  <user>Yiqun</user>
  <text>or I guess `transducerreify` could be sugar around `(transducer ... (materializing ...) #:into intolist)`</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:32:59.629000</ts>
  <user>Yiqun</user>
  <text>I didn't fully think the second part there through</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:35:14.261000</ts>
  <user>Suleiman</user>
  <text>I dislike that it\'s kind of hard to just guess what the word reify means whereas with materialize I can sort of guess even if I\'ve never seen the word before. What do you think?</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:37:03.324000</ts>
  <user>Nyriah</user>
  <text>my first guess for what reify means in a programming context is preserve across a compilation step usually involving serializing a value or type into in the compiled result</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:37:39.415000</ts>
  <user>Nyriah</user>
  <text>materialize means very little to me in a programming context</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:38:27.853000</ts>
  <user>Suleiman</user>
  <text>I mean I can guess what they mean in an english context where I've never seen the word before at all not just in a programmer context where I've seen the word but not seen it used in code</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:38:55.965000</ts>
  <user>Yiqun</user>
  <text>Reify is a word that is used heavily in PL and probably is best avoided. It's about equivalent to materialize.</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:41:30.778000</ts>
  <user>Suleiman</user>
  <text>Maybe just `transducerobserveevents` would be better honestly</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:43:53.936000</ts>
  <user>Suleiman</user>
  <text>Or `observingtransductionevents`</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:45:07.223000</ts>
  <user>Nyriah</user>
  <text>I was thinking of saying this was about logging input dependencies or bugging the input or maybe using the input as a bait car so to speak... which I guess is what unit test spies are</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:45:36.902000</ts>
  <user>Nyriah</user>
  <text>so `bugging` `baiting` `spying`...</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:46:06.116000</ts>
  <user>Nyriah</user>
  <text>but I like that you picked `materializing` with reference to RxJava too</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:46:38.313000</ts>
  <user>Suleiman</user>
  <text>I think if rxjava didn't set the precedent I wouldn't have picked it. And even then I'm on the fence</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:46:51.459000</ts>
  <user>Suleiman</user>
  <text>The name requires an explanation which isn't a great quality in a name</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:46:57.005000</ts>
  <user>Nyriah</user>
  <text>there wouldn't be a really good `dematerializing` synonym if you started with `bugging` :p</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:47:05.185000</ts>
  <user>Nyriah</user>
  <text>`debugging`</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:48:00.252000</ts>
  <user>Yiqun</user>
  <text>Not familiar with RxJava but it reminded me of traces from a Mocked class in a way.</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:49:14.370000</ts>
  <user>Suleiman</user>
  <text>`tracingtransductionevents`?</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:49:21.094000</ts>
  <user>Suleiman</user>
  <text>hmm</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:50:24.603000</ts>
  <user>Nyriah</user>
  <text>`loggingreads`?</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:50:56.249000</ts>
  <user>Suleiman</user>
  <text>logging I want to stay away from because it implies actual racket loggers are involved somehow</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:51:21.378000</ts>
  <user>Suleiman</user>
  <text>or something loggerlike with severity levels and humanreadable messages and whatnot</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:53:23.928000</ts>
  <user>Suleiman</user>
  <text>I like `observingtransductionevents` the most out of these</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T04:56:14.429000</ts>
  <user>Suleiman</user>
  <text>follow up question: `observingtransductionevents` or just `observingevents`?</text>
</message>
<message conversation_id="6">
  <ts>2019-11-08T05:11:56.328000</ts>
  <user>Nyriah</user>
  <text>observing and events make me think of the observer pattern</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T05:16:56.103000</ts>
  <user>Suleiman</user>
  <text>yeah it doesn't sound super related to transducers</text>
</message>
<message conversation_id="7">
  <ts>2019-11-08T12:43:50.260000</ts>
  <user>Grettell</user>
  <text>Hey I'm a pretty heavy user of BiwaScheme for Scheme &gt; Javascript conversion. Does anyone know offhand how RacketScript and Urlang compare featurewise?</text>
</message>
<message conversation_id="7">
  <ts>2019-11-08T13:30:55.215000</ts>
  <user>Yanelly</user>
  <text>I only know the package descriptions; racketscript is Racket on JavaScript and urlang is JavaScript with scheme syntax</text>
</message>
<message conversation_id="7">
  <ts>2019-11-08T13:31:29.776000</ts>
  <user>Yanelly</user>
  <text>I’m probably over simplifying</text>
</message>
<message conversation_id="7">
  <ts>2019-11-08T14:16:32.767000</ts>
  <user>Yanelly</user>
  <text>https://dustycloud.org/blog/terminalphaseprototype/</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T17:51:24.093000</ts>
  <user>Grettell</user>
  <text>Oh I see. I guess I'll just have to try them. I think BiwaScheme is more like Urlang in that case</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T17:51:52.078000</ts>
  <user>Grettell</user>
  <text>I just finished writing a wrapper for the PlayCanvas 3D engine last week for BiwaScheme and it's been going amazing</text>
</message>
<message conversation_id="5">
  <ts>2019-11-08T17:52:27.605000</ts>
  <user>Grettell</user>
  <text>I'd like to submit something to the gamejam though so maybe I'll try writing a wrapper for Urlang or RacketScript</text>
</message>
<message conversation_id="7">
  <ts>2019-11-09T01:00:30.557000</ts>
  <user>Amri</user>
  <text>What's Urlang?</text>
</message>
<message conversation_id="7">
  <ts>2019-11-09T01:02:52.692000</ts>
  <user>Yiqun</user>
  <text>https://github.com/soegaard/urlang</text>
</message>
<message conversation_id="7">
  <ts>2019-11-09T01:31:15.339000</ts>
  <user>Amri</user>
  <text>Eh. Really don't like the name there. Thought it was something related to Erlang.</text>
</message>
<message conversation_id="8">
  <ts>2019-11-09T01:39:58.367000</ts>
  <user>Yiqun</user>
  <text>That was my first thought when it was first published.</text>
</message>
<message conversation_id="8">
  <ts>2019-11-09T01:40:43.122000</ts>
  <user>Yiqun</user>
  <text>If you like Erlang Marc Feeley built an Erlang &gt; Gambit Scheme compiler</text>
</message>
<message conversation_id="8">
  <ts>2019-11-09T01:41:26.423000</ts>
  <user>Yiqun</user>
  <text>https://www.researchgate.net/publication/2593118_Etos_an_Erlang_to_Scheme_compiler</text>
</message>
<message conversation_id="9">
  <ts>2019-11-09T19:17:13.549000</ts>
  <user>Amri</user>
  <text>@notjack Want to get your opinion on comparators. How feasible is it to handle defaults? In a lot of cases ranges are just numbers and while we definitely want to support other times having to specify a comparator for that isn't too ideal.</text>
</message>
<message conversation_id="10">
  <ts>2019-11-09T19:55:37.108000</ts>
  <user>Suleiman</user>
  <text>Like defaulting to the `real&lt;=&gt;` comparator? That sounds fine to me</text>
</message>
<message conversation_id="10">
  <ts>2019-11-09T19:57:26.850000</ts>
  <user>Amri</user>
  <text>Basically yeah. Theoretically in the future we might be able to get a bit more clever.</text>
</message>
<message conversation_id="11">
  <ts>2019-11-09T20:42:10.367000</ts>
  <user>Suleiman</user>
  <text>That's what `intomax` `intomin` and `sorting` do too so there's good precedent</text>
</message>
<message conversation_id="11">
  <ts>2019-11-09T20:44:57.958000</ts>
  <user>Amri</user>
  <text>This is something where I see OO being unparalleled with. I don't want to specify a comparator for everything. I don't want to rope myself in to all kinds of different implementations and such. I just want basic polymorphism especially with a standard library.</text>
</message>
<message conversation_id="11">
  <ts>2019-11-09T20:47:27.853000</ts>
  <user>Suleiman</user>
  <text>Typeclasses would also solve that</text>
</message>
<message conversation_id="10">
  <ts>2019-11-09T21:07:30.917000</ts>
  <user>Amri</user>
  <text>A fair number of things would  any polymorphism by definition. But I much prefer the OO approach.</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T02:42:44.526000</ts>
  <user>Yiqun</user>
  <text>Sending this here to get some feedback.How about this as the next Racket Community Event:https://gist.github.com/samdphillips/47ea14d6eb75f93e64ad20dfd1bee8dc</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T02:43:30.467000</ts>
  <user>Yiqun</user>
  <text>⬆ : @StephenD @notjack ⬆</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T02:44:26.180000</ts>
  <user>Suleiman</user>
  <text>Ou I like that</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T02:45:19.287000</ts>
  <user>Suleiman</user>
  <text>advent of code puzzles are usually pretty streamy</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T02:45:43.468000</ts>
  <user>Suleiman</user>
  <text>would be a good way to get transducer use cases</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T02:46:51.538000</ts>
  <user>Yiqun</user>
  <text>Yeah. I'm thinking of how Stephen has started a chain of monthly community events and doing this seem like a no brainer. We just need to get word out in advance so folks know.</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T19:49:20.006000</ts>
  <user>Yanelly</user>
  <text>@oaktownsam brilliant !</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T20:25:24.915000</ts>
  <user>Yanelly</user>
  <text>@oaktownsam the Racket leaderboard for advent of code is a great idea</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T20:26:29.657000</ts>
  <user>Yanelly</user>
  <text>There were also a bunch of suggestions for future events</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T20:42:33.665000</ts>
  <user>Yiqun</user>
  <text>Yeah it seems good to have some monthly events that keep the Racket community charged.</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T21:03:24.048000</ts>
  <user>Yanelly</user>
  <text>I also have some specifically LOP themed ideas</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T21:18:23.419000</ts>
  <user>Yiqun</user>
  <text>I see these as: 1. Get users to make a jump and try Racket 2. Excite existing users</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T21:40:07.044000</ts>
  <user>Yanelly</user>
  <text>Possible scheduleJan: text adventure!  based on https://mcacm.acm.org/magazines/2012/1/144809creatinglanguagesinracket/fulltextFeb: DrRacket quickscripts scripting comp Mar: RPG/roguelikeApr: simulations (conways life,bigbang/universe etc)May: solvers with Rosette (maybe in a game context)June: little language compJuly: music! Nothing set in stone  I’m not overly committed to any of these. It’s just brainstorming.</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T21:41:12.449000</ts>
  <user>Yiqun</user>
  <text>This is good</text>
</message>
<message conversation_id="12">
  <ts>2019-11-10T21:41:32.274000</ts>
  <user>Yiqun</user>
  <text>Planning is sometimes annoying but necessary</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T21:41:40.247000</ts>
  <user>Yanelly</user>
  <text>Picture comp in August 🐟</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T21:42:35.544000</ts>
  <user>Yanelly</user>
  <text>Important to keep as lightweight as possible so you don’t burn out</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T21:44:31.159000</ts>
  <user>Yanelly</user>
  <text>And not get upset if something doesn’t work  you never know how a community will react</text>
</message>
<message conversation_id="13">
  <ts>2019-11-10T21:44:43.506000</ts>
  <user>Yanelly</user>
  <text>Just move on to the next one</text>
</message>
<message conversation_id="13">
  <ts>2019-11-11T20:03:53.043000</ts>
  <user>Yanelly</user>
  <text>@oaktownsam suggestion: announce the racket leaderboard for Advent of code in the next week I’ll tweet/post on Reddit</text>
</message>
<message conversation_id="14">
  <ts>2019-11-11T21:01:58.534000</ts>
  <user>Yiqun</user>
  <text>👍</text>
</message>
<message conversation_id="14">
  <ts>2019-11-12T01:26:51.715000</ts>
  <user>Suleiman</user>
  <text>I'm still waiting on Thanksgiving vacation so I can start the game jam :p</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:38:30.901000</ts>
  <user>Twyla</user>
  <text>Is there a higherorder function that traverses through a list but operates in pairs?</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:39:14.878000</ts>
  <user>Twyla</user>
  <text>Like `(foo f (a b c d e))` → `(list (f a b) (f b c) (f c d) (f d e))`</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:39:43.245000</ts>
  <user>Suleiman</user>
  <text>there isn't one builtin but you can do it relatively easily with for comprehensions</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:40:53.455000</ts>
  <user>Suleiman</user>
  <text>```(for/list ([x (inlist lst)] [y (inlist (rest lst))]) (f x y))```</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:41:57.741000</ts>
  <user>Twyla</user>
  <text>Ah I didn't think of using `for`.</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:42:05.401000</ts>
  <user>Twyla</user>
  <text>I was going through SRFI1 to find something close.</text>
</message>
<message conversation_id="15">
  <ts>2019-11-12T18:42:07.789000</ts>
  <user>Twyla</user>
  <text>Thanks!</text>
</message>
<message conversation_id="16">
  <ts>2019-11-13T02:50:58.602000</ts>
  <user>Yiqun</user>
  <text>work</text>
</message>
<message conversation_id="15">
  <ts>2019-11-13T06:14:26.010000</ts>
  <user>Suleiman</user>
  <text>whatcha makin?</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:37:16.827000</ts>
  <user>Yiqun</user>
  <text>HUD type monitoring thing</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:37:59.022000</ts>
  <user>Yiqun</user>
  <text>I actually already did this once as a console app but it\'s pretty messy. This time trying to do it right</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:43:14.074000</ts>
  <user>Yiqun</user>
  <text>The main monitoring routine is like a stateful World program. It get's a bunch of things. Then updates them periodically. Each one has a rendering routine and there is a routine to merge all of the renders.```(runhud  (&gt; (Sequence T))  #:update! (&gt; T any)  #:draw (&gt; T pict?)  #:layout (&gt; pict? ... pict?))```</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:44:54.929000</ts>
  <user>Yiqun</user>
  <text>The particular one above is just rendering plots with a random lines. It adds a new random point every 2 seconds and keeps 2 minutes of data.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:46:06.583000</ts>
  <user>Yiqun</user>
  <text>It is not quite 200 LOC (including a lot of scaffolding that I need to move out of the core) which is very satisfying.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:47:22.881000</ts>
  <user>Suleiman</user>
  <text>That is super cool</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:47:40.633000</ts>
  <user>Suleiman</user>
  <text>any way to see it in action as an animated gif or something?</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:52:42.991000</ts>
  <user>Suleiman</user>
  <text>Also today I wrote some code for analyzing the scribble cross reference index and I was _very_ pleased with transducer performance. Even though I was doing expensive things like sorting because I was aggregating filtering and summarizing the data the lazy and onepass nature of the `transduce` pipelines I wrote actually made the stream processing pretty fast. Much faster than it takes to just load the index with `loadcollectionsxref`.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T06:54:44.027000</ts>
  <user>Suleiman</user>
  <text>some code:</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:00:53.618000</ts>
  <user>Yiqun</user>
  <text>I forgot I have licecap on this computer.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:01:13.726000</ts>
  <user>Yiqun</user>
  <text>None</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:07:35.295000</ts>
  <user>Suleiman</user>
  <text>I love it</text>
</message>
<message conversation_id="18">
  <ts>2019-11-13T07:27:02.971000</ts>
  <user>Yiqun</user>
  <text>Initially it was going to look more modernish but then I started set the font to a monospaced font and realized this is how it should look.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:35:54.461000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam Unrelated just had a neat transducers idea: https://github.com/jackfirth/rebellion/issues/347</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:35:59.458000</ts>
  <user>Suleiman</user>
  <text>whatcha think?</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:37:19.291000</ts>
  <user>Yiqun</user>
  <text>Yes. This is good.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:37:39.419000</ts>
  <user>Suleiman</user>
  <text>Got a use case in mind?</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:38:13.532000</ts>
  <user>Yiqun</user>
  <text>Not quite yet.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:41:11.449000</ts>
  <user>Suleiman</user>
  <text>I'm putting together a list of all the listprocessing functions in Racket's standard library because I want to work towards getting `rebellion/streaming` to feature parity with it</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:41:36.076000</ts>
  <user>Suleiman</user>
  <text>and I came up with the idea for `forking` as a way to implement stuff like `splitat` and `partition`</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:46:54.506000</ts>
  <user>Suleiman</user>
  <text>Hypothetical `splittingat` transducer:```(define (splittingat position beforetransducer aftertransducer) (define (before? e) (&lt; (enumeratedposition e) position)) (transducerpipe enumerating (taggingbypredicate #:before before? #:after (negate before?)) (forking #:before beforetransducer #:after aftertransducer) (mapping variantvalue)))```Example:```&gt; (transduce (inrange 0 100) (splittingat 50 (taking 5) (taking 3)) #:into intolist)(list 0 1 2 3 4 50 51 52)```</text>
</message>
<message conversation_id="17">
  <ts>2019-11-13T07:48:39.825000</ts>
  <user>Suleiman</user>
  <text>Huh that is some wacky formatting and I have no idea why discord is doing that</text>
</message>
<message conversation_id="19">
  <ts>2019-11-13T11:17:18.314000</ts>
  <user>Yanelly</user>
  <text>Hey is anyone working on gamejam</text>
</message>
<message conversation_id="19">
  <ts>2019-11-13T15:25:55.964000</ts>
  <user>Yanelly</user>
  <text>@notjack I asked on rustlang discord and they said &gt; `ctrl+r` to reload they seem to have (hot)fixed it</text>
</message>
<message conversation_id="20">
  <ts>2019-11-13T16:02:28.227000</ts>
  <user>Yiqun</user>
  <text>Weird the formatting was fine for me the whole time (on Windows and Mac clients)</text>
</message>
<message conversation_id="21">
  <ts>2019-11-16T08:50:48.039000</ts>
  <user>Amri</user>
  <text>@notjack How are you supposed to work with comparators? It seems like you have to pattern match on everything.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:18:44.217000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders What sort of operation are you trying to do?</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:20:28.801000</ts>
  <user>Amri</user>
  <text>less than or equal. Right now I've got two layers of conditions and am using `(not (eq? cmp lesser))` or similar.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:21:35.627000</ts>
  <user>Amri</user>
  <text>```racket(let ([lower (rangelower range)]) (cond [(eq? lower unbounded) #t] [else (define cmp (compare comparator (boundvalue lower) value)) (if (boundincl lower) (not (eq? cmp greater)) (eq? cmp lesser))]))```</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:22:19.148000</ts>
  <user>Amri</user>
  <text>Ideally there would something like `(compare&lt;= comparator a b)` which would return a boolean.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:23:03.069000</ts>
  <user>Suleiman</user>
  <text>That looks about right to me yes. (But use `equal?` not `eq?`. You pretty much never want `eq?`.)</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:23:28.404000</ts>
  <user>Suleiman</user>
  <text>It's wordy. There's three ways the situation could be improved:</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:24:38.278000</ts>
  <user>Amri</user>
  <text>I've been using `eq?` for identity.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:28:53.754000</ts>
  <user>Suleiman</user>
  <text>1. Add support for pattern matching with `racket/match` so you could do `(match (compare comparator x y) [greater ...] [lesser ...])` or whatnot.2. Add comparison functions like `compare&lt;=`. Personally I'm not super excited at the idea because I _constantly_ screw up the argument order of the `&lt;` / `&gt;` / `&lt;=` / `&gt;=` functions particularly when used with two arguments where one is a constant and the other is a variable. It's a very bugprone API.3. Ask people to use comparators indirectly via things like `sorting` `intomax` / `intomin` and the range API. I think if these use cases are all addressed out of the box by Rebellion it will be very rare to actually _need_ to use comparators directly. So I lean towards this route.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:30:17.498000</ts>
  <user>Suleiman</user>
  <text>Don't bother using `eq?` for identity. Just use `equal?` everywhere the only time it won't do what you want is when comparing Racket's builtin mutable data structures. And I think it was a mistake to make mutable vectors / mutable lists / mutable hashes / etc. compare as `equal?` when they have the same elements but can be mutated independently.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T09:31:44.206000</ts>
  <user>Suleiman</user>
  <text>More background on the eq? / equal? / eqv? / = situation in racket: https://github.com/racket/rhombusbrainstorming/issues/16</text>
</message>
<message conversation_id="22">
  <ts>2019-11-16T17:40:19.085000</ts>
  <user>Yanelly</user>
  <text>=tex \\int_0^{2\\pi} \\sin{(4\\theta)} \\mathrm{d}\\theta</text>
</message>
<message conversation_id="22">
  <ts>2019-11-16T17:40:21.799000</ts>
  <user>Anakin</user>
  <text>None</text>
</message>
<message conversation_id="22">
  <ts>2019-11-16T17:42:27.904000</ts>
  <user>Yanelly</user>
  <text>we now have mathbot if you don't know it you can type =help for instructions</text>
</message>
<message conversation_id="22">
  <ts>2019-11-16T19:35:35.770000</ts>
  <user>Yiqun</user>
  <text>@WillBAnders @notjack I've considered conservatively adding some of https://srfi.schemers.org/srfi67/srfi67.html and https://docs.racketlang.org/data/Orders_and_Ordered_Dictionaries.html?q=data%2Fcompare features to comparators</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T21:07:38.430000</ts>
  <user>Suleiman</user>
  <text>Hmmm. What about something like this:```racket(compareusing string&lt;=&gt; ["foo &lt; x &lt;= bar"])```</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T21:08:02.381000</ts>
  <user>Suleiman</user>
  <text>Just don't even try to make it a function?</text>
</message>
<message conversation_id="23">
  <ts>2019-11-16T22:14:34.527000</ts>
  <user>Nyriah</user>
  <text>that's what I was saying (with fewer parens and it could be a function but being a function isn't the point)</text>
</message>
<message conversation_id="23">
  <ts>2019-11-16T22:20:33.368000</ts>
  <user>Nyriah</user>
  <text>Can't remember where I said it. Anyway it's my favorite option maybe with keywords for #:&lt;= etc.</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T22:24:54.023000</ts>
  <user>Suleiman</user>
  <text>Definitely don't make it look like a function</text>
</message>
<message conversation_id="23">
  <ts>2019-11-16T22:37:42.061000</ts>
  <user>Nyriah</user>
  <text>yeah those parens are good at visually separating the `string&lt;=&gt;` argument from the infix part so it doesn\'t look like the arguments to `&lt;` are `compareusing string&lt;=&gt; foo"` and `x`</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T22:42:11.887000</ts>
  <user>Suleiman</user>
  <text>Also thinking about indentation</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T22:43:49.639000</ts>
  <user>Suleiman</user>
  <text>Want to avoid this:```(compareusing string&lt;=&gt; foo" &lt;= x)```</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T22:47:15.402000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam Sorted sets dicts multisets and multidicts would be a wonderful thing to have in Rebellion</text>
</message>
<message conversation_id="23">
  <ts>2019-11-16T22:52:31.732000</ts>
  <user>Yiqun</user>
  <text>Oh I was just talking about comparison procedures/syntax</text>
</message>
<message conversation_id="23">
  <ts>2019-11-16T22:53:17.033000</ts>
  <user>Yiqun</user>
  <text>I'll have to think more about `sorted` structures</text>
</message>
<message conversation_id="17">
  <ts>2019-11-16T22:57:30.065000</ts>
  <user>Suleiman</user>
  <text>There's plenty to do 🙂</text>
</message>
<message conversation_id="23">
  <ts>2019-11-17T00:41:54.337000</ts>
  <user>Nyriah</user>
  <text>I would prefer not to use infix for things that span more than one line but `compareusing string&lt;=&gt;` probably is long enough that things will often be pushed off the end</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T01:06:38.729000</ts>
  <user>Suleiman</user>
  <text>It would be handy to search for as many usages as possible of racket's `string&lt;?` / `&gt;=` / `symbol&lt;=?` / etc. procedures to get a sense of how likely it is that a comparatorbased version would line wrap</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T07:26:00.137000</ts>
  <user>Suleiman</user>
  <text>So `compose` combines functions in righttoleft order. This is hard to read compared to lefttoright order but there's no builtin function for that. What would a good name for lefttoright composition be?</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T07:27:52.794000</ts>
  <user>Suleiman</user>
  <text>Things I've considered: `pipe` like you're sticking them together endtoend in a pipe `thrush` like the thrush combinator from To Mock a Mockingbird. Not a fan of this one anymore it's inscrutable. `fuse` meaning the same thing as `pipe` but it reads more clearly as a verb to me</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T07:29:42.128000</ts>
  <user>Suleiman</user>
  <text>```racket(define foo1 (pipe abs sqrt number&gt;string))(define foo2 (fuse abs sqrt number&gt;string))```</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T08:25:19.412000</ts>
  <user>Suleiman</user>
  <text>Setup of Rebellion's scribble docs is taking eight minutes and counting 😢</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T08:52:37.494000</ts>
  <user>Suleiman</user>
  <text>oh for god's sake the problem was I wrote a oneoff script for querying scribble's crossreference index with `(loadcollectionsxref)` and I put that script in the rebellion/private folder so when raco setup was evaluating my scribble examples it somehow ended up trying to repeatedly reload the entire scribble cross reference table into memory several hundred times</text>
</message>
<message conversation_id="17">
  <ts>2019-11-17T08:53:03.380000</ts>
  <user>Suleiman</user>
  <text>document build time before I removed the script: 20+ minutesdocument build time after I removed the script: 2 minutes</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:48:24.430000</ts>
  <user>Nyriah</user>
  <text>hooray! sounds like it'll be a lot more pleasant to develop the docs now XD</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:49:14.070000</ts>
  <user>Nyriah</user>
  <text>the name I've been using for lefttoright composition is `chain`</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:58:44.061000</ts>
  <user>Nyriah</user>
  <text>Haskell uses `&gt;&gt;&gt;` (and probably some others as well)... category theory uses a semicolon... looks like Scala uses `andThen`</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:59:00.922000</ts>
  <user>Suleiman</user>
  <text>`andThen` is what java and rust use too I think</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:59:27.936000</ts>
  <user>Suleiman</user>
  <text>but that name really only works if its infix</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:59:46.636000</ts>
  <user>Suleiman</user>
  <text>`(andthen foo bar baz)` just looks bizarre</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T10:59:51.111000</ts>
  <user>Nyriah</user>
  <text>yeah all of those are infix names</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T11:01:04.574000</ts>
  <user>Suleiman</user>
  <text>oh by the way transducer composition is merged now so you ought to be able to get a sorting transducer working :p</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T11:02:01.403000</ts>
  <user>Nyriah</user>
  <text>the name `pipe` seems good to me especially for transducers since they've got input streams and output streams (even if they're not the port style of stream)</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T11:02:33.837000</ts>
  <user>Nyriah</user>
  <text>that's awesome :) I'll look into it sometime in the next few days</text>
</message>
<message conversation_id="24">
  <ts>2019-11-17T11:03:49.920000</ts>
  <user>Suleiman</user>
  <text>my recommendation is to wait until the package server renders the docs for it :p</text>
</message>
<message conversation_id="25">
  <ts>2019-11-17T20:15:27.129000</ts>
  <user>Yiqun</user>
  <text>`pipe` and `thrush` are the first that come to mind. I prefer `pipe` myself</text>
</message>
<message conversation_id="25">
  <ts>2019-11-17T20:16:05.359000</ts>
  <user>Yiqun</user>
  <text>The only reason I think `thrush` is because of doing FP for a while</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:12:55.597000</ts>
  <user>Yanelly</user>
  <text># 2019 Racket Advent of Code Leaderboard[Advent of Code](https://adventofcode.com/) is a fun contest to practice your Racket skills show off your Racket prowess and encourage others to explore the world of Language Oriented Programming. The contest starts December 1st and continues to Christmas (December 25.)This year I\'ve organized a leaderboard for Racket enthusiasts. If you would like to participate use the leaderboard key below. Advent of Code Leaderboard Key: 22197a7a01707  Slack (invite link https://racketslack.herokuapp.com/):  #adventofcodeCheers,Sam</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:13:34.434000</ts>
  <user>Yanelly</user>
  <text>(Copied from Racketusers)</text>
</message>
<message conversation_id="25">
  <ts>2019-11-18T22:14:36.560000</ts>
  <user>Yiqun</user>
  <text>Thanks @StephenD !</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:20:10.923000</ts>
  <user>Yanelly</user>
  <text>Pinned a message.</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:21:51.106000</ts>
  <user>Yiqun</user>
  <text>@StephenD can we pin a link to how to join the Discord server? I've been unable to find it on my own.</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:28:05.173000</ts>
  <user>Yanelly</user>
  <text>https://discord.gg/6Zq8sH5</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:28:30.337000</ts>
  <user>Yanelly</user>
  <text>all they need is the link</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T22:32:37.628000</ts>
  <user>Yiqun</user>
  <text>Yes that's the part I couldn't find</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T23:14:00.259000</ts>
  <user>Yanelly</user>
  <text>https://racketnews.com/2019/11/racketnewsissue20.html</text>
</message>
<message conversation_id="26">
  <ts>2019-11-18T23:14:09.474000</ts>
  <user>Yanelly</user>
  <text>Pinned a message.</text>
</message>
<message conversation_id="26">
  <ts>2019-11-19T05:13:09.533000</ts>
  <user>Ahsan</user>
  <text>ooOoh a racket server</text>
</message>
<message conversation_id="27">
  <ts>2019-11-19T06:01:02.839000</ts>
  <user>Suleiman</user>
  <text>oOoOo</text>
</message>
<message conversation_id="27">
  <ts>2019-11-19T07:21:59.452000</ts>
  <user>Serenityrose</user>
  <text>morning</text>
</message>
<message conversation_id="27">
  <ts>2019-11-19T07:23:01.552000</ts>
  <user>Serenityrose</user>
  <text>i'm starting with Racket and logged into IRC channel but wonder how active is slack channel (although i prefer discord over slack)?</text>
</message>
<message conversation_id="27">
  <ts>2019-11-19T07:54:06.931000</ts>
  <user>Suleiman</user>
  <text>The slack is more active than this discord. I think it's also more active than the irc but I'm not sure.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:12:48.452000</ts>
  <user>Yanelly</user>
  <text>https://www.reddit.com/r/Racket/comments/dy9czt/whats_everyone_working_on_this_week_472019/?utm_source=share&amp;utm_medium=ios_app&amp;utm_name=iossmf</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:30:12.396000</ts>
  <user>Serenityrose</user>
  <text>@notjack hmm...it would be good to integrate communication...</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:31:24.273000</ts>
  <user>Suleiman</user>
  <text>I think it's okay that they're separate. The platforms might seem redundant but the user bases don't overlap as much as you'd think.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:32:20.073000</ts>
  <user>Yanelly</user>
  <text>I miss the slack/irc integration.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:33:29.067000</ts>
  <user>Suleiman</user>
  <text>Me too</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:33:44.999000</ts>
  <user>Suleiman</user>
  <text>I haven't been in the irc at all since the bridge went away</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:35:13.797000</ts>
  <user>Suleiman</user>
  <text>unrelated transducers are making me sorely miss methodstyle function calls:```(intotransduced (taking 5) (mapping foo) #:into intolist)taking(5).andThen(mapping(foo)).andInto(intoList)```</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:36:05.956000</ts>
  <user>Yanelly</user>
  <text>Why not have both?</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:36:54.658000</ts>
  <user>Suleiman</user>
  <text>maybe we will eventually!</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:37:06.564000</ts>
  <user>Suleiman</user>
  <text>an sexp API and a Rhombus API</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:38:54.946000</ts>
  <user>Yanelly</user>
  <text>I’m not religious about it. I don’t see a problem with Racket 1 (continuing ) to evolve.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:39:14.525000</ts>
  <user>Yanelly</user>
  <text>I think it will anyway.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:39:34.633000</ts>
  <user>Suleiman</user>
  <text>Oh I'm certain it's gonna be more fork than replacement</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:39:53.124000</ts>
  <user>Suleiman</user>
  <text>or maybe not fork so much as library"?</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:40:19.411000</ts>
  <user>Suleiman</user>
  <text>`#lang` makes things that look like community splits actually not splits at all</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:40:29.747000</ts>
  <user>Yanelly</user>
  <text>It’s a great strength that there is no difference</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:40:52.347000</ts>
  <user>Yanelly</user>
  <text>But a problem that most don’t seem to understand this</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:41:11.954000</ts>
  <user>Suleiman</user>
  <text>Gonna have to teach by example I suppose</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:43:06.871000</ts>
  <user>Yanelly</user>
  <text>I think you are right  no one will believe it until racket itself is a mix of racket and rhombus just like it is currently a mix of typed and untyped racket</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:43:42.495000</ts>
  <user>Suleiman</user>
  <text>Yup. Even when I tell people that racket is a mix of typed and untyped code and the type system is a library... it takes a few repetitions for that to actually sink in.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:43:47.904000</ts>
  <user>Suleiman</user>
  <text>what that _means_</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:44:26.650000</ts>
  <user>Suleiman</user>
  <text>It's one of those things that sort of breaks some very fundamental assumptions people make about how programming languages work</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:44:42.347000</ts>
  <user>Yanelly</user>
  <text>To be fair  it is completely alien and doesn’t exist in any other language ecosystem</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:44:47.624000</ts>
  <user>Suleiman</user>
  <text>That too</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:45:20.542000</ts>
  <user>Suleiman</user>
  <text>the closest thing is like those extra type checkers you can run over annotated code but those are _tools_ and you have to like figure out how to set them up with your build system and your editor and your package manager and god knows what else</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:45:34.981000</ts>
  <user>Suleiman</user>
  <text>a lot of people assume typed racket is like that too</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:48:25.213000</ts>
  <user>Yanelly</user>
  <text>I’m just thankful I found Racket. I’ve learnt a lot.</text>
</message>
<message conversation_id="28">
  <ts>2019-11-19T08:48:47.763000</ts>
  <user>Suleiman</user>
  <text>Me too 🙂</text>
</message>
<message conversation_id="29">
  <ts>2019-11-19T10:36:30.834000</ts>
  <user>Serenityrose</user>
  <text>_just decided to learn/use Racket for desktop gui app...instead of Eiffel 😇_</text>
</message>
<message conversation_id="29">
  <ts>2019-11-19T10:37:29.722000</ts>
  <user>Serenityrose</user>
  <text>..but i wonder if I should wait for Rhombus 😕 😉</text>
</message>
<message conversation_id="30">
  <ts>2019-11-19T13:19:33.874000</ts>
  <user>Yanelly</user>
  <text>@gour Rhombus is in an early brainstorming phase that is specifically about the design of the language  the syntax and semantics . I’m guessing it will be 23 years before anything called Rohmbus will be available. Certainly nothing in the near future.</text>
</message>
<message conversation_id="30">
  <ts>2019-11-19T13:23:08.805000</ts>
  <user>Yanelly</user>
  <text>@gour it will also be fully compatible with Racket and use the Racket crossplatform gui toolkit  so there is no benefit to waiting</text>
</message>
<message conversation_id="30">
  <ts>2019-11-19T14:05:57.555000</ts>
  <user>Yanelly</user>
  <text>@notjack https://www.reddit.com/r/Racket/comments/dybh3q/racket_news_issue_20_racket_75_is_almost_here/f81bmu1/?utm_source=share&amp;utm_medium=ios_app&amp;utm_name=iossmf</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T14:28:57.174000</ts>
  <user>Malichi</user>
  <text>Slack is significantly more active than IRC</text>
</message>
<message conversation_id="29">
  <ts>2019-11-19T15:19:20.878000</ts>
  <user>Serenityrose</user>
  <text>@StephenD yeah i saw the Rhombus roadmap'...was just joking know when i decided to use Racket...but I did miss the info about compatibility with Racket  that's good to know!!</text>
</message>
<message conversation_id="29">
  <ts>2019-11-19T15:20:03.417000</ts>
  <user>Serenityrose</user>
  <text>@samth thanks. i'll leave IRC then...</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T17:20:58.604000</ts>
  <user>Yiqun</user>
  <text>@notjack my $.02 I like the current transducer syntax better than a dot syntax.</text>
</message>
<message conversation_id="32">
  <ts>2019-11-19T18:36:46.022000</ts>
  <user>Suleiman</user>
  <text>@StephenD yup I saw that person post about those on the scheme subreddit a while ago and we got to talking</text>
</message>
<message conversation_id="32">
  <ts>2019-11-19T18:37:45.052000</ts>
  <user>Suleiman</user>
  <text>I still have no idea at all what they mean when they say their transducers are lazy and mine are eager. As far as I can tell they're both lazy.</text>
</message>
<message conversation_id="32">
  <ts>2019-11-19T18:37:54.768000</ts>
  <user>Yanelly</user>
  <text>Haha</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T19:29:56.806000</ts>
  <user>Yiqun</user>
  <text>I'm dealing with a python program I wrote a few years back this morning that essentially has a halfassed implementation of transducers in it.</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T19:43:02.527000</ts>
  <user>Yiqun</user>
  <text>None</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T19:44:00.357000</ts>
  <user>Yiqun</user>
  <text>I probably have an implementation that is closer to transducers where I overload the pipe operator.</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T19:44:48.705000</ts>
  <user>Yiqun</user>
  <text>That is actually really explicit about passing around the data that is being munged</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T19:49:53.271000</ts>
  <user>Yiqun</user>
  <text>If this script didn't have a bunch of scary additional parsing code (hidden inside `fixup_records`) this would be a good script to try to port to use transducers.</text>
</message>
<message conversation_id="33">
  <ts>2019-11-19T20:31:38.437000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam is this what inspired that retrosheets repository you made recently?</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T21:20:47.775000</ts>
  <user>Yiqun</user>
  <text>No that is a bit of experiment for a hypothetical game jam entry that I probably won't finish in time but will probably hack around the edges of for 25 years</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T21:55:18.614000</ts>
  <user>Yanelly</user>
  <text>FWIW as of right now these channels claim the following numbers</text>
</message>
<message conversation_id="34">
  <ts>2019-11-19T21:55:27.883000</ts>
  <user>Yanelly</user>
  <text>/r/racket 24</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T21:55:37.651000</ts>
  <user>Yanelly</user>
  <text>racket discord 9</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T21:55:43.553000</ts>
  <user>Yanelly</user>
  <text>slack 3</text>
</message>
<message conversation_id="35">
  <ts>2019-11-19T22:03:53.610000</ts>
  <user>Suleiman</user>
  <text>Slack 3???</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T22:04:54.783000</ts>
  <user>Yiqun</user>
  <text>Yeah that's surprising</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T22:07:04.490000</ts>
  <user>Yiqun</user>
  <text>@StephenD `#racket: Total of 137 nicks`</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T22:07:08.522000</ts>
  <user>Yiqun</user>
  <text>that's IRC</text>
</message>
<message conversation_id="35">
  <ts>2019-11-19T22:07:42.252000</ts>
  <user>Jozee</user>
  <text>Perhaps not a lot of people idle there but instead check it now and then?Discord is a lot easier to just leave open for other servers</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T22:08:52.075000</ts>
  <user>Suleiman</user>
  <text>Maybe a better metric would be something like number of distinct message / post authors in the last hour</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T22:09:00.353000</ts>
  <user>Yiqun</user>
  <text>True.</text>
</message>
<message conversation_id="31">
  <ts>2019-11-19T22:09:18.827000</ts>
  <user>Yiqun</user>
  <text>For IRC there were 2 people in since I last looked.</text>
</message>
<message conversation_id="36">
  <ts>2019-11-19T23:19:44.303000</ts>
  <user>Yanelly</user>
  <text>https://racket.slack.com/stats#overview</text>
</message>
<message conversation_id="36">
  <ts>2019-11-19T23:20:45.057000</ts>
  <user>Yanelly</user>
  <text>these stats are all a bit rubbish.</text>
</message>
<message conversation_id="37">
  <ts>2019-11-20T00:00:34.177000</ts>
  <user>Yiqun</user>
  <text>Too bad it doesn't look like the stats go back to when Matthew announced Racket2/Rhombus</text>
</message>
<message conversation_id="38">
  <ts>2019-11-20T08:19:02.910000</ts>
  <user>Serenityrose</user>
  <text>7.5 is out...CS is still beta...</text>
</message>
<message conversation_id="38">
  <ts>2019-11-20T08:22:59.183000</ts>
  <user>Suleiman</user>
  <text>Oh God it's finally out now `rebellion/type` can actually work correctly with drracket's binding arrows</text>
</message>
<message conversation_id="37">
  <ts>2019-11-20T18:09:32.804000</ts>
  <user>Yiqun</user>
  <text>Goodbye old Rackets</text>
</message>
<message conversation_id="38">
  <ts>2019-11-20T21:48:14.481000</ts>
  <user>Yiqun</user>
  <text>Chat anecdote: my wife's friend is the Chair of the CS/Math Department at a nearby University and doesn't do Discord Slack or any other chat because it is too easy for students to harass him.</text>
</message>
<message conversation_id="37">
  <ts>2019-11-20T22:15:28.221000</ts>
  <user>Jozee</user>
  <text>A couple of professors at my university use Discord. Thankfully I've never heard about anything like that happening but the risk is definitely there.</text>
</message>
<message conversation_id="39">
  <ts>2019-11-20T22:23:44.387000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam (I\'m assuming you meant harass as in pester for help on homework and not something like actively stalk")</text>
</message>
<message conversation_id="39">
  <ts>2019-11-20T22:31:14.150000</ts>
  <user>Yiqun</user>
  <text>Well....</text>
</message>
<message conversation_id="39">
  <ts>2019-11-20T22:32:16.122000</ts>
  <user>Yiqun</user>
  <text>Apparently his gaming vice of choice is World of Warcraft so I joked Professor J\'s office hours are 45 fighting Orcs.</text>
</message>
<message conversation_id="37">
  <ts>2019-11-20T23:50:03.508000</ts>
  <user>Yanelly</user>
  <text>I'm not that familiar with discord and its protections. I know you can block people and mark yourself as invisible. I was sort of assuming it was battletested due to being popular in with game communities.</text>
</message>
<message conversation_id="39">
  <ts>2019-11-20T23:57:57.659000</ts>
  <user>Suleiman</user>
  <text>There's the usual banning and kicking features as well</text>
</message>
<message conversation_id="39">
  <ts>2019-11-20T23:58:13.756000</ts>
  <user>Suleiman</user>
  <text>also muting</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:02:09.641000</ts>
  <user>Yanelly</user>
  <text>More pressing matters: only 9 days left in the gamejam!</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:04:02.797000</ts>
  <user>Suleiman</user>
  <text>😮</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:04:15.681000</ts>
  <user>Suleiman</user>
  <text>my vacation starts tuesday next week</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:06:44.875000</ts>
  <user>Janaiah</user>
  <text>Sweet!</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:08:48.317000</ts>
  <user>Yanelly</user>
  <text>Have a good vacation!</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:11:13.154000</ts>
  <user>Jozee</user>
  <text>My vacation starts then too</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:12:01.601000</ts>
  <user>Jozee</user>
  <text>I'm hoping to start really delving into learning Racket then. Perhaps sooner if I can! I've only been able to play around thus far</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:12:23.118000</ts>
  <user>Yanelly</user>
  <text>If anyone who isn't going on vacation is interested there is a distinct lack of Frogger style games.</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:12:43.615000</ts>
  <user>Suleiman</user>
  <text>Oh I was planning to start a game during my vacation :p sounds like fun</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:14:04.109000</ts>
  <user>Yanelly</user>
  <text>If you are not familiar with frogger just think of a 2d crossy road with a top down perspective</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T00:17:57.386000</ts>
  <user>Yanelly</user>
  <text>this is a python example https://github.com/WireframeMagazine/Wireframe27</text>
</message>
<message conversation_id="40">
  <ts>2019-11-21T01:02:57.843000</ts>
  <user>Yiqun</user>
  <text>If you are not familiar with frogger ... that makes me feel old. :p</text>
</message>
<message conversation_id="39">
  <ts>2019-11-21T08:49:56.437000</ts>
  <user>Yanelly</user>
  <text>Submissions due in7days2hours9minutes57secondsJoin jamhttps://itch.io/jam/racket2019gamejam</text>
</message>
<message conversation_id="41">
  <ts>2019-11-23T08:59:31.960000</ts>
  <user>Amri</user>
  <text>Sigh. Getting really tired of the complexity of Racket's macro system especially with the lack of types documentation and effective error messages. The less functional languages I work with the better.</text>
</message>
<message conversation_id="41">
  <ts>2019-11-23T10:28:43.862000</ts>
  <user>Amri</user>
  <text>@notjack Honestly I can't believe this even works.```racket(define r (range #:incl 1 10 #:cmp real&lt;=&gt; #:dom integers))```I'll clean it up an append a commit sometime in the next day or two with some info + updates.</text>
</message>
<message conversation_id="39">
  <ts>2019-11-25T08:49:27.258000</ts>
  <user>Twyla</user>
  <text>I had to port my project from Racket to Hy. 😔</text>
</message>
<message conversation_id="39">
  <ts>2019-11-25T08:49:44.912000</ts>
  <user>Twyla</user>
  <text>I really need Python libraries so it can't be helped.</text>
</message>
<message conversation_id="39">
  <ts>2019-11-25T08:50:39.811000</ts>
  <user>Yanelly</user>
  <text>Which python libraries?</text>
</message>
<message conversation_id="42">
  <ts>2019-11-25T09:03:54.316000</ts>
  <user>Twyla</user>
  <text>Tensorflow &amp; Keras</text>
</message>
<message conversation_id="41">
  <ts>2019-11-27T08:44:24.093000</ts>
  <user>Amri</user>
  <text>@notjack Clarification on contracts please: Something like `range?` is simply `predicate/c` as it's `(&gt; any/c boolean?)`. If I have something that's `(&gt; range? boolean?)` would I write it like that each time or should I use `predicate/c` or is there something else I should do instead?</text>
</message>
<message conversation_id="43">
  <ts>2019-11-27T19:06:26.441000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders Correct. Use `predicate/c` instead of `(&gt; any/c boolean?)`.</text>
</message>
<message conversation_id="43">
  <ts>2019-11-27T19:08:01.931000</ts>
  <user>Amri</user>
  <text>Right. And then in the other case testing shows that `predicate/c` isn't right which makes sense.</text>
</message>
<message conversation_id="41">
  <ts>2019-11-28T02:13:36.348000</ts>
  <user>Amri</user>
  <text>I think I'm making a mistake.</text>
</message>
<message conversation_id="44">
  <ts>2019-11-28T09:32:35.175000</ts>
  <user>Twyla</user>
  <text>Haha</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:18:15.367000</ts>
  <user>Suleiman</user>
  <text>doin some Advent of Code with Rebellion!</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:18:45.321000</ts>
  <user>Suleiman</user>
  <text>puzzle 1 part 1 solution using transducer pipeline:</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:18:52.618000</ts>
  <user>Yanelly</user>
  <text>nice</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:19:57.090000</ts>
  <user>Amri</user>
  <text>I've been chilling with Elixir on things. Need to set up some type of base library to help me to get through things quickly.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:20:51.130000</ts>
  <user>Yanelly</user>
  <text>I've discovered from the programminglanguages discord server that it is possible to bridge discord server channels to irc(freenode) is this desirable? (I'm assuming slack/irc bridge gone forever)</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:22:29.265000</ts>
  <user>Suleiman</user>
  <text>I think it's worth trying at the least</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:22:40.047000</ts>
  <user>Amri</user>
  <text>Indeed. You're in there now too?</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:24:19.870000</ts>
  <user>Yanelly</user>
  <text>I've joined the the programminglanguages discord server yes.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:24:54.681000</ts>
  <user>Suleiman</user>
  <text>what server is that?</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:26:17.676000</ts>
  <user>Yanelly</user>
  <text>Do you want me to dig up the invite?</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:26:23.096000</ts>
  <user>Yanelly</user>
  <text>/website?</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:31:31.148000</ts>
  <user>Amri</user>
  <text>https://proglangdesign.net</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:32:01.091000</ts>
  <user>Amri</user>
  <text>It's a server for discussing programming languages generally design and implementation. Most of the people there are creating their own languages and such.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:33:31.811000</ts>
  <user>Suleiman</user>
  <text>I might hop into that one later today</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:33:40.010000</ts>
  <user>Suleiman</user>
  <text>right now tho I'm about to head onto a plane</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:33:49.782000</ts>
  <user>Suleiman</user>
  <text>also I just finished day 1 part 2 of AoC 😄</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:33:50.284000</ts>
  <user>Yanelly</user>
  <text>Yes but it seems more about compiler implementation than the HCI side of things. (my interest)</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:34:22.714000</ts>
  <user>Yanelly</user>
  <text>But don't take my word for it  I've only ever looked briefly  so I havn't discarded it.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:34:40.269000</ts>
  <user>Amri</user>
  <text>There's things for both. I'd actually say it's less to do with compiler implementation and much more to do with design.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:35:46.451000</ts>
  <user>Yanelly</user>
  <text>@WillBAnders I'll have to spend some time there. And maybe look at the reddit too.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:35:57.611000</ts>
  <user>Amri</user>
  <text>no idea what happens with reddit</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:37:37.017000</ts>
  <user>Yanelly</user>
  <text>https://www.reddit.com/r/ProgrammingLanguages/ some design stuff.</text>
</message>
<message conversation_id="43">
  <ts>2019-12-02T21:38:34.988000</ts>
  <user>Suleiman</user>
  <text>Oh I'm in that subreddit already nice</text>
</message>
<message conversation_id="45">
  <ts>2019-12-02T22:01:53.750000</ts>
  <user>Yiqun</user>
  <text>PL people are either kooks or sober grounded engineers.</text>
</message>
<message conversation_id="45">
  <ts>2019-12-02T22:02:12.423000</ts>
  <user>Yiqun</user>
  <text>This is based on twenty years of observation</text>
</message>
<message conversation_id="45">
  <ts>2019-12-02T22:03:22.434000</ts>
  <user>Yiqun</user>
  <text>The scheme community has a similar problem.</text>
</message>
<message conversation_id="45">
  <ts>2019-12-02T22:03:40.743000</ts>
  <user>Yiqun</user>
  <text>those are my hot takes of the day</text>
</message>
<message conversation_id="45">
  <ts>2019-12-03T19:14:02.713000</ts>
  <user>Suleiman</user>
  <text>The day 2 advent of code problem has me wishing that rebellion included a decent persistent vector API</text>
</message>
<message conversation_id="45">
  <ts>2019-12-04T10:23:57.324000</ts>
  <user>Twyla</user>
  <text>I finished day 1 part 1 of AoC. I've just recently started to program</text>
</message>
<message conversation_id="45">
  <ts>2019-12-04T10:25:38.159000</ts>
  <user>Twyla</user>
  <text>Not going to attempt the others</text>
</message>
<message conversation_id="46">
  <ts>2019-12-04T10:34:46.951000</ts>
  <user>Twyla</user>
  <text>Why not?</text>
</message>
<message conversation_id="46">
  <ts>2019-12-04T12:26:33.856000</ts>
  <user>Twyla</user>
  <text>They seem a bit advanced we'll see</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T18:18:33.909000</ts>
  <user>Suleiman</user>
  <text>The day 2 one seemed like a weirdly sudden jump in complexity</text>
</message>
<message conversation_id="48">
  <ts>2019-12-04T18:44:59.432000</ts>
  <user>Yiqun</user>
  <text>Yeah</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:26:02.878000</ts>
  <user>Suleiman</user>
  <text>Record type pattern matching idea: `(person name age)` as a synonym for `(person #:name name #:age age)`</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:27:30.788000</ts>
  <user>Suleiman</user>
  <text>Hmmm. Or maybe `(person p)` as a synonym for `(person #:name p.name #:age p.age)`.</text>
</message>
<message conversation_id="48">
  <ts>2019-12-04T21:32:13.903000</ts>
  <user>Yiqun</user>
  <text>rebellion struct records or record records?</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:32:35.288000</ts>
  <user>Suleiman</user>
  <text>The former</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:35:59.027000</ts>
  <user>Suleiman</user>
  <text>Rebellion really needs pattern matching</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:36:11.482000</ts>
  <user>Yiqun</user>
  <text>Yes.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:36:29.301000</ts>
  <user>Yiqun</user>
  <text>I cobbled together a `variant` matcher somewhere</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:36:36.747000</ts>
  <user>Suleiman</user>
  <text>(advent of code is harshly reminding me of this every day)</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:36:54.637000</ts>
  <user>Suleiman</user>
  <text>Yes! I think it was in your gist of using rebellion in anger</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:36:59.199000</ts>
  <user>Suleiman</user>
  <text>Super good idea</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:38:04.565000</ts>
  <user>Yiqun</user>
  <text>From a macro reftransparency angle I kinda hate `(person p)` but ergonomically I love it.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:38:40.533000</ts>
  <user>Suleiman</user>
  <text>Tell me more about your hate 😛</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:38:57.206000</ts>
  <user>Yiqun</user>
  <text>You don't totally know what names are getting bound</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:39:24.787000</ts>
  <user>Yiqun</user>
  <text>I guess `syntaxparse` classes with attributes are about the same though</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:40:09.966000</ts>
  <user>Suleiman</user>
  <text>Nesting would be tricky too</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:41:15.164000</ts>
  <user>Suleiman</user>
  <text>How to bind `p.favoritecolor.redcomponent`?</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:44:04.348000</ts>
  <user>Suleiman</user>
  <text>At the least I think `(typename #:fieldname fieldpattern ...)` is a useful core pattern to build more complex sugar on top of</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:50:10.104000</ts>
  <user>Yiqun</user>
  <text>Yes</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:50:53.302000</ts>
  <user>Yiqun</user>
  <text>Record names don't bind any static information?</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:51:02.828000</ts>
  <user>Yiqun</user>
  <text>Last I remember seeing anyway...</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T21:53:58.793000</ts>
  <user>Suleiman</user>
  <text>Not yet</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T22:06:31.888000</ts>
  <user>Suleiman</user>
  <text>my current plan is to first add a system for making it easier to bind static information</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T22:07:08.078000</ts>
  <user>Suleiman</user>
  <text>since there are a lot of other kinds of static info I want to throw around including basic function arity information so I can finally have a damn static arity checker</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T22:07:52.670000</ts>
  <user>Yiqun</user>
  <text>expansion time transducer protocol</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T22:07:57.535000</ts>
  <user>Suleiman</user>
  <text>that too</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T22:14:27.216000</ts>
  <user>Suleiman</user>
  <text>I\'ve been calling the system syntax annotations and it works like this: An annotation is a pair of an annotation type and an identifier. That identifier must be bound with `definesyntax` to a value (the _annotation value_) and that value must satisfy a contract defined by the annotation type. You can add annotations to an identifier using `(makeannotationtransformer originalid annotationtype annotationid ... ...)` which makes a syntax transformer that\'s basically just a rename transformer that points to `originalid`. So `syntaxlocalvalue` will still work and ignore annotations. You can get annotations by using something like `(identifierannotation id annotationtype)` which finds the `annotationid` for that type on the identifier and then calls `syntaxlocalvalue` on it to extract the value.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-04T22:14:56.948000</ts>
  <user>Suleiman</user>
  <text>So basically every identifier just gets an extensible expansiontime hashmap you can stick stuff into and the keys hold contracts that their corresponding values have to satisfy.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T07:35:36.058000</ts>
  <user>Suleiman</user>
  <text>day 5 advent of code reactions: gasp! Intcode is back!</text>
</message>
<message conversation_id="49">
  <ts>2019-12-05T15:33:26.170000</ts>
  <user>Yiqun</user>
  <text>By the end of this years advent of code you will have implemented MacLisp for your intcode machine.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T18:55:54.927000</ts>
  <user>Suleiman</user>
  <text>mflatt asked me to write a proposal for transducers in Rhombus!!</text>
</message>
<message conversation_id="49">
  <ts>2019-12-05T19:14:13.274000</ts>
  <user>Yiqun</user>
  <text>neato</text>
</message>
<message conversation_id="49">
  <ts>2019-12-05T19:15:29.207000</ts>
  <user>Yiqun</user>
  <text>I've kinda fallen off following Rhombus. I think they have a lot of good ideas for core but I feel like the standard lib could use improvements.</text>
</message>
<message conversation_id="49">
  <ts>2019-12-05T19:15:46.639000</ts>
  <user>Yiqun</user>
  <text>Like most of the networking stuff is ... not great</text>
</message>
<message conversation_id="49">
  <ts>2019-12-05T19:16:20.458000</ts>
  <user>Yiqun</user>
  <text>(of course stdlib improvements can be done without a new core language)</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T20:12:57.638000</ts>
  <user>Suleiman</user>
  <text>Stdlib improvements would be wonderful</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T21:44:36.409000</ts>
  <user>Yanelly</user>
  <text>@oaktownsam what’s missing/weak in Net ?https://docs.racketlang.org/net/index.html</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T21:48:37.601000</ts>
  <user>Suleiman</user>
  <text>so _so_ many things</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T21:49:10.361000</ts>
  <user>Yanelly</user>
  <text>Ok</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T21:49:21.378000</ts>
  <user>Yanelly</user>
  <text>What’s the worst omission</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T21:58:24.691000</ts>
  <user>Yiqun</user>
  <text>I can only comment on what I've used.The basic HTTP client in `net/url` is not good. `net/httpclient` is better but you have to roll your own message objects or somesuch. Neither support cookies (not that I'm a cookie fan but in the world we need to use cookies.)`net/head` is not a good (IMO) representation for RFC822 headers`net/smtp` only works for sending a message`net/imap` good the few times I've had to use it. (except it uses `net/head`)</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T21:59:14.079000</ts>
  <user>Yiqun</user>
  <text>Not that other languages libraries are better. Most of the builtin networking libs in Python have similar problems but there are good replacements in the community (`requests` comes to mind.)</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T22:00:56.277000</ts>
  <user>Yiqun</user>
  <text>I have a web library based on some ideas I've had python's `requests` library and the HTTP library that @notjack has on the pkg server.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T22:03:50.902000</ts>
  <user>Yiqun</user>
  <text>Other stdlib thought I think there is some nice unixy things that are either not there obscured or used in a OS neutral way. Like file notifications.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T22:06:38.719000</ts>
  <user>Suleiman</user>
  <text>just some decent data types would go a long way to improve the situation</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T22:06:57.886000</ts>
  <user>Yiqun</user>
  <text>tru</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T22:07:25.091000</ts>
  <user>Suleiman</user>
  <text>Like a `header?` type that casenormalized the keys and checked that keys and values are legal bytes</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T22:08:33.772000</ts>
  <user>Suleiman</user>
  <text>Also the clientside stuff is very awkward to use. The `call/inputurl` + `getpureport` / `getimpureport` / `purifyport` combination is so painful and completely unnecessary</text>
</message>
<message conversation_id="47">
  <ts>2019-12-05T23:26:37.776000</ts>
  <user>Suleiman</user>
  <text>random thought: sometimes the most impressive thing a library can do is not surprise you</text>
</message>
<message conversation_id="47">
  <ts>2019-12-06T00:03:23.363000</ts>
  <user>Amri</user>
  <text>Did some socket stuff in Java and it sucks.</text>
</message>
<message conversation_id="50">
  <ts>2019-12-06T00:03:57.360000</ts>
  <user>Amri</user>
  <text>if you open the input stream before the output stream it hangs.</text>
</message>
<message conversation_id="47">
  <ts>2019-12-06T00:07:38.158000</ts>
  <user>Suleiman</user>
  <text>oh dear</text>
</message>
<message conversation_id="51">
  <ts>2019-12-06T00:55:41.687000</ts>
  <user>Twyla</user>
  <text>Amazing.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T04:12:52.986000</ts>
  <user>Twyla</user>
  <text>I put together a silly little script to try out `charterm` only to find out it doesn't support colours so I had to hack that in myself.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T04:13:03.889000</ts>
  <user>Twyla</user>
  <text>https://gist.github.com/erkin/f3a4edb23fb11744926faeed77ea9124</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T04:14:02.019000</ts>
  <user>Twyla</user>
  <text>So technically it only gets the terminal width from `charterm` and nothing else.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T05:59:33.557000</ts>
  <user>Twyla</user>
  <text>Boo it's pointless. I'll just replace it with a call to `stty`.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T06:15:03.211000</ts>
  <user>Yiqun</user>
  <text>I found charterm lacking</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T06:33:35.378000</ts>
  <user>Twyla</user>
  <text>I appreciate the effort put into making it compatible with a lot of platforms but there isn't much to use.</text>
</message>
<message conversation_id="53">
  <ts>2019-12-06T16:45:09.045000</ts>
  <user>Yanelly</user>
  <text>Honu: Lisp with Algol Syntax (2012) [pdf] | Hacker Newshttps://news.ycombinator.com/item?id=21721163</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T18:17:32.938000</ts>
  <user>Twyla</user>
  <text>The comments seem to be more or less on the negative side.</text>
</message>
<message conversation_id="53">
  <ts>2019-12-06T18:54:34.469000</ts>
  <user>Suleiman</user>
  <text>Yup</text>
</message>
<message conversation_id="53">
  <ts>2019-12-06T19:12:31.150000</ts>
  <user>Yanelly</user>
  <text>That sounds like HN.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T20:17:42.826000</ts>
  <user>Yiqun</user>
  <text>None</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T22:31:08.327000</ts>
  <user>Yiqun</user>
  <text>More re: stdlib stuff I think there are things that have been released as part of the core download that should not be there/moved into separate packages. Things like honu (which I conceptually like a lot and believe it is valuable research) are in the main distribution and probably shouldn't be.</text>
</message>
<message conversation_id="54">
  <ts>2019-12-06T22:38:11.068000</ts>
  <user>Suleiman</user>
  <text>Also the `racket/base` module itself could use a lot of splitting up</text>
</message>
<message conversation_id="52">
  <ts>2019-12-06T23:00:12.452000</ts>
  <user>Yiqun</user>
  <text>I'll defer to `racket/base` experts on that one. There lies a twisty set of requires and bootstrapping.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-07T00:23:04.376000</ts>
  <user>Yanelly</user>
  <text>there are a couple of plugins in DrRacket that should be off by default.</text>
</message>
<message conversation_id="55">
  <ts>2019-12-07T04:50:42.713000</ts>
  <user>Twyla</user>
  <text>Huh I never realised Honu is in the main distribution.</text>
</message>
<message conversation_id="55">
  <ts>2019-12-07T04:51:29.786000</ts>
  <user>Twyla</user>
  <text>Ah it's not it seems.</text>
</message>
<message conversation_id="55">
  <ts>2019-12-07T04:51:34.270000</ts>
  <user>Twyla</user>
  <text>At least not on my end.</text>
</message>
<message conversation_id="56">
  <ts>2019-12-07T05:12:39.831000</ts>
  <user>Rosemberg</user>
  <text>Anyone doing AoC day five do you know if opcodes 3 and 4 are also configurable with a mode?</text>
</message>
<message conversation_id="52">
  <ts>2019-12-07T05:33:06.558000</ts>
  <user>Suleiman</user>
  <text>@sodaplayer I think they are except the output parameters:&gt; Parameters that an instruction writes to will never be in immediate mode.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-07T05:33:36.270000</ts>
  <user>Suleiman</user>
  <text>(I'm about to try day 5 myself)</text>
</message>
<message conversation_id="52">
  <ts>2019-12-07T05:37:04.849000</ts>
  <user>Rosemberg</user>
  <text>Ahh I think I have a clearer idea now. I was confused for a bit. I wasn't sure if something like `3,0` meant save the input at position `0` or save the input at the value in position `0` so `3`</text>
</message>
<message conversation_id="52">
  <ts>2019-12-07T05:38:39.835000</ts>
  <user>Rosemberg</user>
  <text>So the results being`input,0` vs `3,0,,input` But I suppose the former matches Day 2 semanticsAhh this helps:https://www.reddit.com/r/adventofcode/comments/e7adao/2019_day_5_question_about_what_counts_as_an_opcode/f9wtvxy/</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T06:29:59.360000</ts>
  <user>Suleiman</user>
  <text>feature wishlist inspired by advent of code: data types for numbers packed together as separate digits of a single number</text>
</message>
<message conversation_id="58">
  <ts>2019-12-07T06:34:34.710000</ts>
  <user>Suleiman</user>
  <text>hypothetical example:```(definepackedintegertype instructiontype (thirdparametermode #:width 1 #:default 0) (secondparametermode #:width 1 #:default 0) (firstparametermode #:width 1 #:default 0) (opcode #:width 2))&gt; (decodeinstructiontype 1002)(instructiontype #:opcode 2 #:firstparametermode 0 #:secondparametermode 1 #:thirdparametermode 2)```</text>
</message>
<message conversation_id="59">
  <ts>2019-12-07T07:38:35.269000</ts>
  <user>Yiqun</user>
  <text>Make it so you can adjust the base. So base10 packed binary packeted nybble packed.</text>
</message>
<message conversation_id="52">
  <ts>2019-12-07T07:43:44.480000</ts>
  <user>Yiqun</user>
  <text>@Deleted User You're right I think honu got moved out a couple years ago. I swear it was there.</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T07:46:09.688000</ts>
  <user>Suleiman</user>
  <text>Adjustable base is definitely good idea</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T07:46:29.813000</ts>
  <user>Suleiman</user>
  <text>I think I lean towards just picking a few standard bases rather than making the API baseagnostic</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T07:46:49.730000</ts>
  <user>Suleiman</user>
  <text>like `definepackedintegertype` / `definepackedbytestringtype` / `definepackedbitstringtype`</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T07:47:03.810000</ts>
  <user>Suleiman</user>
  <text>(or maybe `definepackedbytestype`)</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T09:19:45.642000</ts>
  <user>Suleiman</user>
  <text>I made a transducer that runs an Intcode program!```(transduce (list 1) (executingintcodeprogram programtext) #:into intolist)```</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T09:20:22.877000</ts>
  <user>Suleiman</user>
  <text>you give it a sequence of inputs to the program and it produces the program's sequence of outputs</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T09:20:41.892000</ts>
  <user>Suleiman</user>
  <text>(for the day 5 version of the intcode machine that is)</text>
</message>
<message conversation_id="60">
  <ts>2019-12-07T10:25:22.396000</ts>
  <user>Rosemberg</user>
  <text>Do you have any favorite resources for explaining what a transducer is? I vaguely remember hearing a Clojure talk mention them but I don’t remember what they do</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T10:29:18.502000</ts>
  <user>Suleiman</user>
  <text>There's the announcement post I made about the transducers library that gives a quick overview: https://groups.google.com/forum/#!msg/racketusers/AxNC_9Xivlo/HGr5wq6CAQAJ</text>
</message>
<message conversation_id="61">
  <ts>2019-12-07T17:38:45.217000</ts>
  <user>Yanelly</user>
  <text>@notjack you should add the quick overview from your announcement to https://docs.racketlang.org/rebellion/Transducers.html</text>
</message>
<message conversation_id="57">
  <ts>2019-12-07T17:55:03.775000</ts>
  <user>Suleiman</user>
  <text>Yup</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T05:53:31.035000</ts>
  <user>Twyla</user>
  <text>Dealing with so much Python made me appreciate the beauty of Racket once again.</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T05:53:52.716000</ts>
  <user>Twyla</user>
  <text>The library support is almost worse for basic things I've grown to take for granted.</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T05:54:15.384000</ts>
  <user>Twyla</user>
  <text>It just has a lot of thirdparty libraries because it's popular.</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T05:54:27.410000</ts>
  <user>Twyla</user>
  <text>That's pretty much the only upside I've seen.</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T05:59:30.071000</ts>
  <user>Twyla</user>
  <text>Maybe it's because I spent so much time with sexps but I think Python's syntax is actually super clunky. It tries to look clean by sweeping a lot of semantic baggage under the rug with things like tuples encourages repetitive and verbose code constantly mixes highlevel and lowlevel code in the same library and will go out of its way to sabotage your attempts to work around its opinionated semantics.</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T06:01:58.928000</ts>
  <user>Twyla</user>
  <text>A lot of its features that people sing praises of are actually hackish workarounds of its limitations.</text>
</message>
<message conversation_id="62">
  <ts>2019-12-08T08:27:46.538000</ts>
  <user>Suleiman</user>
  <text>This is my (least?) favorite example of Python fully and purposefully committing to being fucking _whack_: https://stackoverflow.com/questions/29268892/python3exceptiondeletesvariableinenclosingscopeforunknownreason</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T08:49:55.180000</ts>
  <user>Amri</user>
  <text>```Exceptions are cleared because with the traceback attached to them they form a reference cycle with the stack frame keeping all locals in that frame alive until the next garbage collection occurs.```I don't have the background to understand the solution space here but there's definitely some reason behind it. Personally I would just require unique names but whatev. Not a fan of dynamic languages anyways.</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T08:56:21.699000</ts>
  <user>Suleiman</user>
  <text>Yeah the thing that\'s whack to me is that they committed to no variables in `except` clauses are tied to function scope `except` doesn\'t introduce a new scope</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T09:00:20.460000</ts>
  <user>Amri</user>
  <text>¯\\_(ツ)_/¯</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T09:00:27.377000</ts>
  <user>Amri</user>
  <text>python's scope is wack</text>
</message>
<message conversation_id="61">
  <ts>2019-12-08T09:00:39.478000</ts>
  <user>Amri</user>
  <text>C/++ does this with switch cases as well</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T09:57:58.795000</ts>
  <user>Twyla</user>
  <text>Even with Hy I couldn\'t get around Python\'s my way or highway attitude.</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T09:58:54.753000</ts>
  <user>Twyla</user>
  <text>I still need to rely on `for` over `range` and `enumerate` to loop without shooting myself in the foot even for something as simple as `foreach`.</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T10:02:56.304000</ts>
  <user>Twyla</user>
  <text>Hy's `lfor` is a neat macro on top of Python's list comprehensions and I can poke and prod it until it resembles `for/list`.</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T10:03:49.029000</ts>
  <user>Twyla</user>
  <text>```Hy(lfor path (.iterdir (Path songdirectory)) :if (.is_file path) :setv song (readsong path) :if (not (none? song)) song)```</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T10:05:30.200000</ts>
  <user>Twyla</user>
  <text>I realised I could just do `song` in place of `(not (none? song))` since `None` is falsy.</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T10:10:28.504000</ts>
  <user>Twyla</user>
  <text>This is the pretty part. The grotty part follows:We have no `match` Hy uses a verbose `(get collection index)` in place of `collection[index]` resulting in this mess:```Hy(lfor ( line0 line1) (zip lines (rest lines)) :if (and (in (get line0 1) usefulnotes) ; Only take note lines (in (get line1 1) usefulnotes)) (makenote (int (get line0 4)) ; Holdrian comma (int (get line0 10)) ; Velocity (round (float (get line0 12)) 2) ; Offset (round ( (float (get line1 12)) ; Duration (float (get line0 12))) 2)))```</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T10:13:46.219000</ts>
  <user>Twyla</user>
  <text>Also `x y = foo` becomes `(setv ( x y) foo)` and `x[y] = bar` becomes `(setv (get x y) bar)` which meld into noise in nested loops.```Hy(defn readbatch [notes uniques] (setv batch (int (/ (get notes.shape 0) batchsize)) ; Batch shape batchcount (range 0 ( batch sequencelength) sequencelength)) (for [start batchcount] ; Batch (setv x (np.zeros ( batchsize sequencelength)) y (np.zeros ( batchsize sequencelength uniques))) (for [index (range batchsize)] ; Batch row (for [i (range sequencelength)] ; Batch column (setv (get x ( index i)) (get notes (+ start i ( index batch)))) (setv (get y ( index i (get notes (+ start i 1 ( index batch))))) 1))) (yield ( x y))))```</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T10:15:48.243000</ts>
  <user>Twyla</user>
  <text>Using Hy to get Python to look better is like the cartoon gag of stomping on a bump in the carpet to flatten it only for another one to appear elsewhere. :(</text>
</message>
<message conversation_id="64">
  <ts>2019-12-08T17:25:48.925000</ts>
  <user>Yanelly</user>
  <text>Is `Hy` _Off Topic_ on this server?</text>
</message>
<message conversation_id="63">
  <ts>2019-12-08T19:22:51.907000</ts>
  <user>Twyla</user>
  <text>Oh sorry my rant went a bit overboard.</text>
</message>
<message conversation_id="64">
  <ts>2019-12-09T07:57:15.012000</ts>
  <user>Suleiman</user>
  <text>I started working on an RFC for stream pipelines powered by transducers and reducers: https://github.com/jackfirth/rhombusbrainstorming/blob/streampipeline/stream_pipelines.md</text>
</message>
<message conversation_id="65">
  <ts>2019-12-09T21:21:44.782000</ts>
  <user>Rosemberg</user>
  <text>Reading up on Transducers a bit more. I'm a bit reminded of Rx stuff. Am I on the right track in understanding them? What's the difference between Rx Observables and them?</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T00:00:45.273000</ts>
  <user>Suleiman</user>
  <text>They're similar. The big difference is that transducers are not concurrent.</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T00:02:10.617000</ts>
  <user>Suleiman</user>
  <text>So you can do stuff like sorting and filtering but you can\'t make a transducer that does something like add a onesecond delay between each element</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T00:05:48.990000</ts>
  <user>Suleiman</user>
  <text>If you're familiar with Rx operators `debounce` and `throttle` are good examples of Rx features that can't be modeled with transducers (nor should they be)</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T00:30:47.454000</ts>
  <user>Yiqun</user>
  <text>This is probably completely different from what you're talking about but ...Couldn't you make a transducer that spawns a thread and is connected to the rest of the pipeline using channels?</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T00:31:46.350000</ts>
  <user>Yiqun</user>
  <text>(or even one that starts a separate place?)</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T00:49:47.884000</ts>
  <user>Suleiman</user>
  <text>You could but please don't :p</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T00:51:21.552000</ts>
  <user>Suleiman</user>
  <text>Doing any sort of communication in the handlers given to `maketransducer` will cause problems</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T00:57:24.600000</ts>
  <user>Suleiman</user>
  <text>(I'm not sure _what_ problems but there will definitely be problems)</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T01:52:12.328000</ts>
  <user>Yiqun</user>
  <text>I tried to make a transducer (for fun") that worked like this (but with continuations):```(magicking  (lambda (read write) ...))```Where the `read : &gt; value` and `write : value &gt; Void` are connected to the callbacks.</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T01:54:28.640000</ts>
  <user>Yiqun</user>
  <text>It's fairly trivial with channels and could be mostly synchronous with the rest of the transducer processes (I think.)Like some things I don't have a usecase so it's not really worth pursuing</text>
</message>
<message conversation_id="64">
  <ts>2019-12-10T02:29:10.905000</ts>
  <user>Suleiman</user>
  <text>does it work like `mapping` where it just alternates between consuming and emitting?</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:33:02.022000</ts>
  <user>Yiqun</user>
  <text>No you could call one or the other. Actually I can see it getting into a weird wedged state.</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:33:09.932000</ts>
  <user>Yiqun</user>
  <text>Anyway not worth doing 🙂</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:33:23.284000</ts>
  <user>Yiqun</user>
  <text>More of a puzzle to see if it could fit.</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:34:35.145000</ts>
  <user>Suleiman</user>
  <text>Ohhhhhh now I see what you're going for</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:35:13.848000</ts>
  <user>Suleiman</user>
  <text>So it'd work like `yield` does in Python coroutines?</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:40:24.552000</ts>
  <user>Yiqun</user>
  <text>yes</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:40:35.924000</ts>
  <user>Yiqun</user>
  <text>Or like a unix process connected to pipes</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:41:22.538000</ts>
  <user>Suleiman</user>
  <text>Yeah that'd be awesome and it should be totally doable</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:50:58.785000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam Can you actually write that idea down in a github issue?</text>
</message>
<message conversation_id="66">
  <ts>2019-12-10T02:56:09.239000</ts>
  <user>Yiqun</user>
  <text>Sure 😄</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T04:35:12.817000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam I spent some time trying to figure out how a continuationbased transducer thingy would work. This gist is as far as I got: https://gist.github.com/jackfirth/027411d567385dadb3202bee75a847b4</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T04:47:19.734000</ts>
  <user>Yiqun</user>
  <text>I'll have to see if I can find what I worked out. It didn't quite work.</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T04:52:14.603000</ts>
  <user>Suleiman</user>
  <text>this is the kind of thing I'd like to end up with:```(define (mapping f) (transducer (let loop () (define next (consume!)) (emit! (f next)) (loop))))```</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:06:25.552000</ts>
  <user>Yiqun</user>
  <text>`consume!` and `emit!` would be local? or syntax?</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:09:05.843000</ts>
  <user>Suleiman</user>
  <text>Syntax parameters</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:09:36.481000</ts>
  <user>Suleiman</user>
  <text>Also `(define f consume!)` shouldn't work</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:12:53.786000</ts>
  <user>Suleiman</user>
  <text>I think</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:47:42.826000</ts>
  <user>Yiqun</user>
  <text>Ok. You want to ensure the coroutine/continuation bits don't escape.</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:48:58.734000</ts>
  <user>Yiqun</user>
  <text>Ugh I'm writing something right now where this would be handy...</text>
</message>
<message conversation_id="66">
  <ts>2019-12-11T19:55:10.157000</ts>
  <user>Suleiman</user>
  <text>Whatcha writing?</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:22:27.230000</ts>
  <user>Nyriah</user>
  <text>Even with syntax parameters like those they can escape in all the same ways. Are there ways of escaping you want to prevent?</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:23:05.790000</ts>
  <user>Nyriah</user>
  <text>oh I missed the `(define f consume!)` thing</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:25:18.560000</ts>
  <user>Nyriah</user>
  <text>should `(foreach (lambda (item) (emit! item)) lst)` work?</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:27:31.698000</ts>
  <user>Nyriah</user>
  <text>or `(define (f x) (emit! x))`?</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:31:02.540000</ts>
  <user>Suleiman</user>
  <text>I don't plan on preventing those. Maybe it's not worth bothering to prevent `(define f emit!)` either then.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:31:54.838000</ts>
  <user>Suleiman</user>
  <text>I was looking more for a way to avoid surprising people who are used to things like `yield` and `return` not being actual functions</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:32:09.204000</ts>
  <user>Nyriah</user>
  <text>I think I wouldn't prevent it</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:32:52.485000</ts>
  <user>Nyriah</user>
  <text>in your example `loop` itself is a function that captures `emit!` and `consume!` and can let them escape</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:36:18.006000</ts>
  <user>Nyriah</user>
  <text>I think if you want to enforce that `yield` only works directly within its body like JavaScript (maybe Python and C# too?) then that's possible by designing forms like `lambda` and `define` and `let` so that they unbind `consume!` and `emit!` (or if unbinding them isn't possible then at least binding them to things that cause errors)</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:36:31.648000</ts>
  <user>Suleiman</user>
  <text>I get that yeah</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:37:58.503000</ts>
  <user>Nyriah</user>
  <text>hmm essentially the point of that restriction is to make the power of `yield` be equivalent to a local CPS translation rather than needing a run time model of continuations</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:38:02.038000</ts>
  <user>Suleiman</user>
  <text>I was vaguely imagining some distant future where there's a way for macros to communicate control flow information about their subexpressions so you could 1) enforce that stuff doesn't escape or 2) statically optimize continuations away</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:38:27.309000</ts>
  <user>Suleiman</user>
  <text>like a type system but for control flow</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:38:58.671000</ts>
  <user>Nyriah</user>
  <text>yeah statically optimizing this would be nifty</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:39:17.954000</ts>
  <user>Suleiman</user>
  <text>I think there's no point trying to halfway (more like tenthway) enforce that though</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:39:41.087000</ts>
  <user>Suleiman</user>
  <text>So sure higher order `emit!` and `consume!` sounds good</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:46:51.112000</ts>
  <user>Nyriah</user>
  <text>Hmm I think `consume!` should return an option value unless you don't want these to be able to emit things after they're halfclosed</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:47:22.325000</ts>
  <user>Suleiman</user>
  <text>Oh right good idea</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:51:10.958000</ts>
  <user>Nyriah</user>
  <text>There was a generator library I wrote for Arc once... and I put in an operation for defining a generator in `yield` style using continuations</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:51:40.059000</ts>
  <user>Nyriah</user>
  <text>and the performance was just bad enough that I decided not to implement anything with that operation</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T20:53:48.821000</ts>
  <user>Nyriah</user>
  <text>so I do expect the same kind of disappointment here. Maybe there's a way to use local expansion with a stop list so that `consume!` and `emit!` are really turned into CPS style</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:01:56.856000</ts>
  <user>Suleiman</user>
  <text>Yeah I'm fully expecting the performance of this to be atrocious.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:02:21.273000</ts>
  <user>Suleiman</user>
  <text>I'm not going to use it to implement any of the built in transducers</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:03:11.739000</ts>
  <user>Suleiman</user>
  <text>But it will help me get quick and dirty implementations made when I'm experimenting and I bet it will help teach people how transducers work.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:12:14.738000</ts>
  <user>Yiqun</user>
  <text>@notjack nothing fancy consuming a sequence of rebellion/record with heterogenous fields and having it normalize the fields filling the missing with a `missingvalue`. In a direct style/coroutine transducer I could just write one loop to consume and track the field names and another loop to emit the normalized records.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:12:40.468000</ts>
  <user>Yiqun</user>
  <text>In the current one I have to think about how it decomposes into the state machine</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:12:54.393000</ts>
  <user>Yiqun</user>
  <text>which isn't hard just a little less natural</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:21:28.176000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam is filling in missing values the only kind of normalizing or are there other steps too?</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:22:22.158000</ts>
  <user>Suleiman</user>
  <text>also that sounds like `mapping` would work  is there state needed in order to normalize them?</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:23:54.438000</ts>
  <user>Yiqun</user>
  <text>Yes it needs to have seen all of the fields.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:24:24.657000</ts>
  <user>Yiqun</user>
  <text>It actually needs to do a full pass over the data before it emits</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:28:23.998000</ts>
  <user>Suleiman</user>
  <text>Huh why is that? (Wondering if there should be a transducer helper here)</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:28:44.604000</ts>
  <user>Suleiman</user>
  <text>Oh right because it doesn't know what's missing until it's seen everything</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:36:18.649000</ts>
  <user>Yiqun</user>
  <text>yeah</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:36:44.514000</ts>
  <user>Yiqun</user>
  <text>It was either new transducer or hack a copy of `intotable`</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:37:04.912000</ts>
  <user>Yiqun</user>
  <text>Transducer seemed easier to do.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:46:03.416000</ts>
  <user>Suleiman</user>
  <text>Maybe there could be a transducer in `rebellion/collection/record` that fills in missing fields like that</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:48:22.806000</ts>
  <user>Yiqun</user>
  <text>Oh I have that part</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:48:30.361000</ts>
  <user>Yiqun</user>
  <text>already from something else</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:50:13.980000</ts>
  <user>Yiqun</user>
  <text>`(ensurefields [#:missing any] (sequence/c keyword?)) &gt; (record &gt; record)`</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:50:48.568000</ts>
  <user>Yiqun</user>
  <text>Not a transducer but easy to call from `mapping`</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T21:54:39.718000</ts>
  <user>Yiqun</user>
  <text>The last time I did this I just had to normalize to a static set. So I used `(mapping (ensurefields ...))`This time was more ... dynamic.Here's what I worked out:https://gist.github.com/samdphillips/e140877368c94658b102a9e4cb2a1ee7</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T22:05:00.737000</ts>
  <user>Suleiman</user>
  <text>What I was thinking was a transducer like `addingmissingrecordfields` that consumed all the records determined the total set of field names then emitted the records with values replaced by `option`s to indicate whether they were originally present or not.</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T22:07:17.579000</ts>
  <user>Yiqun</user>
  <text>that is a possibility. I know personally the first step after that I would just unwrap the options and put a sentinel for the `absents`s</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T22:07:36.967000</ts>
  <user>Suleiman</user>
  <text>Related idea: a `(bufferingall [into (reducer/c any? (sequence/c any?))]) &gt; transducer?` function</text>
</message>
<message conversation_id="67">
  <ts>2019-12-11T22:25:49.293000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam where did the data come from such that it has arbitrary fields you don't know up front?</text>
</message>
<message conversation_id="68">
  <ts>2019-12-11T22:26:33.647000</ts>
  <user>Suleiman</user>
  <text>some sort of extensible schemaless storage system or something?</text>
</message>
<message conversation_id="68">
  <ts>2019-12-11T22:32:17.914000</ts>
  <user>Yiqun</user>
  <text>Configuration files. It's not that they're unknown it's just for day to day work it's easier to treat them as having an unknown schema and then having the system work it out.Also sometimes the files are in the same format but different schema.</text>
</message>
<message conversation_id="68">
  <ts>2019-12-11T22:33:42.365000</ts>
  <user>Suleiman</user>
  <text>Ah that makes sense. Are you the one who decides what goes in those files? Or is that up to other people?</text>
</message>
<message conversation_id="68">
  <ts>2019-12-11T22:43:07.062000</ts>
  <user>Yiqun</user>
  <text>It's enterprise software so the file design is out of my hands. I just can use whatever I want to manipulate it.</text>
</message>
<message conversation_id="68">
  <ts>2019-12-11T22:47:43.800000</ts>
  <user>Suleiman</user>
  <text>Gotcha</text>
</message>
<message conversation_id="68">
  <ts>2019-12-12T04:02:07.787000</ts>
  <user>Suleiman</user>
  <text>I put together a basic microbenchmarking system!</text>
</message>
<message conversation_id="68">
  <ts>2019-12-12T04:03:48.850000</ts>
  <user>Suleiman</user>
  <text>This version might be easier to read</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:28:45.703000</ts>
  <user>Jirah</user>
  <text>You know I saw a thread a couple months ago on hacker news that Racket 2.0 might not be a Lisp to get more investors. Is that still a thing?</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:40:10.371000</ts>
  <user>Yanelly</user>
  <text>I believe it is definitely on the cards. But it important to remember that ‘lisp’ Racket won’t go away and it has had multiple major changes including splitting away from scheme because it is a language engineering platform. You can still run the code from The Little Schemer HTDP 1st Ed. or SICP. The rhombusbrainstorming github repository is where it is being worked through https://github.com/racket/rhombusbrainstorming/blob/master/resources/goals.md</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:41:08.110000</ts>
  <user>Suleiman</user>
  <text>It\'s less racket2 won\'t be a lisp and more there\'s going to be a new language you can choose to use instead of racket just like how you can choose to use typed racket instead of normal racket</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:41:33.171000</ts>
  <user>Suleiman</user>
  <text>and it definitely has nothing to do with investors or anything like that</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:43:24.278000</ts>
  <user>Yanelly</user>
  <text>A new language on racket is more like changing your boots. Contrast that to almost any other language (C++ Python Perl) where it is more like open heart surgery.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:44:30.506000</ts>
  <user>Yanelly</user>
  <text>Plus the core team are massive ‘Lispheads’(M Flatt admitted to this live on stage)</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:45:36.442000</ts>
  <user>Jirah</user>
  <text>Hahaha yeah for sure. I was looking into C++ Schemes to put on top of Unreal 4 and the set up for the ones I looked at are all a real nightmare.Well that's all good to hear then</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:46:25.280000</ts>
  <user>Yanelly</user>
  <text>(And they build languages like I collect stamps!  the main dist comes with Algol68!)</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:46:34.101000</ts>
  <user>Jirah</user>
  <text>Hahaha</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:46:54.767000</ts>
  <user>Jirah</user>
  <text>That does seem pretty unnecessary that's hilarious</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:47:56.091000</ts>
  <user>Yanelly</user>
  <text>What about Chez?</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:49:16.055000</ts>
  <user>Yanelly</user>
  <text>https://groups.google.com/forum/m/#!msg/racketdev/2BV3ElyfF8Y/4RSd3XbECAAJ</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:49:20.807000</ts>
  <user>Jirah</user>
  <text>Chez did actually look the best and possibly Bigloo. Guile Scheme was the one that I really didn't like the looks of. In the end I didn't need to implement one at all</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:49:47.787000</ts>
  <user>Yanelly</user>
  <text>M Flatt is building a new racket backend on Chez</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:50:04.822000</ts>
  <user>Jirah</user>
  <text>Ah that's interesting!</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:50:48.900000</ts>
  <user>Yanelly</user>
  <text>What did you end up using instead</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:50:51.054000</ts>
  <user>Jirah</user>
  <text>I'd still kind of want to go through the process of implementing one of those at some point but somebody implemented Python into Unreal 4 and it's crazy mature. I just threw Hy on top of it and it's been working amazingly</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:54:17.534000</ts>
  <user>Suleiman</user>
  <text>totally unrelated: today I am sad because `(transduce somevector #:into intolist)` is about _two thousand times slower_ than `(vector&gt;list somevector)` 😦</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:54:46.672000</ts>
  <user>Suleiman</user>
  <text>(for context see here https://github.com/jackfirth/rebellion/issues/351#issuecomment564909375)</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T08:55:42.558000</ts>
  <user>Jirah</user>
  <text>Hahaha that's rough</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T20:05:54.174000</ts>
  <user>Suleiman</user>
  <text>Atomichron docs available! https://docs.racketlang.org/atomichron/index.html?q=atomichron</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T20:33:02.312000</ts>
  <user>Yiqun</user>
  <text>@notjack it is frustrating because the transducer protocol is actually a nicely elegant way to generalize the streaming problem.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T20:40:05.063000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam agreed. Step 1 is write a bunch of benchmarks I guess.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T21:18:18.874000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam how do you feel about the srfi 171 transducers?</text>
</message>
<message conversation_id="70">
  <ts>2019-12-12T21:21:33.296000</ts>
  <user>Yiqun</user>
  <text>I really haven't looked at them besides reading the spec.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-12T21:27:48.691000</ts>
  <user>Suleiman</user>
  <text>Me neither except I keep running into the person implementing them. Both on Reddit and the mailing list.</text>
</message>
<message conversation_id="70">
  <ts>2019-12-12T21:29:04.176000</ts>
  <user>Yiqun</user>
  <text>I've noticed 🙂</text>
</message>
<message conversation_id="69">
  <ts>2019-12-13T16:14:33.968000</ts>
  <user>Yanelly</user>
  <text>yes he monitors the reddit and pops up whenever I post transducers news. Said he was working on a racket port.</text>
</message>
<message conversation_id="71">
  <ts>2019-12-13T22:21:48.215000</ts>
  <user>Nashly</user>
  <text>are there general design patterns used in lisps? in the ML family I represented state as discriminated unions and matched on that but unsure what's best here. seems like it's pushing me to do something OOesque</text>
</message>
<message conversation_id="71">
  <ts>2019-12-13T22:37:27.824000</ts>
  <user>Suleiman</user>
  <text>I don't think there's many named and wellstudied API design patterns in lisp like there are in Java/c#/c++/etc.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-13T22:39:32.595000</ts>
  <user>Suleiman</user>
  <text>That tends to result from having lots of very largescale codebases and a community of people who do lots of refactoring of legacy code</text>
</message>
<message conversation_id="71">
  <ts>2019-12-13T22:41:18.902000</ts>
  <user>Suleiman</user>
  <text>Pattern matching on an open union (different cases = actually different types of their own) would be my preferred way of doing what you describe</text>
</message>
<message conversation_id="71">
  <ts>2019-12-13T22:43:40.050000</ts>
  <user>Nashly</user>
  <text>what's the best way to make unions in racket</text>
</message>
<message conversation_id="69">
  <ts>2019-12-13T22:48:44.333000</ts>
  <user>Suleiman</user>
  <text>```(struct left (value) #:transparent)(struct right (value) #:transparent)(define (eithercase either lefthandler righthandler) (match either [(left v) (lefthandler v)] [(right v) (righthandler v)]))```</text>
</message>
<message conversation_id="69">
  <ts>2019-12-13T22:48:57.854000</ts>
  <user>Suleiman</user>
  <text>that's how I usually do it</text>
</message>
<message conversation_id="71">
  <ts>2019-12-13T22:48:58.626000</ts>
  <user>Yiqun</user>
  <text>aside: someday the design patterns that exist should probably be documented.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-14T06:12:22.298000</ts>
  <user>Suleiman</user>
  <text>as part of advent of code day 6 I made a graph API for Racket:```(provide (contractout [graph? predicate/c] [emptygraph emptygraph?] [emptygraph? predicate/c] [nonemptygraph? predicate/c] [graphvertices (&gt; graph? set?)] [graphedges (&gt; graph? multidict?)] [graphinsertvertex (&gt; graph? any/c graph?)] [graphinsertvertices (&gt; graph? (sequence/c any/c) graph?)] [graphinsertedge (&gt; (graph? any/c any/c) (#:undirected? boolean?) graph?)] [graphinsertedges (&gt; (graph? (sequence/c entry?)) (#:undirected? boolean?) graph?)] [graphremovevertex (&gt; graph? any/c graph?)] [graphremovevertices (&gt; graph? (sequence/c any/c) graph?)] [graphremoveedge (&gt; (graph? any/c any/c) (#:undirected? boolean?) graph?)] [intoundirectedgraph reducer?] [intodirectedgraph reducer?] [ingraphtopologicalsort (&gt; graph? (sequence/c any/c))] [graphterminalvertices (&gt; graph? set?)] [graphinitialvertices (&gt; graph? set?)] [graphoutgoingedges (&gt; graph? any/c set?)] [graphincomingedges (&gt; graph? any/c set?)] [graphinverse (&gt; graph? graph?)]))```</text>
</message>
<message conversation_id="72">
  <ts>2019-12-14T17:35:46.418000</ts>
  <user>Yiqun</user>
  <text>Functional?</text>
</message>
<message conversation_id="72">
  <ts>2019-12-14T17:52:22.961000</ts>
  <user>Yiqun</user>
  <text>I just made a minimal interface to https://pkgs.racketlang.org/package/graphhttps://github.com/samdphillips/aoc2019/blob/master/06.rkt#L19</text>
</message>
<message conversation_id="72">
  <ts>2019-12-14T18:01:25.921000</ts>
  <user>Yiqun</user>
  <text>@notjack https://github.com/jackfirth/rebellion/issues/192 😄</text>
</message>
<message conversation_id="72">
  <ts>2019-12-14T18:01:49.110000</ts>
  <user>Yiqun</user>
  <text>The best part of making a TODO list is checking things off.</text>
</message>
<message conversation_id="69">
  <ts>2019-12-14T19:45:28.784000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam yup they're persistent immutable graphs!</text>
</message>
<message conversation_id="69">
  <ts>2019-12-14T21:44:52.582000</ts>
  <user>Yiqun</user>
  <text>Nice</text>
</message>
<message conversation_id="69">
  <ts>2019-12-15T10:14:15.213000</ts>
  <user>Suleiman</user>
  <text>So here's an idea</text>
</message>
<message conversation_id="69">
  <ts>2019-12-15T10:15:21.601000</ts>
  <user>Suleiman</user>
  <text>Rust/C++/C/etc. can avoid a lot of work done by GC'd langs by passing around data structures on the stack rather than the heap especially when those structures don't have complex lifetimes</text>
</message>
<message conversation_id="69">
  <ts>2019-12-15T10:15:46.087000</ts>
  <user>Suleiman</user>
  <text>What if `rebellion/type` could fake stack allocation using Racket\'s multiple return values?</text>
</message>
<message conversation_id="69">
  <ts>2019-12-15T10:18:00.202000</ts>
  <user>Suleiman</user>
  <text>So if you had a `point` type with an `x` and a `y` field and a `distance` function accepting two points you could call that function like this:```(distance [point p1] [point p2])```...and that would actually be short for passing the fields directly like this:```(define p1.x p1.y p2.x p2.y)```</text>
</message>
<message conversation_id="69">
  <ts>2019-12-15T10:18:40.201000</ts>
  <user>Suleiman</user>
  <text>and somehow combine that with a `point` constructor that doesn't actually construct a point but instead just returns the two fields as two separate return values</text>
</message>
<message conversation_id="69">
  <ts>2019-12-15T10:20:45.308000</ts>
  <user>Suleiman</user>
  <text>I'm gonna sleep on that thought</text>
</message>
<message conversation_id="73">
  <ts>2019-12-15T19:48:38.484000</ts>
  <user>Yiqun</user>
  <text>I have a half baked http library that is built on `net/httpclient` and while I was working on interfacing to an httpresponse type I was thinking of something like that.</text>
</message>
<message conversation_id="73">
  <ts>2019-12-15T19:49:16.930000</ts>
  <user>Yiqun</user>
  <text>Like how you can avoid the allocation.</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:21:12.423000</ts>
  <user>Nashly</user>
  <text>is there for me to make a scoped block like in c++ or rust</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:21:20.987000</ts>
  <user>Nashly</user>
  <text>without making a local function and executing it</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:22:21.251000</ts>
  <user>Nashly</user>
  <text>```fn fn_name() { { // scope a let a = 0; } { // scope b let a = 3; }}```</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:22:25.191000</ts>
  <user>Nashly</user>
  <text>this kind of thing</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:26:05.755000</ts>
  <user>Amri</user>
  <text>begin?</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:31:40.160000</ts>
  <user>Nashly</user>
  <text>```(define (f) (begin (define a 0)) (begin (define a 1)))```</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:31:42.338000</ts>
  <user>Nashly</user>
  <text>not working</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:31:57.113000</ts>
  <user>Nashly</user>
  <text>they're in the same scope</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T05:40:11.820000</ts>
  <user>Amri</user>
  <text>If you just want something temporary I would go with `let`</text>
</message>
<message conversation_id="75">
  <ts>2019-12-18T05:54:44.912000</ts>
  <user>Yiqun</user>
  <text>```(let ([a 0]) ...)(let ([a 42] ...)```</text>
</message>
<message conversation_id="75">
  <ts>2019-12-18T06:24:21.462000</ts>
  <user>Nashly</user>
  <text>i'm not iterating over a list and i need a lot of variables in each scope</text>
</message>
<message conversation_id="74">
  <ts>2019-12-18T06:24:28.634000</ts>
  <user>Nashly</user>
  <text>can i do something like (let () ...)</text>
</message>
<message conversation_id="75">
  <ts>2019-12-18T06:28:55.600000</ts>
  <user>Amri</user>
  <text>You have a few options depending on what you need:```(let ([a 0] [b 1]) ...)``````(let ([a 0] [b a] ...)```The second allows for earlier bindings to be used.</text>
</message>
<message conversation_id="76">
  <ts>2019-12-18T06:49:09.953000</ts>
  <user>Suleiman</user>
  <text>You can do `(let () ...)`. However there's also `block` from the `racket/block` module:```(define (f) (block (define a 0)) (block (define a 1)))```I find `block` to be more selfdescriptive than `(let () ...)`. With the latter it's not clear to people why you're using the let unless they've seen this trick before.</text>
</message>
<message conversation_id="75">
  <ts>2019-12-18T18:59:23.229000</ts>
  <user>Yiqun</user>
  <text>Very true.</text>
</message>
<message conversation_id="77">
  <ts>2019-12-18T18:59:37.392000</ts>
  <user>Yiqun</user>
  <text>I'm too old and schemey to remember `block`</text>
</message>
<message conversation_id="76">
  <ts>2019-12-18T19:17:15.026000</ts>
  <user>Suleiman</user>
  <text>In practice I never use it either</text>
</message>
<message conversation_id="78">
  <ts>2019-12-21T05:40:58.282000</ts>
  <user>Suleiman</user>
  <text>Does this seem readable?```(definemicrobenchmark (sequencerefbenchmark indexedgetter maker) #:iterations 1000 #:microiterations 100000 (beforeallbenchmarks (define size 100) (define data (buildimmutablevector size values)) (define indices (vector&gt;immutablevector (for/vector #:length numiterations ([_ (innaturals)]) (random size))))) (beforeeachbenchmark (define seq (maker data)) (collectgarbage) (collectgarbage) (collectgarbage)) (beforeeachiteration (define index (vectorref indices currentiteration)))  (indexedgetter seq index))```</text>
</message>
<message conversation_id="78">
  <ts>2019-12-21T05:42:12.768000</ts>
  <user>Suleiman</user>
  <text>The magic bits are `beforeallbenchmarks` `beforeeachbenchmark` `beforeeachiteration` `numiterations` and `currentiteration`. Those are all macros that cooperate with `definemicrobenchmark`.</text>
</message>
<message conversation_id="77">
  <ts>2019-12-21T10:19:38.565000</ts>
  <user>Twyla</user>
  <text>Seems good to me.</text>
</message>
<message conversation_id="78">
  <ts>2019-12-21T18:47:34.113000</ts>
  <user>Yiqun</user>
  <text>👍</text>
</message>
<message conversation_id="79">
  <ts>2019-12-21T22:36:03.632000</ts>
  <user>Yiqun</user>
  <text>Re: `block` I'm actually using it today. But it's not in `racket/base` or `racket` which is a bit nuts</text>
</message>
<message conversation_id="79">
  <ts>2019-12-21T22:56:34.888000</ts>
  <user>Twyla</user>
  <text>Wow `block` is 80 lines.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-21T22:56:38.273000</ts>
  <user>Twyla</user>
  <text>I thought it'd be a simple macro.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:44:58.785000</ts>
  <user>Jirah</user>
  <text>Still using Hy in Unreal 4. It's still amazing. I wish I was working on it right now but instead I've been at the airport waiting for my flight to California for 9 hours with my twin brother</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:47:50.155000</ts>
  <user>Twyla</user>
  <text>Such is life~</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:48:40.346000</ts>
  <user>Jirah</user>
  <text>Yeah I don't mind the delays too much. I'm terrified of flying though</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:48:46.407000</ts>
  <user>Jirah</user>
  <text>I wanna get it over with already</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:49:02.919000</ts>
  <user>Twyla</user>
  <text>Ohh</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:49:24.135000</ts>
  <user>Jirah</user>
  <text>Also we're landing in LAX instead of John Wayne so there's going to be a bunch of people protesting</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:49:28.368000</ts>
  <user>Jirah</user>
  <text>Sounds like a nightmare</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:53:37.996000</ts>
  <user>Twyla</user>
  <text>Xmas traffic sounds horrible.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T13:53:41.363000</ts>
  <user>Twyla</user>
  <text>:meowmas:</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:03:26.932000</ts>
  <user>Twyla</user>
  <text>I've got an idea.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:03:57.020000</ts>
  <user>Twyla</user>
  <text>Prompted by a thread on Mastodon: Top level pattern matching defun à la Haskell and Erlang.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:04:12.443000</ts>
  <user>Twyla</user>
  <text>Like an exploded `define/match`</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:06:05.312000</ts>
  <user>Twyla</user>
  <text>eg```Racket(defun (factorial 0) 1)(defun (factorial n) ( n (factorial (sub1 n))))```</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:10:07.107000</ts>
  <user>Twyla</user>
  <text>Pseudocode algorithm I'm thinking of:```(if (identifierbound? #'name) (let ((oldfunc name)) (set! name (λ args (match args [params body] [else (oldfunc params)]))) (define name (λ args (match args [params body])))))```</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:10:22.702000</ts>
  <user>Twyla</user>
  <text>Probably with `syntaxparse`</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:11:30.451000</ts>
  <user>Twyla</user>
  <text>Has anyone done something like this before?</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:18:43.682000</ts>
  <user>Twyla</user>
  <text>So the original definition becomes something along the lines of```Racket(define factorial (λ args (match args [(list 0) 1])))(let ((old factorial)) (set! factorial (λ args (match args [(list n) ( n (factorial (sub1 n)))] [else (apply oldfac args)]))))```</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:19:35.936000</ts>
  <user>Twyla</user>
  <text>But no wait</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:19:39.932000</ts>
  <user>Twyla</user>
  <text>The precedence matters... hmm</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:20:08.459000</ts>
  <user>Twyla</user>
  <text>If I gave it `(factorial 0)` it'd match it to `n` first and get stuck in a loop.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:22:41.494000</ts>
  <user>Twyla</user>
  <text>I wonder how Haskell handles it. I know Erlang considers procedures of different arities to be entirely different entities.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:22:50.178000</ts>
  <user>Twyla</user>
  <text>Maybe by keeping the patterns in a table?</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T21:24:17.645000</ts>
  <user>Twyla</user>
  <text>Ah right `define/match` is fixed arity too.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T22:51:56.302000</ts>
  <user>Suleiman</user>
  <text>I've wanted that too</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T22:52:56.541000</ts>
  <user>Suleiman</user>
  <text>I wonder if something based on `localexpand` would work like how racket transforms local definitions (with `define`) into nested lets.</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T22:53:48.555000</ts>
  <user>Suleiman</user>
  <text>```(matchcasedefinitions (define (factorial 0) 1) (define (factorial n) ( n (factorial (sub1 n))))```</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T22:54:20.916000</ts>
  <user>Yiqun</user>
  <text>With a fixed number of patterns `match` will save you a list allocation</text>
</message>
<message conversation_id="79">
  <ts>2019-12-22T22:54:23.068000</ts>
  <user>Suleiman</user>
  <text>where `matchcasedefinitions` calls `localexpand` on its body with a stop list looking for inidividual case definitions</text>
</message>
<message conversation_id="80">
  <ts>2019-12-22T23:26:25.532000</ts>
  <user>Twyla</user>
  <text>I wonder if it's possible to make it go through an arbitrarily sorted list of patterns and match the one that fits the best.</text>
</message>
<message conversation_id="80">
  <ts>2019-12-22T23:26:45.394000</ts>
  <user>Twyla</user>
  <text>eg `zero?` is more strict than `number?`</text>
</message>
<message conversation_id="80">
  <ts>2019-12-22T23:26:55.670000</ts>
  <user>Twyla</user>
  <text>I'm sure it'd be much easier with Typed Racket.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:15:33.836000</ts>
  <user>Suleiman</user>
  <text>`syntaxparse` patterns do that</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:02.947000</ts>
  <user>Suleiman</user>
  <text>the pattern matcher records how much progress each pattern makes and selects the pattern that makes the most progress</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:14.661000</ts>
  <user>Twyla</user>
  <text>Oooh</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:21.107000</ts>
  <user>Suleiman</user>
  <text>if none of the patterns match it selects the pattern that made the most progress and uses that one to show the error message</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:26.383000</ts>
  <user>Suleiman</user>
  <text>there's a really neat paper about it</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:30.803000</ts>
  <user>Twyla</user>
  <text>Lovely!</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:40.769000</ts>
  <user>Twyla</user>
  <text>Can you link the paper?</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:16:55.115000</ts>
  <user>Twyla</user>
  <text>I assume it was mflatt's.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:17:34.998000</ts>
  <user>Suleiman</user>
  <text>it's ryan culpepper's (and matthias's) he designed the syntaxparse system</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:17:35.767000</ts>
  <user>Suleiman</user>
  <text>https://www2.ccs.neu.edu/racket/pubs/icfp10cf.pdf</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:18:00.813000</ts>
  <user>Twyla</user>
  <text>Oh I didn't know.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:18:22.466000</ts>
  <user>Twyla</user>
  <text>I know so little about `syntaxparse` now that I think of it.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:18:53.545000</ts>
  <user>Twyla</user>
  <text>I've used `syntaxrules` and `syntaxcase` only for a long time.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:20:07.501000</ts>
  <user>Twyla</user>
  <text>I really like what I've seen of `syntaxparse` enough to hope for its eventual backport to Scheme.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:20:30.360000</ts>
  <user>Suleiman</user>
  <text>to get started with `syntaxparse` quickly take any macro you've written with `definesyntaxrule` and change it to use `definesimplemacro` (from the `syntax/parse/define` library). You won't have to change anything about the macro it will work exactly the same. But then you can add syntax classes if you want.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:21:31.100000</ts>
  <user>Suleiman</user>
  <text>For example say you start with this:```(definesyntaxrule (mylet name expression body ...) (let ([name expression]) body ...))```</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:21:50.983000</ts>
  <user>Twyla</user>
  <text>So it's a superset?</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:22:01.627000</ts>
  <user>Suleiman</user>
  <text>You can switch it to this:```(require syntax/parse/define)(definesimplemacro (mylet name expression body ...) (let ([name expression]) body ...))```...and it works the same</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:22:03.892000</ts>
  <user>Suleiman</user>
  <text>Pretty much yes</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:23:17.270000</ts>
  <user>Suleiman</user>
  <text>For that `mylet` macro you could then make it handle malformed input better by doing this:```(require syntax/parse/define)(definesimplemacro (mylet name:id expression:expr body:expr ...+) (let ([name expression]) body ...))```</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:23:47.208000</ts>
  <user>Twyla</user>
  <text>Ohh</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:24:05.993000</ts>
  <user>Twyla</user>
  <text>That's the syntax system Honu's macros are built upon.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-23T00:24:50.022000</ts>
  <user>Suleiman</user>
  <text>The `:id` and `:expr` parts indicate that the thing to the left of the colon must match the _syntax class_ indicated on the right of the colon so `name` must be a single identifier `expression` and `body` must be expressions (which is anything except a `#:keyword`") and `...+` means one or more times (in contrast to `...` which allows it to match zero times).</text>
</message>
<message conversation_id="82">
  <ts>2019-12-23T02:32:16.395000</ts>
  <user>Yiqun</user>
  <text>TIL: I am almost exactly 2 years younger than Scheme.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-25T00:05:44.494000</ts>
  <user>Suleiman</user>
  <text>transducer qualityoflife improvements today!</text>
</message>
<message conversation_id="81">
  <ts>2019-12-27T03:06:40.313000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders I think I'm going to work on adding ranges to rebellion. Should I try to pick up where your pull request leaves off? Alternatively I could attempt an entirely separate pull request.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-27T03:07:57.133000</ts>
  <user>Amri</user>
  <text>I haven't abandoned it; been working on other things a bit and awaiting some feedback. If you want to put something together as well a separate PR is probably best as you'll have some other ideas I'm sure.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-27T03:12:29.157000</ts>
  <user>Suleiman</user>
  <text>I'm feeling pretty motivated tonight so I think I'll give a separate PR a shot in order to explore the design space more. I'll still try to respond to your PR with more feedback and I'll ask for your feedback on mine.</text>
</message>
<message conversation_id="81">
  <ts>2019-12-27T03:13:58.084000</ts>
  <user>Amri</user>
  <text>sounds good</text>
</message>
<message conversation_id="83">
  <ts>2019-12-27T07:21:49.647000</ts>
  <user>Suleiman</user>
  <text>Here's what I've got so far:</text>
</message>
<message conversation_id="83">
  <ts>2019-12-27T07:23:58.672000</ts>
  <user>Suleiman</user>
  <text>There's also several convenience constructors:```(closedrange 2 7) ; [2..7](openrange 2 7) ; (2..7)(closedopenrange 2 7) ; [2..7)(openclosedrange 2 7) ; (2..7](atleast 5) ; [5..)(atmost 5) ; (..5](greaterthan 5) ; (5..)(lessthan 5) ; (..5)```</text>
</message>
<message conversation_id="83">
  <ts>2019-12-28T06:11:29.966000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders I've got enough range stuff implemented that I'm probably going to merge it soon just FYI</text>
</message>
<message conversation_id="83">
  <ts>2019-12-28T21:08:04.694000</ts>
  <user>Suleiman</user>
  <text>enum types!</text>
</message>
<message conversation_id="84">
  <ts>2019-12-28T22:17:21.177000</ts>
  <user>Twyla</user>
  <text>Is there a library of Racket papers somewhere?</text>
</message>
<message conversation_id="84">
  <ts>2019-12-28T22:25:51.863000</ts>
  <user>Amri</user>
  <text>@notjack I can take a look later tonight been out for an event for the past day. My main consideration would be whether that meets the design goals and in particular what those design goals are as mine are different from yours.</text>
</message>
<message conversation_id="83">
  <ts>2019-12-28T23:03:45.133000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders Happy to hear more about yours</text>
</message>
<message conversation_id="83">
  <ts>2019-12-28T23:04:52.753000</ts>
  <user>Suleiman</user>
  <text>@Deleted User Good question</text>
</message>
<message conversation_id="83">
  <ts>2019-12-29T04:04:10.244000</ts>
  <user>Yiqun</user>
  <text>@notjack I haven't caught up on my github emails have you replaced the comparator values with enum types?</text>
</message>
<message conversation_id="83">
  <ts>2019-12-29T04:32:18.899000</ts>
  <user>Yiqun</user>
  <text>@Deleted User a lot here https://www2.ccs.neu.edu/racket/pubs/</text>
</message>
<message conversation_id="83">
  <ts>2019-12-29T08:12:46.752000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam not yet I haven't used enum types to implement anything yet</text>
</message>
<message conversation_id="83">
  <ts>2019-12-29T08:13:42.318000</ts>
  <user>Suleiman</user>
  <text>I probably will but it should only be backwards compatible changes in implementations</text>
</message>
<message conversation_id="83">
  <ts>2019-12-29T08:13:56.633000</ts>
  <user>Suleiman</user>
  <text>Shouldn't change any APIs anywhere</text>
</message>
<message conversation_id="85">
  <ts>2019-12-29T23:19:48.638000</ts>
  <user>Amri</user>
  <text>@notjack Okay so I think the main thing here is establishing the design goals and in particular what the use case is. The API you have is similar to Guava so I'm familiar with it in that regard.My primary design goal is to have short clear and consistent syntax for creating ranges. I see there being two primary use cases  one as a precursor for iteration and the other as being a container for predicates.One thing that consistently bothers me about many functional languages is the lack of namespacing on things. Things like `(atmost 5)` leave a bit to be desired in that regard and it seems like Racket is lacking polymorphism (or at least easy polymorphism) to improve the situation there. Elixir does both of these quite well.One of the goals that both of us shared was the case of dealing with inclusivity as an input parameter. In my opinion this problem still exists because you have to do `(if inclusive (inclusivebound value) (exclusivebound value)`. This is one of the reasons I decided to avoid making these singleton types as inclusivity is naturally true/false and I see this as overengineering.I think the core thing is to decide what this is supposed to do and get on the same page with that before anything else.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:02:04.467000</ts>
  <user>Suleiman</user>
  <text>@WillBAnders My goals mostly center around using ranges to build other APIs like range collections and query DSLs.I hear you about the namespacing and inclusivityasaninputparameter. For the namespacing I think the `atmost` `atleast` `greaterthan` and `lessthan` names ought to be changed. Simplest change would be to add the `range` suffix to them like the `closedrange` `openrange` etc. constructors.For inclusivity what about adding a range bound constructor like `(rangebound [value any/c] [type rangeboundtype?])`? So instead of this:```(define (buildrange) (if (computeshouldbeinclusive?) (inclusivebound v) (exclusivebound v)))```You'd do this:```(define (buildrange) (rangebound v (computeboundtype)))(define (computeboundtype) (if (shouldbeinclusive?) inclusive exclusive))```I don't think booleans fit well here because boolean input parameters are hard to read without context. `(rangebound v #t)` doesn't clearly communicate that it's an inclusive bound. Normally I fix that problem with keyword parameters like `(rangebound v #:inclusive? #t)` but that's overly awkward for _required_ parameters. If the inclusivity were an optional parameter it'd have to default one way or the other but there isn't an obvious default so any choice would be arbitrary and make it hard to tell what `(rangebound v)` means.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:06:17.466000</ts>
  <user>Amri</user>
  <text>I personally don't think bounds should be exposed in the API.Something like `(rangebound v #t)` is only awkward if you're providing a literal. If it's a variable then you end up with `(rangebound v lowerinclusive)` or whatever. If it is a literal then use one of the other default forms.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:07:17.591000</ts>
  <user>Suleiman</user>
  <text>If it's a variable it's still awkward because you have to remember whether true or false means inclusive or exclusive when you're _producing_ the value.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:09:08.349000</ts>
  <user>Amri</user>
  <text>True is always inclusive. There's plenty of other places to go wrong and somewhere along the line it's a boolean. Treating it as anything other than a boolean makes no sense to me.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:09:58.157000</ts>
  <user>Suleiman</user>
  <text>I don't really see why true would always be inclusive. That doesn't seem obvious to me.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:10:26.344000</ts>
  <user>Amri</user>
  <text>Always form the question as isInclusive</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:11:48.325000</ts>
  <user>Suleiman</user>
  <text>I don't see why that's the default decision. I could certainly _choose_ to do that but I'd have to remember that choice and remember to always be consistent with it. The point of an enum is to use names so I don't have to remember things like that.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:12:38.043000</ts>
  <user>Amri</user>
  <text>I'd be more comfortable with that if enums were easy to work with but they're not. Ultimately I don't use Racket though so it's whatever.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:12:59.972000</ts>
  <user>Amri</user>
  <text>Dynamic typing and me do not get along in the slightest and no namespacing makes it significantly worse.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:13:08.769000</ts>
  <user>Suleiman</user>
  <text>I did just add enum types to rebellion last night so you don't have to make a singleton for each case does that help?</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:14:05.263000</ts>
  <user>Suleiman</user>
  <text>i.e. instead of this:```(definesingletontype inclusive)(definesingletontype exclusive)(define (rangeboundtype? v) (or (inclusive? v) (exclusive? v)))```You can now write this:```(defineenumtype rangeboundtype (inclusive exclusive))```</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:14:40.457000</ts>
  <user>Amri</user>
  <text>I saw. I would end up with something like this myself:```(enumcase x [up (...)] [down (...)] [left (...)] [right (...)] #:else (...))```</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:15:11.990000</ts>
  <user>Amri</user>
  <text>At the same time I would personally always end up in the mindset of isItInclusive true/false.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:15:27.721000</ts>
  <user>Amri</user>
  <text>Because there's only ever two possibilities.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:17:13.940000</ts>
  <user>Suleiman</user>
  <text>That's a totally reasonable mindset. I merely would like to be considerate of those (such as myself) who have trouble being so consistent with decisions like that. I've got adhd so I tend to forget which way I did something the last time I did it.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:18:35.610000</ts>
  <user>Amri</user>
  <text>It's a valid concern and one of the reasons I've grown fond of Elixir's atoms.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:19:57.567000</ts>
  <user>Amri</user>
  <text>Ultimately the questions that are going to be asked are is it bounded or unbounded followed by is the bound inclusive or exclusive. Those are definitely boolean results there. Having to span out to an enumcase can get to be a mess at that point.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:22:05.539000</ts>
  <user>Suleiman</user>
  <text>I mostly ended up with cond trees that looked like this:```(define bound (rangeupperbound range))(cond [(unbounded? bound) ...] [(inclusivebound? bound) ...] [else ...]))```</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:24:43.918000</ts>
  <user>Amri</user>
  <text>¯\\_(ツ)_/¯</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:27:01.408000</ts>
  <user>Amri</user>
  <text>Ultimately I feel like there's a things happening with types and other stuff that is adding unneeded complexity into things. Exposing bounds is not the way I would go with this as I don't think it's too helpful at that level.</text>
</message>
<message conversation_id="86">
  <ts>2019-12-30T00:30:49.431000</ts>
  <user>Suleiman</user>
  <text>Which level?</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:31:45.056000</ts>
  <user>Amri</user>
  <text>API level.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:32:31.226000</ts>
  <user>Amri</user>
  <text>Implementation can make some use of things but ultimately in order to use the bound you need to know whether it's a lower bound or upper bound which is encapsulated at the range level.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:37:50.826000</ts>
  <user>Suleiman</user>
  <text>I think the API has two levels to it: the surface level and the data model. The latter needs to be exposed so you can convert ranges to and from other things like strings of the form 5 &lt; x &lt;=8 or database queries. I fully expect most users won\'t need or care about that level but anyone who wants to build _libraries_ that incorporate ranges (like a SQL query builder) will need access to the data model. Everyone else will probably use only the smart constructors the query functions like `rangecontains?` and `rangeencloses?` and the operators like `rangespan`. In that case they never need to deal with the complexity of the range bound data model at all.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:40:36.882000</ts>
  <user>Amri</user>
  <text>Most of my use cases are dynamic so I have more experience at that level that hardcoding things. I'll pull something.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:43:52.615000</ts>
  <user>Amri</user>
  <text>```Range&lt;Integer&gt; range = Range.range( matcher.group(2).equals("") ? Integer.MIN_VALUE : Integer.parseInt(matcher.group(2)), matcher.group(1).equals("(") ? BoundType.OPEN : BoundType.CLOSED, matcher.group(3).equals("") ? Integer.MAX_VALUE : Integer.parseInt(matcher.group(3)), matcher.group(4).equals(")") ? BoundType.OPEN : BoundType.CLOSED)```</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:45:45.226000</ts>
  <user>Amri</user>
  <text>Which uses Guava's range API. Working with that is one of the main reasons I wanted to redesign things because it's a pain.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:47:33.689000</ts>
  <user>Suleiman</user>
  <text>Hmm. What if the range API just provided some parsing utils?```Range&lt;Integer&gt; range = Range.parser("[ ) ").parse(str);```</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:47:46.904000</ts>
  <user>Amri</user>
  <text>It's too specific.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:47:57.331000</ts>
  <user>Amri</user>
  <text>`5 &lt; x &lt;= 7` couldn't be modeled in that way.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:48:33.882000</ts>
  <user>Amri</user>
  <text>Ultimately what you have is you have a bound which could be a value or identifier for unbounded and some type of representation of whether that's inclusive or not.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:49:11.530000</ts>
  <user>Suleiman</user>
  <text>What about `[5 ]` v.s. `[5 )`?</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:49:56.329000</ts>
  <user>Suleiman</user>
  <text>Really I think the reason that code is a pain is because you're being forced to write a parser for an adhoc string format. That's always tricker than dealing with data already in known formats.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:50:42.093000</ts>
  <user>Amri</user>
  <text>It's from user input. No alternative.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:51:15.435000</ts>
  <user>Amri</user>
  <text>In that case the system overwrites it to handle as need be. Unbounded is always exclusive.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:51:54.233000</ts>
  <user>Suleiman</user>
  <text>Not an error?</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:55:37.908000</ts>
  <user>Amri</user>
  <text>No. This can have some consequences but there's a number of ways to handle them.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:56:17.512000</ts>
  <user>Amri</user>
  <text>Ultimately an unbounded range does not have inclusivity which is the advantage that having a bound type has.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:57:14.347000</ts>
  <user>Amri</user>
  <text>Alternatively you can define inclusivity for bounded types which is particularly interesting given that `inf.0` and `inf.0` exist.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:57:38.058000</ts>
  <user>Amri</user>
  <text>Which gives you a concept of all real numbers.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:57:56.478000</ts>
  <user>Suleiman</user>
  <text>right that's part of what the `Range.canonicalize(DiscreteDomain)` method does in Guava</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:58:08.473000</ts>
  <user>Suleiman</user>
  <text>normalize representation of unboundedness for bounded types</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:58:23.440000</ts>
  <user>Amri</user>
  <text>Right.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T00:59:41.591000</ts>
  <user>Amri</user>
  <text>I believe this was roughly the approach I used however I don't recall if exclusive took unbounded things into account. I know the underlying inclusivity was kept.</text>
</message>
<message conversation_id="85">
  <ts>2019-12-30T01:01:59.380000</ts>
  <user>Suleiman</user>
  <text>fyi I just wrote this: https://github.com/jackfirth/rebellion/pull/375</text>
</message>
<message conversation_id="85">
  <ts>2019-12-31T04:56:39.594000</ts>
  <user>Suleiman</user>
  <text>pattern matching for tuple types!</text>
</message>
<message conversation_id="87">
  <ts>2019-12-31T11:25:24.045000</ts>
  <user>Nyriah</user>
  <text>hype :)</text>
</message>
<message conversation_id="85">
  <ts>2020-01-03T06:16:43.334000</ts>
  <user>Suleiman</user>
  <text>🎉 🎉 🎉 https://github.com/jackfirth/rebellion/pull/379</text>
</message>
<message conversation_id="85">
  <ts>2020-01-03T06:18:25.545000</ts>
  <user>Amri</user>
  <text>Do you have an example usage somewhere?</text>
</message>
<message conversation_id="85">
  <ts>2020-01-03T06:23:14.700000</ts>
  <user>Suleiman</user>
  <text>In the docs. The tl;dr:```(definewrappertype fahrenheit)(definetupletype point (x y))(definerecordtype color (red green blue))(definesingletontype nullpointer)(defineenumtype direction (up down left right))(define (inspect v) (match v [(fahrenheit value) wrapper] [(point x y) tuple] ; all fields required [(color #:red r #:blue b) record] ; not all fields required [(== nullpointer) singleton] [(or (== up) (== down) (== left) (== right)) enum]))```</text>
</message>
<message conversation_id="87">
  <ts>2020-01-04T10:07:54.958000</ts>
  <user>Suleiman</user>
  <text>friday night lambda calculus fun</text>
</message>
<message conversation_id="85">
  <ts>2020-01-04T10:37:34.248000</ts>
  <user>Twyla</user>
  <text>Ooh nice</text>
</message>
<message conversation_id="85">
  <ts>2020-01-04T10:42:34.548000</ts>
  <user>Suleiman</user>
  <text>source code here: https://github.com/jackfirth/lambdacalculus</text>
</message>
<message conversation_id="87">
  <ts>2020-01-06T14:29:28.946000</ts>
  <user>Twyla</user>
  <text>How would one implement conditional restarts in Racket?</text>
</message>
<message conversation_id="85">
  <ts>2020-01-06T14:30:14.245000</ts>
  <user>Twyla</user>
  <text>With continuations I suppose.</text>
</message>
<message conversation_id="85">
  <ts>2020-01-06T15:22:04.283000</ts>
  <user>Nyriah</user>
  <text>I\'m not sure about the details but for a while I\'ve thought it would be possible to do using continuations yeah. It could take some interesting code to simulate the Common Lisp situation where a handler\'s dynamic scope is mostly like that of the site being handled except with the active handlers of the site the handler was installed at.I don\'t know if the full power of continuations is necessarily needed maybe just Racket\'s firstclass parameterizations or even just a single current set of active condition handlers parameter. In fact I think many basic uses of conditions might be equivalent to simply having a Racket parameter that carries a handler object inside not unlike the way Racket already handles reading by using the current readtable or handles module name resolution using the current module name resolver.</text>
</message>
<message conversation_id="88">
  <ts>2020-01-06T19:23:52.435000</ts>
  <user>Suleiman</user>
  <text>What are conditional restarts? Something different from regular retries?</text>
</message>
<message conversation_id="89">
  <ts>2020-01-06T20:05:59.526000</ts>
  <user>Yiqun</user>
  <text>I thought it was a REPL/IDE thing. Like when the program hits an error you get prompted on what to do.</text>
</message>
<message conversation_id="89">
  <ts>2020-01-06T20:06:16.373000</ts>
  <user>Yiqun</user>
  <text>Like replace the error with a value or retry it again etc.</text>
</message>
<message conversation_id="89">
  <ts>2020-01-06T20:06:32.513000</ts>
  <user>Yiqun</user>
  <text>In Smalltalk you can replace the code and rerun it even.</text>
</message>
<message conversation_id="88">
  <ts>2020-01-06T20:25:32.288000</ts>
  <user>Suleiman</user>
  <text>Whoa neat</text>
</message>
<message conversation_id="89">
  <ts>2020-01-06T21:40:49.681000</ts>
  <user>Yiqun</user>
  <text>It's partially why TDD/JUnit/etc was mostly developed in Smalltalk. You'd write a few test cases run the tests they'd fail the exception window would drop you into the debugger or you could just directly write the code to make the tests work and resume running the test suite.</text>
</message>
<message conversation_id="89">
  <ts>2020-01-06T21:41:55.088000</ts>
  <user>Amri</user>
  <text>TDD shudder xD</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T00:14:12.651000</ts>
  <user>Nyriah</user>
  <text>I was afraid that depth of support might come up. :p That doesn't seem so easy to achieve without a particularly reflective runtime. In Racket modules would probably need to be compiled with that in mind rather than doing something anywhere near as simple as putting a procedure in a parameter.</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T00:16:08.520000</ts>
  <user>Nyriah</user>
  <text>On the other hand I hear Racket has step debugging and code coverage tools which might be pretty similar in scope to that kind of project...? I don't have experience with using them.</text>
</message>
<message conversation_id="91">
  <ts>2020-01-07T00:42:39.117000</ts>
  <user>Suleiman</user>
  <text>Is that really so much better than just rerunning the test? Why the need for hot code reloading and suspension of execution?</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:36:37.632000</ts>
  <user>Nyriah</user>
  <text>For me the primary reason I\'ve thought about this is that it\'d be fun to say hey Common Lisp can be a library for Racket neat. :p</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:38:03.791000</ts>
  <user>Nyriah</user>
  <text>making Smalltalk a library for Racket would be neat in a similar way</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:44:48.055000</ts>
  <user>Nyriah</user>
  <text>but as far as I understand it making local modifications to a running system is pretty core to the culture of how Smalltalk programs are created and shared so stuffing it into the `#lang` world probably wouldn't give an impression of authenticity</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:45:13.581000</ts>
  <user>Suleiman</user>
  <text>oh :p</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:45:19.151000</ts>
  <user>Suleiman</user>
  <text>it would definitely be neat</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:45:28.006000</ts>
  <user>Suleiman</user>
  <text>and it seems perfectly doable to me</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:45:56.488000</ts>
  <user>Suleiman</user>
  <text>I just don't _want_ it for the problem domains I currently work in</text>
</message>
<message conversation_id="90">
  <ts>2020-01-07T01:50:03.702000</ts>
  <user>Nyriah</user>
  <text>Same. I feel like it's something that should be built by someone who really wants it and knows how to tell when it's doing what it's supposed to do. XD</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:38:44.306000</ts>
  <user>Zeplyn</user>
  <text>i am having a moment of boredom what do i make in the racket</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:38:57.765000</ts>
  <user>Zeplyn</user>
  <text>i completed my other thing</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:42:18.775000</ts>
  <user>Twyla</user>
  <text>@notjack Here's a cool example usecase for conditional restarts: https://groups.google.com/forum/#!topic/comp.lang.dylan/gszO7d7BAok</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:44:20.574000</ts>
  <user>Twyla</user>
  <text>Effectively exception handling is separated into conditions and restarts where you can set multiple different (dynamically bound) handlers to different possible conditions and then dynamically restart the evaluation. eg when you hit a divide by zero you can tell it to return a specific value log the error and continue (Racket's exceptions can do this too) or retry the last bit of evaluation with different values.</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:47:27.973000</ts>
  <user>Yiqun</user>
  <text>Making a traditional Smalltalk as a `#lang` would be difficult. A person could make a mostly ANSI compliant Smalltalk though since the standard cut out a lot of the reflective capabilities.</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:48:12.160000</ts>
  <user>Yiqun</user>
  <text>I've been kicking around the idea but really it just gets you an OOP language with a different syntax.</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:48:25.715000</ts>
  <user>Yiqun</user>
  <text>So it hasn't been too compelling.</text>
</message>
<message conversation_id="92">
  <ts>2020-01-07T03:55:03.419000</ts>
  <user>Twyla</user>
  <text>It's a shame too I think reflection is where Smalltalk truly shines.</text>
</message>
<message conversation_id="93">
  <ts>2020-01-07T19:38:21.784000</ts>
  <user>Suleiman</user>
  <text>@Deleted User that use case you linked is fascinating</text>
</message>
<message conversation_id="93">
  <ts>2020-01-07T19:38:42.252000</ts>
  <user>Suleiman</user>
  <text>I like it</text>
</message>
<message conversation_id="93">
  <ts>2020-01-07T19:48:43.627000</ts>
  <user>Twyla</user>
  <text>:3</text>
</message>
<message conversation_id="94">
  <ts>2020-01-08T21:51:17.486000</ts>
  <user>Zeplyn</user>
  <text>my code i dont know why it works</text>
</message>
<message conversation_id="94">
  <ts>2020-01-08T21:51:20.523000</ts>
  <user>Zeplyn</user>
  <text>but it do work</text>
</message>
<message conversation_id="95">
  <ts>2020-01-09T06:07:13.999000</ts>
  <user>Twyla</user>
  <text>mood</text>
</message>
<message conversation_id="94">
  <ts>2020-01-09T16:52:38.018000</ts>
  <user>Zeplyn</user>
  <text>(big mood)</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:50:03.026000</ts>
  <user>Zeplyn</user>
  <text>hello racket folk</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:50:16.107000</ts>
  <user>Zeplyn</user>
  <text>i am working on my first bigger language on racket</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:53:10.476000</ts>
  <user>Amri</user>
  <text>@4984 yo whaddup</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:53:17.449000</ts>
  <user>Zeplyn</user>
  <text>oh hi 😄</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:53:25.131000</ts>
  <user>Amri</user>
  <text>o/</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:53:50.941000</ts>
  <user>Zeplyn</user>
  <text>i have not figured out how i want control flow</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:53:59.375000</ts>
  <user>Zeplyn</user>
  <text>it currently kinda looks like js</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:56:12.146000</ts>
  <user>Amri</user>
  <text>runs</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:56:43.706000</ts>
  <user>Zeplyn</user>
  <text>why are you running</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:57:33.567000</ts>
  <user>Zeplyn</user>
  <text>it looks like js</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:58:09.254000</ts>
  <user>Zeplyn</user>
  <text>i cant figure out how to make an early returnlike control structure</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T16:59:00.077000</ts>
  <user>Amri</user>
  <text>Do you mean```func x() { if (cond) { return 0; } //...}```Or returning at the expression level?</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:03:02.800000</ts>
  <user>Zeplyn</user>
  <text>like the code example</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:05:31.474000</ts>
  <user>Amri</user>
  <text>What's your reasoning for avoiding `return`?</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:05:47.989000</ts>
  <user>Zeplyn</user>
  <text>i dont really know what im doing</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:06:14.749000</ts>
  <user>Amri</user>
  <text>xDD</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:09:23.397000</ts>
  <user>Zeplyn</user>
  <text>so like i dont exactly know what to implement</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:13:44.835000</ts>
  <user>Amri</user>
  <text>I don't follow.</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T17:30:02.217000</ts>
  <user>Suleiman</user>
  <text>@4984 You can use continuations and syntax parameters to implement that kind of thing. Examples here: https://gist.github.com/jackfirth/027411d567385dadb3202bee75a847b4</text>
</message>
<message conversation_id="96">
  <ts>2020-01-10T17:31:51.141000</ts>
  <user>Amri</user>
  <text>Oh is that what the question was xD</text>
</message>
<message conversation_id="96">
  <ts>2020-01-10T17:34:39.066000</ts>
  <user>Zeplyn</user>
  <text>yes i am bad at communicating</text>
</message>
<message conversation_id="96">
  <ts>2020-01-10T17:34:41.177000</ts>
  <user>Zeplyn</user>
  <text>thank you</text>
</message>
<message conversation_id="96">
  <ts>2020-01-10T17:35:22.005000</ts>
  <user>Amri</user>
  <text>I'm still in pldi mode :p</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:33:23.277000</ts>
  <user>Zeplyn</user>
  <text>macros cause me confusion</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:33:27.235000</ts>
  <user>Zeplyn</user>
  <text>like i get them</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:33:29.386000</ts>
  <user>Zeplyn</user>
  <text>but i just</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:33:31.474000</ts>
  <user>Zeplyn</user>
  <text>confused</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:35:08.800000</ts>
  <user>Amri</user>
  <text>Mate it took me a week workshop to pretend like I knew what I was doing.</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:35:52.198000</ts>
  <user>Suleiman</user>
  <text>I am very happy to help with any macro problems or questions</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:36:05.942000</ts>
  <user>Zeplyn</user>
  <text>thank you</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:36:09.442000</ts>
  <user>Zeplyn</user>
  <text>but there is no problem</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:36:14.557000</ts>
  <user>Zeplyn</user>
  <text>i just dont know when to use them</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:36:59.541000</ts>
  <user>Suleiman</user>
  <text>As a general rule they're best used when you want to do something that seems impossible</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:42:55.347000</ts>
  <user>Zeplyn</user>
  <text>okie</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:45:49.988000</ts>
  <user>Yiqun</user>
  <text>A lot of macros I write are best described as I can write this code like A but I would prefer to write it as B because it is [clearer/less repetitive/etc]</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T18:46:11.366000</ts>
  <user>Yiqun</user>
  <text>So you write a macro to turn your B's into A's</text>
</message>
<message conversation_id="94">
  <ts>2020-01-10T19:02:41.373000</ts>
  <user>Amri</user>
  <text>CMD + C CMD + Macro</text>
</message>
<message conversation_id="97">
  <ts>2020-01-10T19:49:51.204000</ts>
  <user>Zeplyn</user>
  <text>today\'s I love racket moment:</text>
</message>
<message conversation_id="97">
  <ts>2020-01-10T19:49:58.090000</ts>
  <user>Zeplyn</user>
  <text>i was running a lil benchmark</text>
</message>
<message conversation_id="97">
  <ts>2020-01-10T19:50:17.683000</ts>
  <user>Zeplyn</user>
  <text>apparently racket does really well compared to the luajit</text>
</message>
<message conversation_id="97">
  <ts>2020-01-10T19:50:44.823000</ts>
  <user>Zeplyn</user>
  <text>and hence i have a really fast language implemetation on my hands</text>
</message>
<message conversation_id="97">
  <ts>2020-01-11T08:52:28.022000</ts>
  <user>Jla</user>
  <text>htdp anyone?</text>
</message>
<message conversation_id="97">
  <ts>2020-01-11T08:56:01.580000</ts>
  <user>Suleiman</user>
  <text>it's good</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T08:58:38.073000</ts>
  <user>Jla</user>
  <text>im a beginner and which one do i get started with?</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T08:58:44.113000</ts>
  <user>Jla</user>
  <text>1st edition or the second one</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T08:58:46.738000</ts>
  <user>Jla</user>
  <text>:c</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:04:06.383000</ts>
  <user>Suleiman</user>
  <text>Definitely the second</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:04:10.850000</ts>
  <user>Jla</user>
  <text>why</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:04:26.718000</ts>
  <user>Jla</user>
  <text>the first one seems complete unlike the 2nd</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:04:37.929000</ts>
  <user>Suleiman</user>
  <text>it's meant to replace the first edition and has corrections and such</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:04:54.956000</ts>
  <user>Jla</user>
  <text>and the prefaces are just too scaryy :c</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:05:16.739000</ts>
  <user>Suleiman</user>
  <text>If you find it easier to learn from the 1st that's okay</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:05:41.949000</ts>
  <user>Jla</user>
  <text>oki I'll start with the second one</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:06:14.971000</ts>
  <user>Jla</user>
  <text>its just the hard computational terms used in the prefaces of both the editions bothering me</text>
</message>
<message conversation_id="98">
  <ts>2020-01-11T09:07:35.300000</ts>
  <user>Suleiman</user>
  <text>feel free to ask questions about any of those terms here 🙂</text>
</message>
<message conversation_id="99">
  <ts>2020-01-11T11:23:23.468000</ts>
  <user>Zeplyn</user>
  <text>it turns out its faster not to use macros for early return</text>
</message>
<message conversation_id="100">
  <ts>2020-01-11T17:07:29.195000</ts>
  <user>Amri</user>
  <text>What in comparison to?</text>
</message>
<message conversation_id="101">
  <ts>2020-01-11T19:30:19.043000</ts>
  <user>Suleiman</user>
  <text>it's probably the continuations that make things slower not the macros</text>
</message>
<message conversation_id="100">
  <ts>2020-01-11T19:38:05.341000</ts>
  <user>Amri</user>
  <text>^</text>
</message>
<message conversation_id="100">
  <ts>2020-01-11T19:38:16.453000</ts>
  <user>Amri</user>
  <text>Macros should have zero runtime impact.</text>
</message>
<message conversation_id="100">
  <ts>2020-01-11T19:38:22.098000</ts>
  <user>Amri</user>
  <text>Which is like the point of macros</text>
</message>
<message conversation_id="102">
  <ts>2020-01-11T20:24:42.886000</ts>
  <user>Yiqun</user>
  <text>Early return continuations should have almost zero impact</text>
</message>
<message conversation_id="100">
  <ts>2020-01-11T21:29:42.343000</ts>
  <user>Suleiman</user>
  <text>I could see it having a big impact on recursive functions</text>
</message>
<message conversation_id="102">
  <ts>2020-01-11T23:03:35.576000</ts>
  <user>Yiqun</user>
  <text>Hmm yes I think it might do something to the tail recursion.```#lang racket/base(define (count0 x) (unless (zero? x) (count0 (sub1 x))))(define (count1 x) (let/ec return (unless (zero? x) (count1 (sub1 x)))))(collectgarbage)(collectgarbage)(collectgarbage)'count0(time (count0 1000000))(collectgarbage)(collectgarbage)(collectgarbage)'count1(time (count1 1000000))``````'count0cpu time: 32 real time: 35 gc time: 0'count1cpu time: 844 real time: 848 gc time: 312```</text>
</message>
<message conversation_id="102">
  <ts>2020-01-11T23:07:10.503000</ts>
  <user>Yiqun</user>
  <text>One thing that you could do (that is a bit complicated) is when macroexpanding functions expand the body and check if it does an early return. If it is in a tail position the `return` should just disappear otherwise wrap the function body with `let/ec` and carry on. Then only early return functions have to pay the early return tax.Maybe you don't need to expand the body depends on what the language looks like.</text>
</message>
<message conversation_id="102">
  <ts>2020-01-11T23:23:00.515000</ts>
  <user>Yiqun</user>
  <text>I wonder why the `let/ec`continuations don't collapse in a tail context like that.</text>
</message>
<message conversation_id="102">
  <ts>2020-01-11T23:24:15.501000</ts>
  <user>Yiqun</user>
  <text>Maybe they do and the continuations aren't being stack allocated like I'm expecting.</text>
</message>
<message conversation_id="102">
  <ts>2020-01-11T23:35:18.711000</ts>
  <user>Suleiman</user>
  <text>@oaktownsam Try it on the chezscheme impl of racket I recall mflatt saying that the CS implementation of continuations is _much_ more efficient than the nonCS one</text>
</message>
<message conversation_id="103">
  <ts>2020-01-11T23:47:33.349000</ts>
  <user>Suleiman</user>
  <text>What do y'all think of this:```&gt; (rangeclamp (closedrange 1 9) 4)4&gt; (rangeclamp (closedrange 1 9) 8000)9&gt; (rangeclamp (closedrange 1 9) 8000)1```</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:00:51.319000</ts>
  <user>Zeplyn</user>
  <text>why is the variant: cs of racket like 2.5x bigger</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:02:49.600000</ts>
  <user>Suleiman</user>
  <text>it's implemented using chezscheme which is a big fast and complicated pile of code</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:04:41.172000</ts>
  <user>Zeplyn</user>
  <text>chezscheme is only 18mb on my system</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:05:28.282000</ts>
  <user>Suleiman</user>
  <text>when you say 2.5x bigger what two things are you comparing?</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:07:12.922000</ts>
  <user>Zeplyn</user>
  <text>119MiB vs 316MiB</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:09:02.735000</ts>
  <user>Suleiman</user>
  <text>No like are those two installers you downloaded from the racketlang.org website? Or are they two docker images? or something else?</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:09:23.039000</ts>
  <user>Zeplyn</user>
  <text>https://download.racketlang.org/</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:12:31.004000</ts>
  <user>Suleiman</user>
  <text>are those the linux installers for nonminimal racket?</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:15:11.248000</ts>
  <user>Suleiman</user>
  <text>I'm guessing it's the built packages. The racket bytecode format is different on the chezscheme vm because chezscheme compiles expanded racket code into actual machine code and that gets stored in the bytecode files. The nonCS racket vm compiles expanded code into a machineindependent intermediate form which is then compiled at runtime with a JIT.</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:16:21.178000</ts>
  <user>Suleiman</user>
  <text>The minimal racket installers for regular and CS racket are 11mb and 36mb which sounds like it fits with the chezscheme being about 18mb</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T07:17:20.296000</ts>
  <user>Suleiman</user>
  <text>so tl;dr: it's a lot bigger because there's a lot of precompiled code</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T08:10:16.623000</ts>
  <user>Twyla</user>
  <text>@bub Feel free to ask about anything you struggle with and we'll gladly help you out.</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T08:11:21.312000</ts>
  <user>Jla</user>
  <text>@Deleted User oki i will  thanks!</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T08:11:34.532000</ts>
  <user>Twyla</user>
  <text>No problem!</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T08:12:49.050000</ts>
  <user>Zeplyn</user>
  <text>`readcompiledlinklet: virtualmachine mismatch expected: chezscheme found: racket"` how do i tell it that racket is installed in ~/racket</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T10:52:52.251000</ts>
  <user>Suleiman</user>
  <text>@4984 change your `$PATH` to point to the right racket</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T10:53:12.931000</ts>
  <user>Suleiman</user>
  <text>oh wait</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T10:53:41.468000</ts>
  <user>Suleiman</user>
  <text>actually it might be that you should use the `racketcs` and `racocs` commands? I think?</text>
</message>
<message conversation_id="104">
  <ts>2020-01-12T10:53:44.875000</ts>
  <user>Suleiman</user>
  <text>not sure</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T11:19:38.853000</ts>
  <user>Zeplyn</user>
  <text>i installed racket into my home</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T11:19:48.254000</ts>
  <user>Zeplyn</user>
  <text>because i didnt want it to get rid of racket</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T13:39:45.688000</ts>
  <user>Zeplyn</user>
  <text>i give up on that front</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T13:40:11.237000</ts>
  <user>Zeplyn</user>
  <text>is there a good way to check what is making racket take so long to start</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T13:40:24.120000</ts>
  <user>Zeplyn</user>
  <text>im not sure what its doing</text>
</message>
<message conversation_id="105">
  <ts>2020-01-12T13:40:41.420000</ts>
  <user>Zeplyn</user>
  <text>like why my code is slow when no input is given and no processing is done</text>
</message>
<message conversation_id="106">
  <ts>2020-01-12T22:26:37.906000</ts>
  <user>Suleiman</user>
  <text>could be lots of things</text>
</message>
<message conversation_id="107">
  <ts>2020-01-12T22:39:07.845000</ts>
  <user>Nyriah</user>
  <text>was it always doing that or is it something new?</text>
</message>
<message conversation_id="108">
  <ts>2020-01-12T23:14:16.126000</ts>
  <user>Twyla</user>
  <text>Have you tried the profiler?</text>
</message>
<message conversation_id="105">
  <ts>2020-01-13T14:58:43.672000</ts>
  <user>Zeplyn</user>
  <text>i dont know the profiler</text>
</message>
<message conversation_id="106">
  <ts>2020-01-13T15:05:35.736000</ts>
  <user>Twyla</user>
  <text>It's fairly easy to use actually.</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:06:36.580000</ts>
  <user>Twyla</user>
  <text>Instead of running your program with `% racket main.rkt` do `% raco profile main.rkt`</text>
</message>
<message conversation_id="106">
  <ts>2020-01-13T15:07:24.464000</ts>
  <user>Zeplyn</user>
  <text>i see</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:07:25.548000</ts>
  <user>Twyla</user>
  <text>`profiler` package allows for more finetuned hooks you can place in your code but `raco profile` is almost always enough.</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:07:51.625000</ts>
  <user>Twyla</user>
  <text>There's also `errortrace` but I don't know how to use that.</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:08:14.193000</ts>
  <user>Zeplyn</user>
  <text>apparently my parser is taking alot of time to start</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:09:42.686000</ts>
  <user>Zeplyn</user>
  <text>I I KNOW HOW TO FIX THIS!!!!</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:09:43.641000</ts>
  <user>Zeplyn</user>
  <text>wooo</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:09:54.563000</ts>
  <user>Zeplyn</user>
  <text>okay so with that out of the way soon</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:10:07.942000</ts>
  <user>Zeplyn</user>
  <text>how do i make my code into a `#lang`</text>
</message>
<message conversation_id="108">
  <ts>2020-01-13T15:10:27.832000</ts>
  <user>Zeplyn</user>
  <text>i read about it but it confuses me</text>
</message>
<message conversation_id="109">
  <ts>2020-01-13T17:16:00.939000</ts>
  <user>Twyla</user>
  <text>It's a hairy process admittedly.</text>
</message>
<message conversation_id="109">
  <ts>2020-01-13T17:17:43.834000</ts>
  <user>Twyla</user>
  <text>You can do it like this: https://docs.racketlang.org/guide/syntax_modulereader.html</text>
</message>
<message conversation_id="109">
  <ts>2020-01-13T17:18:16.507000</ts>
  <user>Twyla</user>
  <text>Do your stuff in whatever you sublanguage you like then `provide` out the identifiers.</text>
</message>
<message conversation_id="109">
  <ts>2020-01-13T17:19:04.702000</ts>
  <user>Twyla</user>
  <text>Make a file in `syntax/modulereader` to import those identifiers and that's it.</text>
</message>
<message conversation_id="109">
  <ts>2020-01-13T17:19:42.092000</ts>
  <user>Twyla</user>
  <text>You can further adjust the parser in the latter file but it's not necessary for small DSLs.</text>
</message>
<message conversation_id="109">
  <ts>2020-01-13T17:20:13.295000</ts>
  <user>Twyla</user>
  <text>Then you can use `#lang` to call the latter file.</text>
</message>
<message conversation_id="110">
  <ts>2020-01-13T17:47:07.091000</ts>
  <user>Zeplyn</user>
  <text>is that only for racket like languages</text>
</message>
<message conversation_id="110">
  <ts>2020-01-13T17:47:11.788000</ts>
  <user>Zeplyn</user>
  <text>my language is nothing similar</text>
</message>
<message conversation_id="110">
  <ts>2020-01-13T17:57:45.538000</ts>
  <user>Amri</user>
  <text>All. The syntax you use isn't significant there.</text>
</message>
<message conversation_id="110">
  <ts>2020-01-13T18:08:31.892000</ts>
  <user>Suleiman</user>
  <text>I highly suggest reading Beautiful Racket that's what I do whenever I need to make a `#lang`.</text>
</message>
<message conversation_id="111">
  <ts>2020-01-13T18:12:52.503000</ts>
  <user>Amri</user>
  <text>^</text>
</message>
<message conversation_id="111">
  <ts>2020-01-13T18:14:07.620000</ts>
  <user>Amri</user>
  <text>I don't know how to write macros. I know just enough to see what exists and how to go about doing what I need to and google takes me the rest of the way xD</text>
</message>
<message conversation_id="112">
  <ts>2020-01-13T18:39:37.531000</ts>
  <user>Twyla</user>
  <text>I should get around to reading that book myself.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:11:04.070000</ts>
  <user>Twyla</user>
  <text>Have you peeps seen this? https://github.com/exercism/racket/issues/150</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:11:44.203000</ts>
  <user>Jla</user>
  <text>square this function is not defined?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:11:46.048000</ts>
  <user>Jla</user>
  <text>help!</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:11:52.421000</ts>
  <user>Twyla</user>
  <text>Hm?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:11:52.584000</ts>
  <user>Jla</user>
  <text>in the drracket</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:11:53.379000</ts>
  <user>Jla</user>
  <text>iide</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:12:08.835000</ts>
  <user>Twyla</user>
  <text>Can you be more specific?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:12:41.842000</ts>
  <user>Jla</user>
  <text>the intrepreter in drRacket ide shows an error</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:12:55.135000</ts>
  <user>Jla</user>
  <text>square : this function is not defined</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:13:04.696000</ts>
  <user>Twyla</user>
  <text>What are you trying to do?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:13:40.300000</ts>
  <user>Jla</user>
  <text>(square 10 solid red")</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:00.173000</ts>
  <user>Twyla</user>
  <text>Is that all?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:06.595000</ts>
  <user>Jla</user>
  <text>yes lul</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:11.057000</ts>
  <user>Twyla</user>
  <text>If so you need to import the image library.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:18.002000</ts>
  <user>Jla</user>
  <text>i did</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:32.570000</ts>
  <user>Jla</user>
  <text>circle /rectangle do work</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:38.387000</ts>
  <user>Twyla</user>
  <text>Well then that's not all. ;p</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:14:52.454000</ts>
  <user>Jla</user>
  <text>im starting off with the htdp</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:15:11.274000</ts>
  <user>Jla</user>
  <text>the second version's better than the first right? for beginners</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:15:25.827000</ts>
  <user>Twyla</user>
  <text>I recommend the second version yeah.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:15:54.501000</ts>
  <user>Twyla</user>
  <text>And if you're following the second version don't forget that the library name is `2htdp` not `htdp`.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:16:21.559000</ts>
  <user>Jla</user>
  <text>yeah</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:16:35.634000</ts>
  <user>Jla</user>
  <text>but isnt it in the language&lt;teachpacks thing?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:17:23.132000</ts>
  <user>Twyla</user>
  <text>Honestly I have no idea since I don't use DrRacket.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:17:37.342000</ts>
  <user>Twyla</user>
  <text>But you need `2htdp/image`.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:17:43.035000</ts>
  <user>Jla</user>
  <text>oh :c</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:19:42.533000</ts>
  <user>Twyla</user>
  <text>Pick HtDP/2e from the menu instead of HtDP.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:19:58.736000</ts>
  <user>Jla</user>
  <text>ive done it  ty for the help tho!</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:20:19.206000</ts>
  <user>Twyla</user>
  <text>Does it work now?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:20:53.253000</ts>
  <user>Jla</user>
  <text>yay</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:20:54.936000</ts>
  <user>Jla</user>
  <text>:p</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:21:00.854000</ts>
  <user>Twyla</user>
  <text>👍</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:21:32.683000</ts>
  <user>Jla</user>
  <text>why does this thing take much time for giving the output :c</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:21:49.715000</ts>
  <user>Twyla</user>
  <text>How long does it take?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:22:14.289000</ts>
  <user>Jla</user>
  <text>45 secs lul</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:22:16.879000</ts>
  <user>Twyla</user>
  <text>DrRacket is a tad slow unfortunately.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:22:20.486000</ts>
  <user>Jla</user>
  <text>oh</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:22:33.300000</ts>
  <user>Twyla</user>
  <text>That's the price to pay for extensibility.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:22:40.780000</ts>
  <user>Jla</user>
  <text>ouii</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:23:15.598000</ts>
  <user>Jla</user>
  <text>any racket app</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:23:22.470000</ts>
  <user>Jla</user>
  <text>for android!?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:24:07.457000</ts>
  <user>Twyla</user>
  <text>Racket works on Android but I don't think anyone's ported a development environment to it.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:24:30.802000</ts>
  <user>Jla</user>
  <text>oh :(</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:25:21.303000</ts>
  <user>Twyla</user>
  <text>I would try my hand at it if I knew anything about mobile development.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:25:23.526000</ts>
  <user>Twyla</user>
  <text>Haha</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:36:59.636000</ts>
  <user>Twyla</user>
  <text>Oh I remember now. Racket is in Termux's repos.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:37:10.074000</ts>
  <user>Twyla</user>
  <text>I don't know if it comes with the GUI portions though.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T19:38:47.243000</ts>
  <user>Twyla</user>
  <text>Ah no it doesn't.</text>
</message>
<message conversation_id="113">
  <ts>2020-01-14T19:40:55.483000</ts>
  <user>Twyla</user>
  <text>Better than nothing.</text>
</message>
<message conversation_id="114">
  <ts>2020-01-14T20:07:32.934000</ts>
  <user>Zeplyn</user>
  <text>so like... racket borken again 😦</text>
</message>
<message conversation_id="112">
  <ts>2020-01-14T20:17:47.482000</ts>
  <user>Twyla</user>
  <text>What's the problem?</text>
</message>
<message conversation_id="115">
  <ts>2020-01-15T11:32:29.850000</ts>
  <user>Jla</user>
  <text>@Deleted User does the simplified version of any website in chrome remove the website's content?</text>
</message>
<message conversation_id="115">
  <ts>2020-01-15T11:32:39.408000</ts>
  <user>Jla</user>
  <text>simplified version</text>
</message>
<message conversation_id="115">
  <ts>2020-01-15T11:33:02.388000</ts>
  <user>Jla</user>
  <text>original version</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T11:34:30.202000</ts>
  <user>Twyla</user>
  <text>Isn't that what the simplified version meant to do?</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T11:42:09.377000</ts>
  <user>Jla</user>
  <text>yeah but its removing the content!</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T11:42:13.181000</ts>
  <user>Jla</user>
  <text>:(</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T11:52:10.350000</ts>
  <user>Twyla</user>
  <text>Firefox's reader view does the same thing.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T12:15:55.915000</ts>
  <user>Jla</user>
  <text>yeah but reading that way would probably skip some content right? @Deleted User</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T12:16:42.165000</ts>
  <user>Twyla</user>
  <text>So far I've only seen it omit the table of contents.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T12:16:56.370000</ts>
  <user>Twyla</user>
  <text>Check the page in both modes for a while and see.</text>
</message>
<message conversation_id="112">
  <ts>2020-01-15T12:22:55.613000</ts>
  <user>Jla</user>
  <text>ouii</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:52:59.552000</ts>
  <user>Twyla</user>
  <text>I came up with a creative way to comment out expressions.</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:53:27.637000</ts>
  <user>Twyla</user>
  <text>```Racket(definesyntax comment (syntaxrules () ((_ ...) (values))))```</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:54:08.783000</ts>
  <user>Amri</user>
  <text>`#;`?</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:54:18.185000</ts>
  <user>Twyla</user>
  <text>That's too easy. ;P</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:54:21.464000</ts>
  <user>Amri</user>
  <text>..</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:54:52.602000</ts>
  <user>Twyla</user>
  <text>I like how `values` with zero args returns nothing.</text>
</message>
<message conversation_id="116">
  <ts>2020-01-15T20:55:54.478000</ts>
  <user>Twyla</user>
  <text>Clojure's `comment` macro returns `nil` instead which kinda defeats the purpose IMO.</text>
</message>
<message conversation_id="117">
  <ts>2020-01-15T22:03:58.688000</ts>
  <user>Suleiman</user>
  <text>There's also that `todo` macro</text>
</message>
<message conversation_id="117">
  <ts>2020-01-15T22:05:54.386000</ts>
  <user>Suleiman</user>
  <text>(see the `todolist` package)</text>
</message>
<message conversation_id="117">
  <ts>2020-01-16T06:19:40.387000</ts>
  <user>Suleiman</user>
  <text>Implemented my own contract combinator for comparators!</text>
</message>
<message conversation_id="117">
  <ts>2020-01-16T18:49:39.802000</ts>
  <user>Suleiman</user>
  <text>Reducer and transducer contracts are coming soon!</text>
</message>
<message conversation_id="117">
  <ts>2020-01-16T18:49:45.935000</ts>
  <user>Suleiman</user>
  <text>(hopefully)</text>
</message>
<message conversation_id="117">
  <ts>2020-01-16T23:51:26.415000</ts>
  <user>Zeplyn</user>
  <text>i have no clue what that is but woo that sounds cool</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:12:45.710000</ts>
  <user>Justo</user>
  <text>can someone help me with these questions? I've been stuck for days.</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:12:47.597000</ts>
  <user>Justo</user>
  <text>Define a constant ANGLE of value 120. Now design a function pinetree that takes two numbers a and d as input and returns the image of a simplistic holiday tree (lateseason as that may be) as follows. The tree consists of 5 upwardpointing isosceles triangles (of color green obviously—forestgreen is nise and is a valid BSL color) stacked on top of each other. The top triangle’s equallength sides have length a and are joined at an angle of ANGLE degrees. For the triangle below that the equallength side length increases to a+d and so forth with the bottom triangle having equallength side length a+4d. The angle does not change. The stack of triangles sits on top of a brown rectangle of width a and height 1.5a depicting the trunk of the tree.</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:13:04.905000</ts>
  <user>Justo</user>
  <text>Design a simple bouncingball animation. The animation should take place in a 300x300 scene with white background. A small ball (a black circle of radius 5) is initially located at position (0,150). The ball should now move straight southeast until it hits the bottom edge of the scene. At this time it should bounce off the edge toward the northeast until it hits the right edge of the frame (which will happen at position (300,150)). At this point the ball should turn red and stay at position (300,150) for the rest of the animation (as far as the viewer is concerned this ends the animation).To achieve this define constants for the scene and two samesize balls one black and one red. For the animation you need to define a single function drawball that takes the xcoordinate of the ball (a natural number) as input and draws the ball at the correct position (x,y); you do the math to figure out y. Like pinetree this function returns an image. Remember that for some values of x the ball moves southeast; for others it moves northeast. The origin of the coordinate system is the topleft corner! The color of the ball also depends on x.Once you have defined drawball to start the animation you pass the function name to the animate function: (animate drawball). For this to work your code must include the (require 2htdp/universe) directive (in addition to (require 2htdp/image)).</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:14:07.594000</ts>
  <user>Justo</user>
  <text>@everyone</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:15:09.703000</ts>
  <user>Christabella</user>
  <text>Did you ask your instructor for help?</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:15:13.473000</ts>
  <user>Suleiman</user>
  <text>@Gix Please don't ping everyone to ask for help and please ask for help in the #help channel (which I just created for this)</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:15:27.612000</ts>
  <user>Justo</user>
  <text>sorry my bad!</text>
</message>
<message conversation_id="118">
  <ts>2020-01-17T00:15:42.060000</ts>
  <user>Justo</user>
  <text>and yep I asked the TA but he didn;t know what to do</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:42:04.408000</ts>
  <user>Zeplyn</user>
  <text>im bored and tired of writing a lua compiler</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:42:29.421000</ts>
  <user>Zeplyn</user>
  <text>anyone need some help with stuff in racket that i could maybe do?</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:53:00.747000</ts>
  <user>Suleiman</user>
  <text>there's many things to do in my Rebellion project if you like</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:56:32.555000</ts>
  <user>Zeplyn</user>
  <text>ill give a look</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:56:37.039000</ts>
  <user>Zeplyn</user>
  <text>is there a link to it</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:57:09.415000</ts>
  <user>Suleiman</user>
  <text>https://github.com/jackfirth/rebellion</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:58:29.937000</ts>
  <user>Zeplyn</user>
  <text>before i can help my racket is giving a `"readcompiledlinklet: virtualmachine mismatch expected: chezscheme"` error do i need to install something better</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:58:36.249000</ts>
  <user>Suleiman</user>
  <text>Something that would be easy to get started with and also really helpful: replace all uses of `cond` with `strictcond` which is in the `rebellion/private/strictcond` module.</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T00:59:59.365000</ts>
  <user>Suleiman</user>
  <text>@4984 unsure. Are you in the Racket slack as well? Asking there would be more likely to get you an answer or asking on the `racketusers` mailing list.</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T01:00:22.083000</ts>
  <user>Zeplyn</user>
  <text>i need to fix my slack installation too</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T01:00:22.935000</ts>
  <user>Zeplyn</user>
  <text>😦</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T01:00:27.995000</ts>
  <user>Suleiman</user>
  <text>:'(</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T01:00:32.847000</ts>
  <user>Zeplyn</user>
  <text>ill figure that one out myself</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T01:01:09.788000</ts>
  <user>Suleiman</user>
  <text>Use slack in the web browser temporarily maybe?</text>
</message>
<message conversation_id="119">
  <ts>2020-01-17T01:04:50.163000</ts>
  <user>Zeplyn</user>
  <text>Total download size: 0.85MiB</text>
</message>
<message conversation_id="120">
  <ts>2020-01-17T01:24:32.309000</ts>
  <user>Zeplyn</user>
  <text>i need to fix my entire system now</text>
</message>
<message conversation_id="120">
  <ts>2020-01-17T01:24:46.528000</ts>
  <user>Zeplyn</user>
  <text>i dont know how i manage to break software so easily</text>
</message>
<message conversation_id="121">
  <ts>2020-01-17T13:11:07.357000</ts>
  <user>Twyla</user>
  <text>Anyone know why racketrx code was suddenly taken down from GitHub?</text>
</message>
<message conversation_id="121">
  <ts>2020-01-17T13:11:29.690000</ts>
  <user>Twyla</user>
  <text>https://github.com/samvv/racketrx</text>
</message>
<message conversation_id="121">
  <ts>2020-01-17T13:11:47.766000</ts>
  <user>Twyla</user>
  <text>There's still a raco pkg but it's broken because the repo is gone.</text>
</message>
<message conversation_id="121">
  <ts>2020-01-17T13:11:54.691000</ts>
  <user>Twyla</user>
  <text>The documentation is still up.</text>
</message>
<message conversation_id="121">
  <ts>2020-01-17T13:13:22.496000</ts>
  <user>Twyla</user>
  <text>They took down racketgaming and ramunk too.</text>
</message>
<message conversation_id="121">
  <ts>2020-01-17T13:15:12.156000</ts>
  <user>Twyla</user>
  <text>Oh he wiped his GitHub and deleted his Patreon and Twitter.</text>
</message>
<message conversation_id="122">
  <ts>2020-01-17T16:55:53.051000</ts>
  <user>Yiqun</user>
  <text>That's a shame</text>
</message>
<message conversation_id="122">
  <ts>2020-01-17T16:56:20.091000</ts>
  <user>Yiqun</user>
  <text>Maybe you can find them on gitlab?</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T03:08:14.067000</ts>
  <user>Zeplyn</user>
  <text>darn lazy racket is not the fast one</text>
</message>
<message conversation_id="122">
  <ts>2020-01-18T03:49:59.387000</ts>
  <user>Suleiman</user>
  <text>makes sense under the hood it's creating a promise for every single expression (including subexpressions)</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:02:24.862000</ts>
  <user>Zeplyn</user>
  <text>oh geez</text>
</message>
<message conversation_id="122">
  <ts>2020-01-18T05:02:47.012000</ts>
  <user>Suleiman</user>
  <text>yeah</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:04:13.822000</ts>
  <user>Zeplyn</user>
  <text>9535ms vs 164ms</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:06:48.626000</ts>
  <user>Suleiman</user>
  <text>_ouch_</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:10:03.257000</ts>
  <user>Zeplyn</user>
  <text>my language is slow</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:10:17.710000</ts>
  <user>Zeplyn</user>
  <text>sorry the implementation</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:10:25.671000</ts>
  <user>Zeplyn</user>
  <text>there are plenty of fast interpreters</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:47:28.397000</ts>
  <user>Zeplyn</user>
  <text>def gonna pay for beautyful racket soon if i dont see a reason not to within the next week or so</text>
</message>
<message conversation_id="124">
  <ts>2020-01-18T05:49:06.037000</ts>
  <user>Suleiman</user>
  <text>what sort of language are you making?</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:50:32.055000</ts>
  <user>Zeplyn</user>
  <text>lua</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:50:56.181000</ts>
  <user>Zeplyn</user>
  <text>i could not find an implementation for racket</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:51:22.629000</ts>
  <user>Zeplyn</user>
  <text>and i figure that any so called language oriented programming is valid without a lua implenetation</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:51:53.158000</ts>
  <user>Zeplyn</user>
  <text>like geez there are like 4 for java and one for python i think</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:52:24.095000</ts>
  <user>Suleiman</user>
  <text>hell yeah I'm all for a `#lang lua` implementation</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:52:35.899000</ts>
  <user>Zeplyn</user>
  <text>i mean</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:52:44.159000</ts>
  <user>Zeplyn</user>
  <text>i figured out how to `#lang lua`</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:52:50.602000</ts>
  <user>Zeplyn</user>
  <text>but actually getting it to work is hard</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:52:58.500000</ts>
  <user>Zeplyn</user>
  <text>because the lua library does some funky things</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:03.552000</ts>
  <user>Suleiman</user>
  <text>I bet</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:13.537000</ts>
  <user>Suleiman</user>
  <text>is your code online somewhere?</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:16.762000</ts>
  <user>Zeplyn</user>
  <text>soon</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:18.481000</ts>
  <user>Zeplyn</user>
  <text>actually</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:22.447000</ts>
  <user>Zeplyn</user>
  <text>within 5 minutes</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:24.730000</ts>
  <user>Zeplyn</user>
  <text>gimmie a sec</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T05:53:34.783000</ts>
  <user>Suleiman</user>
  <text>yay!</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:07:22.705000</ts>
  <user>Zeplyn</user>
  <text>sorry both my wifi and dog decided to stop working for a bit</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:07:59.531000</ts>
  <user>Zeplyn</user>
  <text>https://github.com/ShawSumma/lure</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:08:06.257000</ts>
  <user>Zeplyn</user>
  <text>note that it is a BIG mess</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:08:22.740000</ts>
  <user>Zeplyn</user>
  <text>it kinda takes some of the code from megaparsack</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:08:32.753000</ts>
  <user>Zeplyn</user>
  <text>but not that much</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:08:48.075000</ts>
  <user>Suleiman</user>
  <text>worry not you are allowed to make messes</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:09:15.345000</ts>
  <user>Suleiman</user>
  <text>learning and trying are good things to do</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:09:37.342000</ts>
  <user>Zeplyn</user>
  <text>this sounds very true</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:10:40.855000</ts>
  <user>Zeplyn</user>
  <text>wait its broken!?</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:11:54.728000</ts>
  <user>Suleiman</user>
  <text>broken how?</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:06.561000</ts>
  <user>Zeplyn</user>
  <text>i commented out a line accedently</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:08.015000</ts>
  <user>Zeplyn</user>
  <text>fixed</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:10.855000</ts>
  <user>Zeplyn</user>
  <text>😦</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:17.689000</ts>
  <user>Suleiman</user>
  <text>😮</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:27.215000</ts>
  <user>Zeplyn</user>
  <text>```lua#lang lualocal function fib(n) if n &lt; 2 then return n else return fib(n2) + fib(n1) endendprint(fib(30))```</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:37.084000</ts>
  <user>Zeplyn</user>
  <text>luckily lua only supports 1 `#` comment</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:12:44.096000</ts>
  <user>Zeplyn</user>
  <text>but does not require a shebang</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:13:16.476000</ts>
  <user>Suleiman</user>
  <text>Would you be interested in putting it on the package catalog too?</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:13:36.955000</ts>
  <user>Zeplyn</user>
  <text>when it is a bit less incomplete yes</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:13:47.287000</ts>
  <user>Suleiman</user>
  <text>wonderful 🙂</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:14:19.698000</ts>
  <user>Zeplyn</user>
  <text>i hope to start writing lua in lua</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:14:26.675000</ts>
  <user>Zeplyn</user>
  <text>but like the whole time being on racket</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T06:14:37.762000</ts>
  <user>Zeplyn</user>
  <text>thats far off</text>
</message>
<message conversation_id="125">
  <ts>2020-01-18T14:23:32.070000</ts>
  <user>Yanelly</user>
  <text>@4984 awesome. I'm just about to download and try it out</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T14:49:20.843000</ts>
  <user>Zeplyn</user>
  <text>its very not ready and i am going on a flight today</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T14:49:34.802000</ts>
  <user>Zeplyn</user>
  <text>so if you have any fixes/loops then feel free to help</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T14:54:24.496000</ts>
  <user>Zeplyn</user>
  <text>basically no loops no comments no repl</text>
</message>
<message conversation_id="123">
  <ts>2020-01-18T14:54:37.873000</ts>
  <user>Zeplyn</user>
  <text>ill add the first two now</text>
</message>
<message conversation_id="126">
  <ts>2020-01-18T19:14:16.998000</ts>
  <user>Zeplyn</user>
  <text>Racket development on android</text>
</message>
<message conversation_id="126">
  <ts>2020-01-18T19:14:21.411000</ts>
  <user>Zeplyn</user>
  <text>What could go wronh</text>
</message>
<message conversation_id="123">
  <ts>2020-01-21T21:17:19.792000</ts>
  <user>Zeplyn</user>
  <text>updates to `#lang lua`</text>
</message>
<message conversation_id="123">
  <ts>2020-01-21T21:17:24.134000</ts>
  <user>Zeplyn</user>
  <text>😄</text>
</message>
<message conversation_id="123">
  <ts>2020-01-21T21:17:31.345000</ts>
  <user>Zeplyn</user>
  <text>fixed some bugs here there</text>
</message>
<message conversation_id="123">
  <ts>2020-01-21T21:17:35.628000</ts>
  <user>Zeplyn</user>
  <text>added for loops</text>
</message>
<message conversation_id="123">
  <ts>2020-01-22T01:04:21.143000</ts>
  <user>Suleiman</user>
  <text>hooray! 🎉</text>
</message>
<message conversation_id="123">
  <ts>2020-01-22T02:35:01.978000</ts>
  <user>Twyla</user>
  <text>Progress!</text>
</message>
<message conversation_id="123">
  <ts>2020-01-23T20:22:19.445000</ts>
  <user>Zeplyn</user>
  <text>well more progress no bug fixes</text>
</message>
<message conversation_id="123">
  <ts>2020-01-23T20:22:30.562000</ts>
  <user>Zeplyn</user>
  <text>but performance has increased thanks to basic blocks</text>
</message>
<message conversation_id="123">
  <ts>2020-01-25T05:56:49.481000</ts>
  <user>Zeplyn</user>
  <text>why does racket feel newer than python dispite being slightly older</text>
</message>
<message conversation_id="127">
  <ts>2020-01-25T06:41:05.290000</ts>
  <user>Twyla</user>
  <text>Since it's a vessel for PLT research Racket incorporates a lot of experimental ideas.</text>
</message>
<message conversation_id="123">
  <ts>2020-01-28T09:39:17.810000</ts>
  <user>Twyla</user>
  <text>Wow https://dl.acm.org/doi/10.1145/3371071</text>
</message>
<message conversation_id="128">
  <ts>2020-01-28T10:33:55.433000</ts>
  <user>Suleiman</user>
  <text>hell yeah</text>
</message>
<message conversation_id="129">
  <ts>2020-01-28T10:39:19.866000</ts>
  <user>Nyriah</user>
  <text>nifty :)</text>
</message>
<message conversation_id="129">
  <ts>2020-01-28T11:24:17.639000</ts>
  <user>Twyla</user>
  <text>I wonder if it'll trickle down to a standard Racket language.</text>
</message>
<message conversation_id="130">
  <ts>2020-01-28T17:54:37.109000</ts>
  <user>Zeplyn</user>
  <text>this link does not work for me</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T02:17:47.409000</ts>
  <user>Zeplyn</user>
  <text>`#lang lua` has v a p o r w a v e errors</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T02:17:54.802000</ts>
  <user>Zeplyn</user>
  <text>unexpected: (f u n c t i o n)</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T02:19:13.698000</ts>
  <user>Zeplyn</user>
  <text>in other news its really slow</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T02:19:21.443000</ts>
  <user>Zeplyn</user>
  <text>but i still have avoided optimzations</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T02:19:28.479000</ts>
  <user>Zeplyn</user>
  <text>until i have a full fat lua</text>
</message>
<message conversation_id="131">
  <ts>2020-01-29T05:38:10.613000</ts>
  <user>Suleiman</user>
  <text>Experimenting with a collections cheat sheet diagram kind of thing. What do you all think?</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T05:39:08.853000</ts>
  <user>Suleiman</user>
  <text>Actually lemme upload a less blurry version:</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T06:00:37.197000</ts>
  <user>Yiqun</user>
  <text>Nice</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T06:54:21.249000</ts>
  <user>Twyla</user>
  <text>Looks much more professional than my diagrams.</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T06:54:30.669000</ts>
  <user>Twyla</user>
  <text>None</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T06:54:32.623000</ts>
  <user>Twyla</user>
  <text>case in point</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T18:40:47.309000</ts>
  <user>Suleiman</user>
  <text>What did you use to make your diagram?</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T19:27:56.375000</ts>
  <user>Twyla</user>
  <text>Inkscape</text>
</message>
<message conversation_id="130">
  <ts>2020-01-29T19:28:00.713000</ts>
  <user>Twyla</user>
  <text>But I think I lost the SVG file.</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:34:31.102000</ts>
  <user>Zeplyn</user>
  <text>im so happy</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:34:45.324000</ts>
  <user>Zeplyn</user>
  <text>for the first time a package i made is somewhere</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:35:08.853000</ts>
  <user>Zeplyn</user>
  <text>https://pkgd.racketlang.org/pkgn/package/lua look at how pretty it shines</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:51:27.516000</ts>
  <user>Suleiman</user>
  <text>That's wonderful!</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:51:42.869000</ts>
  <user>Suleiman</user>
  <text>Congrats 🙂</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:54:05.968000</ts>
  <user>Zeplyn</user>
  <text>basic blocks simplified my code so much</text>
</message>
<message conversation_id="132">
  <ts>2020-01-30T01:54:09.757000</ts>
  <user>Zeplyn</user>
  <text>i love basic blocks</text>
</message>
</discord>